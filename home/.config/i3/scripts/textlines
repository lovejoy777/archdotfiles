#!/usr/bin/env bash
#
# Use rofi/zenity to change system runstate thanks to systemd.
#
# Note: this currently relies on associative array support in the shell.
#
# Modified by S Lovejoy aka Lovejoy777 11-11-2016
#
# Inspired from i3pystatus wiki:
# https://github.com/enkore/i3pystatus/wiki/Shutdown-Menu
# &
# https://github.com/C14L/textlines-indicator
#
# Copyright 2015 Benjamin Chrétien <chretien at lirmm dot fr>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#######################################################################
#                            BEGIN CONFIG                             #
#######################################################################

# Colors: FG (foreground), BG (background), HL (highlighted)
FG_COLOR="#bbbbbb"
BG_COLOR="#363C41"
HLFG_COLOR="#363C41"
HLBG_COLOR="#bbbbbb"
BORDER_COLOR="#222222"

# Options not related to colors
ROFI_TEXT="_TextLines: "
ROFI_OPTIONS="-location 0 -width 30 -hide-scrollbar"

# Zenity options
ZENITY_TITLE="Menu"
ZENITY_TEXT="Action:"
ZENITY_OPTIONS="--column= --hide-header"
TEXTLINES10=$(sed -n '10p' ~/.textlines)
TEXTLINES11=$(sed -n '11p' ~/.textlines)
TEXTLINES12=$(sed -n '12p' ~/.textlines)
TEXTLINES1=$(sed -n '1p' ~/.textlines)
TEXTLINES2=$(sed -n '2p' ~/.textlines)
TEXTLINES3=$(sed -n '3p' ~/.textlines)
TEXTLINES4=$(sed -n '4p' ~/.textlines)
TEXTLINES5=$(sed -n '5p' ~/.textlines)
TEXTLINES6=$(sed -n '6p' ~/.textlines)
TEXTLINES7=$(sed -n '7p' ~/.textlines)
TEXTLINES8=$(sed -n '8p' ~/.textlines)
TEXTLINES9=$(sed -n '9p' ~/.textlines)


#######################################################################
#                             END CONFIG                              #
#######################################################################

# Whether to ask for user's confirmation
enable_confirmation=false

# Preferred launcher if both are available
preferred_launcher="rofi"

usage="$(basename "$0") [-h] [-c] [-p rofi] -- display a menu for copy & paste favourites.

where:
    -h  show this help text
    -c  ask for user confirmation
    -p  preferred launcher (rofi or zenity)

This script depends on:
  - systemd,
  - i3,
  - rofi or zenity."

# Check whether the user-defined launcher is valid
launcher_list=(rofi zenity)
function check_launcher() {
  if [[ ! "${launcher_list[@]}" =~ (^|[[:space:]])"$1"($|[[:space:]]) ]]; then
    echo "Supported launchers: ${launcher_list[*]}"
    exit 1
  else
    # Get array with unique elements and preferred launcher first
    # Note: uniq expects a sorted list, so we cannot use it
    i=1
    launcher_list=($(for l in "$1" "${launcher_list[@]}"; do printf "%i %s\n" "$i" "$l"; let i+=1; done \
      | sort -uk2 | sort -nk1 | cut -d' ' -f2- | tr '\n' ' '))
  fi
}

# Parse CLI arguments
while getopts "hcp:" option; do
  case "${option}" in
    h) echo "${usage}"
       exit 0
       ;;
    c) enable_confirmation=true
       ;;
    p) preferred_launcher="${OPTARG}"
       check_launcher "${preferred_launcher}"
       ;;
    *) exit 1
       ;;
  esac
done

# Check whether a command exists
function command_exists() {
  command -v "$1" &> /dev/null 2>&1
}

# systemctl required
if ! command_exists systemctl ; then
  exit 1
fi

# menu defined as an associative array
typeset -A menu

# Menu with keys/commands
menu=(
  
  
  [  10: ${TEXTLINES10}]="echo "${TEXTLINES10}" | xclip -selection clipboard"
  [  11: ${TEXTLINES11}]="echo "${TEXTLINES11}" | xclip -selection clipboard"
  [  12: ${TEXTLINES12}]="echo "${TEXTLINES12}" | xclip -selection clipboard"
  [  1: ${TEXTLINES1}]="echo "${TEXTLINES1}" | xclip -selection clipboard"
  [  2: ${TEXTLINES2}]="echo "${TEXTLINES2}" | xclip -selection clipboard"
  [  3: ${TEXTLINES3}]="echo "${TEXTLINES3}" | xclip -selection clipboard"
  [  4: ${TEXTLINES4}]="echo "${TEXTLINES4}" | xclip -selection clipboard"
  [  5: ${TEXTLINES5}]="echo "${TEXTLINES5}" | xclip -selection clipboard"
  [  6: ${TEXTLINES6}]="echo "${TEXTLINES6}" | xclip -selection clipboard"
  [  7: ${TEXTLINES7}]="echo "${TEXTLINES7}" | xclip -selection clipboard"
  [  8: ${TEXTLINES8}]="echo "${TEXTLINES8}" | xclip -selection clipboard"
  [  9: ${TEXTLINES9}]="echo "${TEXTLINES9}" | xclip -selection clipboard"
)
menu_nrows=${#menu[@]}

# Menu entries that may trigger a confirmation message
menu_confirm=""

launcher_exe=""
launcher_options=""
rofi_colors=""

function prepare_launcher() {
  if [[ "$1" == "rofi" ]]; then
    rofi_colors="-bc ${BORDER_COLOR} -bg ${BG_COLOR} -fg ${FG_COLOR} \
      -hlfg ${HLFG_COLOR} -hlbg ${HLBG_COLOR}"
    launcher_exe="rofi"
    launcher_options="-dmenu -i -lines ${menu_nrows} -p ${ROFI_TEXT} \
      ${rofi_colors} ${ROFI_OPTIONS}"
  elif [[ "$1" == "zenity" ]]; then
    launcher_exe="zenity"
    launcher_options="--list --title=${ZENITY_TITLE} --text=${ZENITY_TEXT} \
      ${ZENITY_OPTIONS}"
  fi
}

for l in "${launcher_list[@]}"; do
  if command_exists "${l}" ; then
    prepare_launcher "${l}"
    break
  fi
done

# No launcher available
if [[ -z "${launcher_exe}" ]]; then
  exit 1
fi

launcher="${launcher_exe} ${launcher_options}"
selection="$(printf '%s\n' "${!menu[@]}" | sort | ${launcher})"

function ask_confirmation() {
  if [ "${launcher_exe}" == "rofi" ]; then
    confirmed=$(echo -e "Yes\nNo" | rofi -dmenu -i -lines 2 -p "${selection}?" \
      ${rofi_colors} ${ROFI_OPTIONS})
    [ "${confirmed}" == "Yes" ] && confirmed=0
  elif [ "${launcher_exe}" == "zenity" ]; then
    zenity --question --text "Are you sure you want to ${selection,,}?"
    confirmed=$?
  fi

  if [ "${confirmed}" == 0 ]; then
    i3-msg -q "exec ${menu[${selection}]}"
  fi
}

if [[ $? -eq 0 && ! -z ${selection} ]]; then
  if [[ "${enable_confirmation}" = true && \
        ${menu_confirm} =~ (^|[[:space:]])"${selection}"($|[[:space:]]) ]]; then
    ask_confirmation
  else
    i3-msg -q "exec ${menu[${selection}]}"
  fi
fi
