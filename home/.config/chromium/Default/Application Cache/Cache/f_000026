
var TDev; if(!TDev) TDev = {}; TDev.shippedLibraryCache = {
 "updates": {
  "pzngyn": "pzngyn",
  "xmyfcx": "pzngyn",
  "rwhibw": "pzngyn",
  "rfvakj": "pzngyn",
  "xgnqyf": "pzngyn",
  "zbiwoq": "pzngyn",
  "xczaux": "xczaux",
  "btierw": "xczaux",
  "njcjlk": "xczaux",
  "jcyhqq": "jcyhqq",
  "fvpcct": "jcyhqq",
  "pwjcnz": "jcyhqq",
  "tummov": "jcyhqq",
  "dceiba": "dceiba",
  "jztbbx": "jztbbx",
  "vkmzfe": "jztbbx",
  "lpyqwl": "jztbbx",
  "lyhgks": "jztbbx",
  "lhnrxc": "jztbbx",
  "rqusix": "jztbbx",
  "vjbufd": "jztbbx",
  "dlxfsa": "jztbbx",
  "dxihyl": "jztbbx",
  "hsxfze": "jztbbx",
  "xnkmqj": "jztbbx",
  "joggzb": "jztbbx",
  "hgcivb": "jztbbx",
  "jfhfbf": "jztbbx",
  "pvldqm": "jztbbx",
  "lmztcr": "jztbbx",
  "fnsquv": "jztbbx",
  "xyelfe": "xyelfe",
  "lohjia": "lohjia",
  "dwiebl": "lohjia",
  "bwulwg": "lohjia",
  "rsnhdj": "lohjia",
  "boouiv": "lohjia",
  "xlxslt": "lohjia",
  "vflqes": "lohjia",
  "rknjae": "lohjia",
  "fdbsiw": "lohjia",
  "blijwl": "lohjia",
  "bzpicf": "lohjia",
  "lptrek": "lohjia",
  "ljivpr": "lohjia",
  "njwiab": "lohjia",
  "tgpxru": "tgpxru",
  "lnyirj": "tgpxru",
  "xpccdk": "tgpxru",
  "tmfxah": "tgpxru",
  "tulxtd": "tgpxru",
  "leviat": "tgpxru",
  "xrsbct": "tgpxru",
  "dgzalb": "tgpxru",
  "ntnaek": "tgpxru",
  "fqycyb": "tgpxru",
  "vmodll": "tgpxru",
  "nzngii": "tgpxru",
  "zppitt": "tgpxru",
  "vdtdmk": "tgpxru",
  "drdxps": "tgpxru",
  "nfleak": "tgpxru",
  "dsgmns": "tgpxru",
  "rgzzbv": "tgpxru",
  "bacckw": "tgpxru",
  "phdnud": "tgpxru",
  "hdrpdj": "tgpxru",
  "trcsiq": "tgpxru",
  "vtxxzt": "tgpxru",
  "xpccen": "tgpxru",
  "lbfjuu": "tgpxru",
  "bmjsup": "tgpxru",
  "xbpfet": "xbpfet",
  "tjamyj": "xbpfet",
  "rbmtqn": "xbpfet",
  "paoixe": "xbpfet",
  "rfsnox": "xbpfet",
  "hvmmzk": "xbpfet",
  "fxyeei": "xbpfet",
  "lmqwsm": "xbpfet",
  "tyqrcx": "xbpfet",
  "rpnbfg": "xbpfet",
  "ruxplx": "xbpfet",
  "hjxfxm": "xbpfet",
  "blwvrs": "xbpfet",
  "bfdyuk": "xbpfet",
  "hajssc": "xbpfet",
  "lvpfqe": "xbpfet",
  "vzkdcc": "xbpfet",
  "dnfbfj": "xbpfet",
  "jowara": "jowara",
  "jwzrac": "jowara",
  "jinlsg": "jowara",
  "xuozdw": "jowara",
  "vnkwrm": "jowara",
  "xvdxqj": "jowara",
  "ljvbcu": "jowara",
  "tzpnpk": "jowara",
  "tbvqzm": "jowara",
  "pyudxk": "jowara",
  "llxdhr": "jowara",
  "rlsdex": "jowara",
  "jasfim": "jowara",
  "trbrqq": "jowara",
  "tnwmgs": "jowara",
  "nufgti": "jowara",
  "vgbplz": "jowara",
  "zfbkbb": "jowara",
  "vldvpc": "jowara",
  "dhkqum": "jowara",
  "nbpjbl": "jowara",
  "fdrhpb": "jowara",
  "fyydkk": "jowara",
  "nmhibf": "jowara",
  "vrhiwz": "jowara",
  "dotmbn": "jowara",
  "pluhts": "jowara",
  "phzafk": "jowara",
  "txmcff": "jowara",
  "rmeurh": "jowara",
  "hfkfrj": "jowara",
  "zzhwln": "jowara",
  "ziynpv": "jowara",
  "ttnzbx": "jowara",
  "dsuacd": "jowara",
  "basduc": "jowara",
  "halxyt": "jowara",
  "vimisk": "jowara",
  "lirsmq": "jowara",
  "jrvnlu": "jowara",
  "zkpmfe": "jowara",
  "fkinwi": "jowara",
  "fiimud": "jowara",
  "zivklh": "jowara",
  "xhrblh": "jowara",
  "tdloqa": "jowara",
  "dfaiyr": "jowara",
  "hrvbin": "jowara",
  "tjwpnx": "tjwpnx",
  "pnmapm": "tjwpnx",
  "fkoswh": "tjwpnx",
  "pkfjzi": "tjwpnx",
  "ntijaa": "tjwpnx",
  "dsgklp": "tjwpnx",
  "hxknul": "tjwpnx",
  "xtdqur": "tjwpnx",
  "zkvycu": "tjwpnx",
  "fdcdke": "tjwpnx",
  "timemq": "tjwpnx",
  "jatkdh": "tjwpnx",
  "fflebn": "tjwpnx",
  "hibawm": "tjwpnx",
  "fmmavb": "tjwpnx",
  "fzypmq": "tjwpnx",
  "bhbvya": "tjwpnx",
  "zlkons": "tjwpnx",
  "fhjdxt": "tjwpnx",
  "fccpcn": "tjwpnx",
  "lfpakg": "tjwpnx",
  "zjinpw": "tjwpnx",
  "nlnzga": "tjwpnx",
  "lxtzxx": "tjwpnx",
  "fapdpb": "tjwpnx",
  "zfxkuh": "tjwpnx",
  "lzjlpd": "tjwpnx",
  "djwhxu": "tjwpnx",
  "bhylxt": "tjwpnx",
  "fgtlwv": "tjwpnx",
  "tefjnz": "tjwpnx",
  "bszmrk": "tjwpnx",
  "ryglta": "tjwpnx",
  "ditrnm": "tjwpnx",
  "vsiztm": "tjwpnx",
  "lkuyum": "tjwpnx",
  "dqkxtp": "tjwpnx",
  "ffetnp": "tjwpnx",
  "vaivlc": "tjwpnx",
  "plehpx": "tjwpnx",
  "bqtorq": "tjwpnx",
  "jpexjh": "tjwpnx",
  "vehemv": "tjwpnx",
  "hswbld": "tjwpnx",
  "dbkrwh": "tjwpnx",
  "bglpha": "tjwpnx",
  "lyusma": "tjwpnx",
  "bltbdc": "tjwpnx",
  "rwbwnc": "rwbwnc",
  "xgqnpl": "rwbwnc",
  "flwhyo": "rwbwnc",
  "lkqbjr": "rwbwnc",
  "zhslvl": "rwbwnc",
  "zibjkk": "rwbwnc",
  "ryudev": "rwbwnc",
  "rwkysy": "rwbwnc",
  "btfsgu": "rwbwnc",
  "fhvcir": "rwbwnc",
  "ticpeu": "rwbwnc",
  "vunhaj": "rwbwnc",
  "bfxgzp": "rwbwnc",
  "ppbtkr": "rwbwnc",
  "tamxmb": "rwbwnc",
  "pyfuaj": "rwbwnc",
  "vlgowe": "rwbwnc",
  "vxryfu": "rwbwnc",
  "hnmzma": "rwbwnc",
  "lwagkt": "rwbwnc",
  "vlsqtp": "rwbwnc",
  "tkqhxs": "rwbwnc",
  "ddbdlp": "rwbwnc",
  "vbpllw": "rwbwnc",
  "hgdnlk": "rwbwnc",
  "xdbgfd": "rwbwnc",
  "hisopu": "rwbwnc",
  "hpsbjr": "rwbwnc",
  "rdnlgg": "rwbwnc",
  "dtanwz": "rwbwnc",
  "vqneem": "rwbwnc",
  "hfslhg": "rwbwnc",
  "ndqert": "rwbwnc",
  "fxfuvk": "rwbwnc",
  "jljdtt": "rwbwnc",
  "dlfyfr": "rwbwnc",
  "ldaqbf": "rwbwnc",
  "bicvwk": "rwbwnc",
  "peixmc": "rwbwnc",
  "jspgcp": "rwbwnc",
  "dhzjxl": "rwbwnc",
  "bvfteo": "rwbwnc",
  "zspnrz": "rwbwnc",
  "pmlwzq": "rwbwnc",
  "hehjco": "rwbwnc",
  "zgzyag": "rwbwnc",
  "vdxsnb": "rwbwnc",
  "rhzcbr": "rwbwnc",
  "bugxan": "rwbwnc",
  "paskjp": "rwbwnc",
  "huubfm": "rwbwnc",
  "jxjbju": "rwbwnc",
  "djjdpb": "rwbwnc",
  "fsdvro": "rwbwnc",
  "njxqsg": "njxqsg",
  "jzzrnq": "njxqsg",
  "tmizmw": "njxqsg",
  "howjlb": "njxqsg",
  "ndodyk": "njxqsg",
  "bnkbfq": "njxqsg",
  "pndnla": "njxqsg",
  "nqjlbg": "njxqsg",
  "rpfsmn": "njxqsg",
  "xgzgcy": "njxqsg",
  "vyzssw": "njxqsg",
  "fdlnnr": "njxqsg",
  "ltvhod": "njxqsg",
  "nrplbi": "njxqsg",
  "tashnb": "njxqsg",
  "xsurev": "njxqsg",
  "tuzezw": "njxqsg",
  "hqqryq": "njxqsg",
  "bzhcxd": "njxqsg",
  "xytpsi": "njxqsg",
  "thflqk": "njxqsg",
  "pocsyb": "njxqsg",
  "jpvoxj": "njxqsg",
  "xzsvex": "njxqsg",
  "jvkxya": "njxqsg",
  "nhgcyh": "njxqsg",
  "fafqqy": "njxqsg",
  "vldxsb": "njxqsg",
  "nvzoiu": "njxqsg",
  "ruqbfc": "njxqsg",
  "ftjozd": "njxqsg",
  "jquahl": "njxqsg",
  "zuurkm": "njxqsg",
  "zdcxqn": "njxqsg",
  "fqstta": "njxqsg",
  "xessad": "njxqsg",
  "lagzvz": "njxqsg",
  "raqojy": "njxqsg",
  "dfjodw": "njxqsg",
  "rveqvu": "njxqsg",
  "tjojku": "njxqsg",
  "znmsng": "njxqsg",
  "rvjljs": "njxqsg",
  "dtyvzo": "njxqsg",
  "vgruia": "njxqsg",
  "ldjskk": "njxqsg",
  "jcsoox": "njxqsg",
  "jsxbyn": "njxqsg",
  "nwmsfn": "njxqsg",
  "jinley": "njxqsg",
  "phkxrv": "njxqsg",
  "tqvaau": "njxqsg",
  "regzxg": "njxqsg",
  "pvucub": "njxqsg",
  "zjwfbi": "njxqsg",
  "fsrbza": "njxqsg",
  "fudpsy": "njxqsg",
  "hbpcym": "njxqsg",
  "dpwlkf": "njxqsg",
  "byelqo": "njxqsg",
  "tzmpvf": "njxqsg",
  "nrrcvw": "njxqsg",
  "bendhe": "njxqsg",
  "hdkwlu": "njxqsg",
  "rbgelh": "njxqsg",
  "vsuixj": "njxqsg",
  "hlgbao": "njxqsg",
  "fktqmg": "njxqsg",
  "bwfzww": "njxqsg",
  "flzcsl": "njxqsg",
  "jppknl": "njxqsg",
  "tentup": "njxqsg",
  "brajid": "njxqsg",
  "zeousb": "njxqsg",
  "rtssjg": "njxqsg",
  "pjxtzs": "njxqsg",
  "hzduee": "njxqsg",
  "dtwvpv": "njxqsg",
  "zecodr": "njxqsg",
  "xhvlgz": "njxqsg",
  "rfgvru": "njxqsg",
  "jcvnou": "njxqsg",
  "jnjqgc": "njxqsg",
  "faxnop": "njxqsg",
  "tmoluc": "njxqsg",
  "rwqgyd": "njxqsg",
  "hmuejp": "njxqsg",
  "rgyfae": "njxqsg",
  "nnkxto": "njxqsg",
  "hcmylp": "njxqsg",
  "duwejj": "njxqsg",
  "nedhlt": "njxqsg",
  "xftcfs": "njxqsg",
  "boihcn": "njxqsg",
  "vsplbm": "njxqsg",
  "ljqwee": "njxqsg",
  "jpccms": "njxqsg",
  "hrcqgn": "njxqsg",
  "vtrnrd": "njxqsg",
  "djexui": "njxqsg",
  "pqhjfc": "njxqsg",
  "bgmljr": "njxqsg",
  "bsxkwc": "njxqsg",
  "fnxamc": "njxqsg",
  "traifc": "njxqsg",
  "rlohpi": "njxqsg",
  "zmjejw": "njxqsg",
  "fgaiot": "njxqsg",
  "prvwsn": "njxqsg",
  "lqzmez": "njxqsg",
  "dokibj": "njxqsg",
  "vzzjsk": "njxqsg",
  "dqiavj": "njxqsg",
  "ptrzio": "njxqsg",
  "bcdsst": "njxqsg",
  "hgwcjq": "njxqsg",
  "fdbive": "njxqsg",
  "brinah": "njxqsg",
  "vlwuan": "njxqsg",
  "vewajo": "njxqsg",
  "fxrjny": "njxqsg",
  "xyvvhp": "njxqsg",
  "vmcpue": "njxqsg",
  "xjopei": "njxqsg",
  "dyniji": "njxqsg",
  "hckrfj": "njxqsg",
  "fgnmcb": "njxqsg",
  "txssad": "njxqsg",
  "jqldsq": "njxqsg",
  "nvokyb": "njxqsg",
  "jxjghw": "njxqsg",
  "hojdue": "njxqsg",
  "tnlqvy": "njxqsg",
  "beusln": "njxqsg",
  "lifutj": "njxqsg",
  "tmxgdk": "njxqsg",
  "fgvarw": "njxqsg",
  "xqypse": "njxqsg",
  "fcjaqm": "njxqsg",
  "vmqhsx": "njxqsg",
  "rvuque": "njxqsg",
  "hbmvrk": "njxqsg",
  "zuoapq": "njxqsg",
  "zmisat": "njxqsg",
  "drzcuf": "njxqsg",
  "vunagm": "njxqsg",
  "vcxfed": "njxqsg",
  "hetgnc": "njxqsg",
  "zbbqsq": "njxqsg",
  "fjgkli": "njxqsg",
  "fogzaw": "njxqsg",
  "vdybeo": "njxqsg",
  "fyyzri": "njxqsg",
  "lfuzog": "njxqsg",
  "bmobqs": "njxqsg",
  "lwrheb": "njxqsg",
  "bcivhd": "njxqsg",
  "fnunlw": "njxqsg",
  "hizses": "njxqsg",
  "nvswhh": "njxqsg",
  "hjzirz": "njxqsg",
  "fgqhyx": "njxqsg",
  "flzyau": "njxqsg",
  "jybhqz": "njxqsg",
  "bztzhj": "njxqsg",
  "hweebz": "njxqsg",
  "bkzaks": "njxqsg",
  "pheygq": "njxqsg",
  "hwpbmu": "njxqsg",
  "jxyceh": "njxqsg",
  "vdehwm": "njxqsg",
  "dpgrqt": "njxqsg",
  "xyyzhw": "njxqsg",
  "vxwcfp": "njxqsg",
  "zvvdnj": "njxqsg",
  "vxmesj": "njxqsg",
  "horjze": "njxqsg",
  "leoluh": "njxqsg",
  "jyyjzs": "njxqsg",
  "fqpgbl": "njxqsg",
  "peyjwx": "njxqsg",
  "fgfzbe": "njxqsg",
  "nnlrki": "njxqsg",
  "fexjlb": "njxqsg",
  "jaajrz": "njxqsg",
  "xwpigo": "njxqsg",
  "jiggzv": "njxqsg",
  "bqwzul": "njxqsg",
  "zfcylw": "njxqsg",
  "xcisdq": "njxqsg",
  "pfthxp": "njxqsg",
  "fvsnwu": "njxqsg",
  "ndhari": "njxqsg",
  "tyjtop": "njxqsg",
  "lvlboe": "njxqsg",
  "nmuxic": "njxqsg",
  "hxorqw": "njxqsg",
  "rzahie": "njxqsg",
  "beyybb": "njxqsg",
  "xqjkcp": "njxqsg",
  "juwyve": "njxqsg",
  "fqgedq": "njxqsg",
  "puijzs": "njxqsg",
  "rvhexm": "njxqsg",
  "renlro": "njxqsg",
  "zyqdvs": "njxqsg",
  "llqofi": "njxqsg",
  "vzxkfl": "njxqsg",
  "dtseqv": "njxqsg",
  "pemxpm": "njxqsg",
  "haapxp": "njxqsg",
  "zdasxv": "njxqsg",
  "trcljw": "njxqsg",
  "rednoe": "njxqsg",
  "labrqc": "njxqsg",
  "xkptia": "njxqsg",
  "vnnfxr": "njxqsg",
  "fgluyw": "njxqsg",
  "dtuita": "njxqsg",
  "vgdxqe": "njxqsg",
  "tobmaz": "njxqsg",
  "vszjdo": "njxqsg",
  "lxdokl": "njxqsg",
  "nkmjxh": "njxqsg",
  "bsltzc": "njxqsg",
  "doancw": "njxqsg",
  "lhdndq": "njxqsg",
  "tuplyq": "njxqsg",
  "zlwlyy": "njxqsg",
  "hbjzjt": "njxqsg",
  "pigzcc": "njxqsg",
  "rgwsxk": "njxqsg",
  "jqsszw": "njxqsg",
  "rwekce": "njxqsg",
  "pjlkva": "njxqsg",
  "baokpp": "njxqsg",
  "dgqzfl": "njxqsg",
  "lfjdoz": "njxqsg",
  "hqypue": "njxqsg",
  "jylsgx": "njxqsg",
  "dakqdg": "njxqsg",
  "nntbxo": "njxqsg",
  "ntjddv": "njxqsg",
  "rraqlk": "njxqsg",
  "fxeiws": "njxqsg",
  "xyrszg": "njxqsg",
  "vyftnw": "njxqsg",
  "fjktig": "njxqsg",
  "zfndvp": "njxqsg",
  "xnkwii": "njxqsg",
  "vskciw": "njxqsg",
  "blwjqd": "njxqsg",
  "vzvhqq": "njxqsg",
  "vvqjhc": "njxqsg",
  "telcei": "njxqsg",
  "vyebqv": "njxqsg",
  "hhkrab": "njxqsg",
  "jzgvsu": "njxqsg",
  "lukghe": "njxqsg",
  "tmgkjt": "njxqsg",
  "llyxpt": "njxqsg",
  "ndyhzm": "njxqsg",
  "vmnwsl": "njxqsg",
  "tqpbol": "njxqsg",
  "tpwoso": "njxqsg",
  "vlwphm": "njxqsg",
  "zkruva": "njxqsg",
  "flbpqk": "njxqsg",
  "beddew": "njxqsg",
  "tylnad": "njxqsg",
  "rpffea": "njxqsg",
  "hmvlxa": "njxqsg",
  "jodxyn": "njxqsg",
  "lgepxr": "njxqsg",
  "pfapdx": "njxqsg",
  "rexsxe": "njxqsg",
  "xuvjpz": "njxqsg",
  "tmjidg": "njxqsg",
  "pyseel": "njxqsg",
  "xbirbd": "njxqsg",
  "jkoykz": "njxqsg",
  "hkanrj": "njxqsg",
  "zcgowp": "njxqsg",
  "demugb": "njxqsg",
  "biymbi": "njxqsg",
  "xafywk": "njxqsg",
  "tthoxe": "njxqsg",
  "zpwjcc": "njxqsg",
  "lnjzri": "njxqsg",
  "jlvqyk": "njxqsg",
  "dtycws": "njxqsg",
  "xycdix": "njxqsg",
  "balqjq": "njxqsg",
  "hdzraa": "njxqsg",
  "ttltbw": "njxqsg",
  "fpfygq": "njxqsg",
  "znnral": "njxqsg",
  "zgggrx": "njxqsg",
  "lwhfye": "njxqsg",
  "rxlihk": "njxqsg",
  "dgnyim": "njxqsg",
  "jbsujg": "njxqsg",
  "vbqdlt": "njxqsg",
  "byhlao": "njxqsg",
  "tsyixa": "njxqsg",
  "bpmeqv": "njxqsg",
  "plhzfl": "njxqsg",
  "lsdizt": "njxqsg",
  "tzemng": "njxqsg",
  "rintdk": "njxqsg",
  "lwrlzo": "njxqsg",
  "vrxypn": "njxqsg",
  "zpjmqx": "njxqsg",
  "vuzioa": "njxqsg",
  "bakbbw": "njxqsg",
  "ncxxul": "njxqsg",
  "rhyemy": "njxqsg",
  "ficzlp": "njxqsg",
  "xulltg": "njxqsg",
  "tfpnjn": "njxqsg",
  "lhdroh": "njxqsg",
  "hveqib": "njxqsg",
  "hlclot": "njxqsg",
  "javxjs": "njxqsg",
  "pjlnya": "njxqsg",
  "nujmdz": "njxqsg",
  "hnfaau": "njxqsg",
  "rvjatm": "njxqsg",
  "drljsg": "njxqsg",
  "fbzlkj": "njxqsg",
  "hiqwys": "njxqsg",
  "byjuwx": "njxqsg",
  "vrmqnm": "njxqsg",
  "xnwrou": "njxqsg",
  "xaerpi": "njxqsg",
  "jeidnq": "njxqsg",
  "nnlltw": "njxqsg",
  "xfhchy": "njxqsg",
  "dzrqao": "njxqsg",
  "lppvfg": "njxqsg",
  "petakh": "njxqsg",
  "taaotd": "njxqsg",
  "rllwts": "njxqsg",
  "jlddeg": "njxqsg",
  "hgzzla": "njxqsg",
  "paulra": "njxqsg",
  "bwdbve": "njxqsg",
  "totsim": "njxqsg",
  "jtpmeh": "njxqsg",
  "fzaonu": "njxqsg",
  "fldvox": "njxqsg",
  "dhhzzl": "njxqsg"
 },
 "ids": [
  "nmhibf",
  "vxwcfp",
  "ldaqbf",
  "vzkdcc",
  "fdbsiw",
  "xnkmqj",
  "drdxps",
  "zbiwoq",
  "lyusma",
  "xczaux",
  "dceiba",
  "pwjcnz",
  "xyelfe"
 ],
 "json": {
  "pzngyn": {
   "kind": "script",
   "id": "pzngyn",
   "time": 1453051899,
   "userid": "nzle",
   "username": "Microsoft Touch Develop",
   "name": "micro:bit music",
   "description": "The music namespace #music",
   "positivereviews": 0,
   "subscribers": 0,
   "comments": 0,
   "baseid": "xmyfcx",
   "icon": "emptycircle",
   "iconbackground": "#0095ff",
   "cumulativepositivereviews": 0,
   "screenshots": 0,
   "rootid": "zbiwoq",
   "updateid": "pzngyn",
   "updatetime": 1453051899,
   "ishidden": false,
   "islibrary": true,
   "mergeids": [],
   "editor": "",
   "meta": {},
   "raw": "",
   "scripthash": "5b4a7e1865a017a7b77c9ed93a1898d6",
   "updateroot": "zbiwoq",
   "unmoderated": false,
   "noexternallinks": false
  },
  "xczaux": {
   "kind": "script",
   "id": "xczaux",
   "time": 1432920327,
   "userid": "nzle",
   "username": "Microsoft Touch Develop",
   "name": "blank blocks",
   "description": "",
   "positivereviews": 0,
   "subscribers": 0,
   "comments": 0,
   "baseid": "btierw",
   "icon": "",
   "iconbackground": "#FF7518",
   "cumulativepositivereviews": 0,
   "screenshots": 0,
   "rootid": "tnbqbf",
   "updateid": "xczaux",
   "updatetime": 1432920327,
   "ishidden": false,
   "islibrary": false,
   "mergeids": [],
   "editor": "blockly",
   "meta": {},
   "raw": "",
   "scripthash": "1e86cd3ff643e0574f4fe80aca77926b",
   "updateroot": "xczaux",
   "unmoderated": false,
   "noexternallinks": false
  },
  "jcyhqq": {
   "kind": "script",
   "id": "jcyhqq",
   "time": 1449171821,
   "userid": "xcih",
   "username": "Peli",
   "name": "flashing heart tutorial",
   "description": "control images with variables. #microbit #docs #tutorials #stepByStep",
   "positivereviews": 0,
   "subscribers": 0,
   "comments": 0,
   "baseid": "pwjcnz",
   "icon": "emptycircle",
   "iconbackground": "#0095ff",
   "cumulativepositivereviews": 0,
   "screenshots": 0,
   "rootid": "fpildn",
   "updateid": "jcyhqq",
   "updatetime": 1449171821,
   "ishidden": false,
   "islibrary": false,
   "mergeids": [],
   "editor": "",
   "meta": {
    "vimeo": "134118118",
    "videoptr": "td/videos/flashing-heart-0"
   },
   "raw": "",
   "scripthash": "0c4a5a7145bd2b106da08427b9a29622",
   "updateroot": "tummov",
   "unmoderated": false,
   "noexternallinks": false
  },
  "dceiba": {
   "kind": "script",
   "id": "dceiba",
   "time": 1432920385,
   "userid": "nzle",
   "username": "Microsoft Touch Develop",
   "name": "blink blocks",
   "description": "",
   "positivereviews": 0,
   "subscribers": 0,
   "comments": 0,
   "baseid": "tnbqbf",
   "icon": "",
   "iconbackground": "#FF7518",
   "cumulativepositivereviews": 0,
   "screenshots": 0,
   "rootid": "tnbqbf",
   "updateid": "dceiba",
   "updatetime": 1432920385,
   "ishidden": false,
   "islibrary": false,
   "mergeids": [],
   "editor": "blockly",
   "meta": {},
   "raw": "",
   "scripthash": "ec6dcd9c87814c7dd2d3e8146f17c425",
   "updateroot": "dceiba",
   "unmoderated": false,
   "noexternallinks": false
  },
  "jztbbx": {
   "kind": "script",
   "id": "jztbbx",
   "time": 1445017494,
   "userid": "nzle",
   "username": "Microsoft Touch Develop",
   "name": "micro:bit senses",
   "description": "A #microbit library that exposes orientation and movement events.",
   "positivereviews": 3,
   "subscribers": 0,
   "comments": 0,
   "baseid": "vkmzfe",
   "icon": "emptycircle",
   "iconbackground": "#0095ff",
   "cumulativepositivereviews": 3,
   "screenshots": 0,
   "rootid": "rjpqoh",
   "updateid": "jztbbx",
   "updatetime": 1445017494,
   "ishidden": false,
   "islibrary": true,
   "mergeids": [],
   "editor": "",
   "meta": {},
   "raw": "",
   "scripthash": "9f6891a522efc4f9b846d88580c62325",
   "updateroot": "fnsquv",
   "unmoderated": false,
   "noexternallinks": false,
   "lastpointer": "ptr-usercontent-fnsquv"
  },
  "xyelfe": {
   "kind": "script",
   "id": "xyelfe",
   "time": 1457372439,
   "userid": "dvin",
   "username": "Michał (MS)",
   "name": "blank script",
   "description": "A MicroPython script",
   "positivereviews": 0,
   "subscribers": 0,
   "comments": 0,
   "baseid": "",
   "icon": "",
   "iconbackground": "#FF7518",
   "cumulativepositivereviews": 0,
   "screenshots": 0,
   "rootid": "xyelfe",
   "updateid": "xyelfe",
   "updatetime": 1457372439,
   "ishidden": false,
   "islibrary": false,
   "mergeids": [],
   "editor": "python",
   "meta": {},
   "raw": "",
   "scripthash": "5456ac9ffb2d7281c254ab884a89c875",
   "updateroot": "xyelfe",
   "unmoderated": false,
   "noexternallinks": false
  },
  "lohjia": {
   "kind": "script",
   "id": "lohjia",
   "time": 1448588234,
   "userid": "nzle",
   "username": "Microsoft Touch Develop",
   "name": "micro:bit serial",
   "description": "A #microbit library to print messages to the serial port.",
   "positivereviews": 0,
   "subscribers": 0,
   "comments": 0,
   "baseid": "dwiebl",
   "icon": "emptycircle",
   "iconbackground": "#0095ff",
   "cumulativepositivereviews": 0,
   "screenshots": 0,
   "rootid": "njwiab",
   "updateid": "lohjia",
   "updatetime": 1448588234,
   "ishidden": false,
   "islibrary": true,
   "mergeids": [],
   "editor": "",
   "meta": {},
   "raw": "",
   "scripthash": "17bf73c6e41c65bb6428c3cd67b5dcf0",
   "updateroot": "njwiab",
   "unmoderated": false,
   "noexternallinks": false,
   "lastpointer": "ptr-usercontent-njwiab"
  },
  "tgpxru": {
   "kind": "script",
   "id": "tgpxru",
   "time": 1454390980,
   "userid": "nzle",
   "username": "Microsoft Touch Develop",
   "name": "micro:bit screen",
   "description": "Specialized functions to control the screen #microbit",
   "positivereviews": 0,
   "subscribers": 0,
   "comments": 0,
   "baseid": "lnyirj",
   "icon": "emptycircle",
   "iconbackground": "#0095ff",
   "cumulativepositivereviews": 0,
   "screenshots": 0,
   "rootid": "bmjsup",
   "updateid": "tgpxru",
   "updatetime": 1454390980,
   "ishidden": false,
   "islibrary": true,
   "mergeids": [],
   "editor": "",
   "meta": {},
   "raw": "",
   "scripthash": "6c0c4e2688c7c59a50be7ed5e4e63c12",
   "updateroot": "bmjsup",
   "unmoderated": false,
   "noexternallinks": false,
   "lastpointer": "ptr-usercontent-bmjsup"
  },
  "xbpfet": {
   "kind": "script",
   "id": "xbpfet",
   "time": 1454053350,
   "userid": "nzle",
   "username": "Microsoft Touch Develop",
   "name": "micro:bit sprites",
   "description": "",
   "positivereviews": 0,
   "subscribers": 0,
   "comments": 0,
   "baseid": "tjamyj",
   "icon": "emptycircle",
   "iconbackground": "#0095ff",
   "cumulativepositivereviews": 0,
   "screenshots": 0,
   "rootid": "tcvvyucjxj",
   "updateid": "xbpfet",
   "updatetime": 1454053350,
   "ishidden": false,
   "islibrary": true,
   "mergeids": [],
   "editor": "",
   "meta": {},
   "raw": "",
   "scripthash": "3be3a16b7688e17178917eebfce7f3c8",
   "updateroot": "dnfbfj",
   "unmoderated": false,
   "noexternallinks": false
  },
  "jowara": {
   "kind": "script",
   "id": "jowara",
   "time": 1454603025,
   "userid": "nzle",
   "username": "Microsoft Touch Develop",
   "name": "ADJ script",
   "description": "",
   "positivereviews": 0,
   "subscribers": 0,
   "comments": 0,
   "baseid": "jwzrac",
   "icon": "emptycircle",
   "iconbackground": "#0095ff",
   "cumulativepositivereviews": 0,
   "screenshots": 0,
   "rootid": "lzfptf",
   "updateid": "jowara",
   "updatetime": 1454603025,
   "ishidden": false,
   "islibrary": false,
   "mergeids": [],
   "editor": "",
   "meta": {},
   "raw": "",
   "scripthash": "3a3542c19dbb32d92f0ac219410017a1",
   "updateroot": "hrvbin",
   "unmoderated": false,
   "noexternallinks": false
  },
  "tjwpnx": {
   "kind": "script",
   "id": "tjwpnx",
   "time": 1454603082,
   "userid": "nzle",
   "username": "Microsoft Touch Develop",
   "name": "micro:bit profile",
   "description": "The list of #microbit supported APIs.",
   "positivereviews": 0,
   "subscribers": 0,
   "comments": 0,
   "baseid": "pnmapm",
   "icon": "emptycircle",
   "iconbackground": "#0095ff",
   "cumulativepositivereviews": 0,
   "screenshots": 0,
   "rootid": "bltbdc",
   "updateid": "tjwpnx",
   "updatetime": 1454603082,
   "ishidden": false,
   "islibrary": false,
   "mergeids": [],
   "editor": "",
   "meta": {},
   "raw": "",
   "scripthash": "f0c08f9c7b2996f1fc7dd4fbbd8328b5",
   "updateroot": "dqkxtp",
   "unmoderated": false,
   "noexternallinks": false
  },
  "rwbwnc": {
   "kind": "script",
   "id": "rwbwnc",
   "time": 1454053504,
   "userid": "nzle",
   "username": "Microsoft Touch Develop",
   "name": "micro:bit game",
   "description": "A #microbit game library.",
   "positivereviews": 3,
   "subscribers": 0,
   "comments": 0,
   "baseid": "xgqnpl",
   "icon": "emptycircle",
   "iconbackground": "#0095ff",
   "cumulativepositivereviews": 3,
   "screenshots": 0,
   "rootid": "fsdvro",
   "updateid": "rwbwnc",
   "updatetime": 1454053504,
   "ishidden": false,
   "islibrary": true,
   "mergeids": [],
   "editor": "",
   "meta": {},
   "raw": "",
   "scripthash": "32f9ed1e51d5aea14c6c8d6c465d76c1",
   "updateroot": "fsdvro",
   "unmoderated": false,
   "noexternallinks": false
  },
  "njxqsg": {
   "kind": "script",
   "id": "njxqsg",
   "time": 1459789955,
   "userid": "nzle",
   "username": "Microsoft Touch Develop",
   "name": "micro:bit",
   "description": "The BBC micro:bit device api. #microbit",
   "positivereviews": 10,
   "subscribers": 0,
   "comments": 0,
   "baseid": "jzzrnq",
   "icon": "emptycircle",
   "iconbackground": "#0095ff",
   "cumulativepositivereviews": 10,
   "screenshots": 0,
   "rootid": "bpxuxa",
   "updateid": "njxqsg",
   "updatetime": 1459789955,
   "ishidden": false,
   "islibrary": true,
   "mergeids": [],
   "editor": "",
   "meta": {},
   "raw": "",
   "scripthash": "3757f1ee5345491069d429102ca82718",
   "updateroot": "hmvlxa",
   "unmoderated": false,
   "noexternallinks": false
  }
 },
 "text": {
  "jowara": "meta version \"v2.2,js,ctx,refs,localcloud,unicodemodel,allasync,upperplex\";\nmeta name \"ADJ script\";\nmeta rootId \"om6XYqUcsjDK0npYjNyzn3BW\";\nmeta hasIds \"yes\";\nmeta splitScreen \"yes\";\nmeta platform \"current\";\nmeta parentIds \"\";\n#sCBCojzbqNfj6sRA\naction main() {\n  #xP1meKgKx2EeA03s skip;\n}\n#SVXVucr3dRK4J6Y7 meta import micro\\u003abit {\n  pub \"xgzgcy\"\n  usage {\n    type Image\n    action `sync` \\_libinit()\n    action `async` pause(ms: Number)\n    action `sync` clear_screen()\n    action `sync` width(@this: ♻ micro\\u003abit → Image) returns(w: Number)\n    action `async` scroll_image(@this: ♻ micro\\u003abit → Image, x_offset_per_step: Number, interval: Number)\n    action `sync` button_is_pressed(name: String) returns(pressed: Boolean)\n    action `sync` plot(x: Number, y: Number)\n    action `sync` point(x: Number, y: Number) returns(on: Boolean)\n    action `async` show_string(text: String, interval: Number)\n    action `sync` unplot(x: Number, y: Number)\n    action `sync` on_button_pressed(name: String, body: Action)\n    action `async` show_image(@this: ♻ micro\\u003abit → Image, x_offset: Number)\n    action `sync` compass_heading() returns(degrees: Number)\n    action `sync` acceleration(dimension: String) returns(millig: Number)\n    action `sync` digital_write_pin(name: String, value: Number)\n    action `sync` digital_read_pin(name: String) returns(value: Number)\n    action `sync` analog_read_pin(name: String) returns(value: Number)\n    action `sync` analog_write_pin(name: String, value: Number)\n    action `sync` create_image(leds: String) returns(img: ♻ micro\\u003abit → Image)\n    action `sync` brightness() returns(brightness: Number)\n    action `sync` set_brightness(value: Number)\n    action `async` show_animation(leds: String, interval: Number)\n    action `sync` running_time() returns(now: Number)\n    action `async` show_number(value: Number, interval: Number)\n    action `sync` set_pixel(@this: ♻ micro\\u003abit → Image, x: Number, y: Number, value: Boolean)\n    action `sync` pixel(@this: ♻ micro\\u003abit → Image, x: Number, y: Number) returns(state: Boolean)\n    action `sync` clear(img: ♻ micro\\u003abit → Image)\n    action `sync` in_background(body: Action)\n    action `async` calibrate()\n    action `sync` forever(body: Action)\n    action `sync` pin_is_pressed(name: String) returns(pressed: Boolean)\n    action `sync` on_pin_pressed(name: String, body: Action)\n    action `sync` tell_camera_to(@event: String)\n    action `sync` raise_alert_to(@event: String)\n    action `sync` on_notified(@event: String, body: Action)\n    action `sync` notify_event_registration(evid: String)\n    action `sync` add_button(text: String, @action: Action)\n    action `sync` reset()\n    action `sync` warning(message: String)\n    action `sync` analog_set_period(pin: String, micros: Number)\n    action `sync` analog_set_pitch_pin(name: String)\n    action `async` analog_pitch(frequency: Number, ms: Number)\n    action `async` plot_frame(@this: ♻ micro\\u003abit → Image, index: Number)\n    action `async` show_leds(leds: String, ms: Number)\n    action `async` play_tone(frequency: Number, ms: Number)\n    action `sync` note_frequency(name: String) returns(frequency: Number)\n    action `sync` plot_leds(leds: String)\n    action `sync` plot_image(@this: ♻ micro\\u003abit → Image, x_offset: Number)\n    action `sync` temperature() returns(temp: Number)\n    action `sync` stop_animation()\n    action `async` show_frame(img: ♻ micro\\u003abit → Image, frame: Number)\n    action `sync` queue_event(body: Action, name: String)\n    action `async` ring_tone(frequency: Number)\n    action `sync` tell_remote_control_to(@event: String)\n    action `sync` map(value: Number, from_low: Number, from_high: Number, to_low: Number, to_high: Number) returns(r: Number)\n    action `sync` magnetic_force(dimension: String) returns(millig: Number)\n    action `sync` servo_write_pin(name: String, value: Number)\n    action `sync` servo_set_pulse(pin: String, micros: Number)\n    action `async` rest(ms: Number)\n    action `async` rotation(kind: String) returns(angle: Number)\n    action `sync` note(name: String) returns(frequency: Number)\n    action `sync` set_pixel_brightness(@this: ♻ micro\\u003abit → Image, x: Number, y: Number, value: Number)\n    action `sync` pixel_brightness(@this: ♻ micro\\u003abit → Image, x: Number, y: Number) returns(state: Number)\n    action `sync` set_display_mode(mode: String)\n    action `async` play_note(frequency: Number, ms: Number)\n    action `sync` light_level() returns(light: Number)\n    action `sync` is_ble_required() returns(r: Boolean)\n    action `sync` signal_strength() returns(strength: Number)\n    action `sync` on_signal_strength_changed(body: Action)\n  }\n}\n#Alu1GJCl0XiyaFNn meta import micro\\u003abit_screen {\n  pub \"tgpxru\"\n  usage {\n    action `sync` toggle(x: Number, y: Number)\n    action `sync` plot_all()\n    action `sync` toggle_all()\n    action `async` fade_in(ms: Number)\n    action `async` fade_out(ms: Number)\n    action `sync` screenshot() returns(img: ♻ micro\\u003abit → Image)\n    action `sync` plot_bar_graph(value: Number, high: Number)\n  }\n  #Msmo63osSl8VOt4V resolve micro\\u003abit = ♻ micro\\u003abit with {\n  }\n}\n#x2LHHGswL451jMCn meta import micro\\u003abit_game {\n  pub \"rwbwnc\"\n  usage {\n    action `sync` score() returns(score: Number)\n    action `sync` set_score(value: Number)\n    action `sync` life() returns(life: Number)\n    action `async` set_life(value: Number)\n    action `sync` add_score(points: Number)\n    action `async` add_life(lives: Number)\n    action `async` start_countdown(ms: Number)\n    action `async` game_over()\n    action `async` current_time() returns(ms: Number)\n    action `async` remove_life(life: Number)\n    action `async` level_up()\n    action `async` level() returns(lv: Number)\n    action `async` start_stopwatch()\n    action `sync` is_running() returns(running: Boolean)\n    action `async` show_score()\n    action `sync` is_game_over() returns(over: Boolean)\n  }\n  #uTSBhGGRoLDgCI2N resolve micro\\u003abit = ♻ micro\\u003abit with {\n  }\n}\n#xk593tAL91e8H2C4 meta import micro\\u003abit_senses {\n  pub \"jztbbx\"\n  usage {\n    action `sync` on_screen_up(body: Action)\n    action `sync` on_screen_down(body: Action)\n    action `sync` on_shake(body: Action)\n    action `sync` on_logo_up(body: Action)\n    action `sync` on_logo_down(body: Action)\n  }\n  #BbNcU7atbNNbBQmr resolve micro\\u003abit = ♻ micro\\u003abit with {\n  }\n}\n#F7U0eegUWemWOHIj meta import micro\\u003abit_sprites {\n  pub \"xbpfet\"\n  usage {\n    type Led_Sprite\n    action `async` create_sprite(x: Number, y: Number) returns(r: ♻ micro\\u003abit_sprites → Led_Sprite)\n    action `sync` move(@this: ♻ micro\\u003abit_sprites → Led_Sprite, leds: Number)\n    action `sync` go_to(@this: ♻ micro\\u003abit_sprites → Led_Sprite, x: Number, y: Number)\n    action `sync` if_on_edge\\u002c_bounce(@this: ♻ micro\\u003abit_sprites → Led_Sprite)\n    action `sync` turn_right(@this: ♻ micro\\u003abit_sprites → Led_Sprite, degrees: Number)\n    action `sync` turn_left(@this: ♻ micro\\u003abit_sprites → Led_Sprite, degrees: Number)\n    action `sync` set_direction(@this: ♻ micro\\u003abit_sprites → Led_Sprite, degrees: Number)\n    action `sync` x(@this: ♻ micro\\u003abit_sprites → Led_Sprite) returns(r: Number)\n    action `sync` y(@this: ♻ micro\\u003abit_sprites → Led_Sprite) returns(r: Number)\n    action `sync` direction(@this: ♻ micro\\u003abit_sprites → Led_Sprite) returns(r: Number)\n    action `sync` set_x(@this: ♻ micro\\u003abit_sprites → Led_Sprite, x: Number)\n    action `sync` set_y(@this: ♻ micro\\u003abit_sprites → Led_Sprite, y: Number)\n    action `sync` change_y_by(@this: ♻ micro\\u003abit_sprites → Led_Sprite, y: Number)\n    action `sync` change_x_by(@this: ♻ micro\\u003abit_sprites → Led_Sprite, x: Number)\n    action `sync` is_touching(@this: ♻ micro\\u003abit_sprites → Led_Sprite, other: ♻ micro\\u003abit_sprites → Led_Sprite) returns(r: Boolean)\n    action `sync` is_touching_edge(@this: ♻ micro\\u003abit_sprites → Led_Sprite) returns(r: Boolean)\n    action `sync` on(@this: ♻ micro\\u003abit_sprites → Led_Sprite)\n    action `sync` off(@this: ♻ micro\\u003abit_sprites → Led_Sprite)\n    action `sync` set_brightness(@this: ♻ micro\\u003abit_sprites → Led_Sprite, brightness: Number)\n    action `sync` brightness(@this: ♻ micro\\u003abit_sprites → Led_Sprite) returns(r: Number)\n    action `sync` change_brightness_by(@this: ♻ micro\\u003abit_sprites → Led_Sprite, value: Number)\n    action `sync` change_direction_by(@this: ♻ micro\\u003abit_sprites → Led_Sprite, angle: Number)\n    action `sync` invalid_sprite() returns(r: ♻ micro\\u003abit_sprites → Led_Sprite)\n    action `sync` delete(sprite: ♻ micro\\u003abit_sprites → Led_Sprite)\n    action `sync` set_blink(sprite: ♻ micro\\u003abit_sprites → Led_Sprite, ms: Number)\n    action `sync` change_blink_by(@this: ♻ micro\\u003abit_sprites → Led_Sprite, ms: Number)\n    action `sync` blink(@this: ♻ micro\\u003abit_sprites → Led_Sprite) returns(r: Number)\n  }\n  #kOOTnWpb6q3mwRs3 resolve micro\\u003abit_game = ♻ micro\\u003abit_game with {\n  }\n  #yf5JlXsz20jG8d7Y resolve micro\\u003abit = ♻ micro\\u003abit with {\n  }\n}\n#dXUNy3TCtcUuQHgo meta import micro\\u003abit_music {\n  pub \"pzngyn\"\n  usage {\n    action `sync` tempo() returns(bpm: Number)\n    action `async` change_tempo_by(bpm: Number)\n    action `async` set_tempo(bpm: Number)\n    action `sync` beat() returns(ms: Number)\n  }\n  #Q0tEe5dsulVXEC8U resolve micro\\u003abit = ♻ micro\\u003abit with {\n  }\n}\n",
  "njxqsg": "meta version \"v2.2,js,ctx,refs,localcloud,unicodemodel,allasync,upperplex\";\nmeta name \"micro:bit\";\nmeta icon \"Command\";\nmeta color \"#ff008000\";\nmeta rootId \"iYo5o9pL2tCMNDztgDDztVLg\";\nmeta isLibrary \"yes\";\nmeta hasIds \"yes\";\nmeta platform \"current\";\nmeta parentIds \"\";\n// The BBC micro:bit device api. #microbit\n#init\naction \\_libinit() {\n  #oCEOjqaW4CH7lS4r // Initialize the library\n  #aCYMP4THhnQkBd4N // {shim:}\n  #x3z5eK4ybVcTCWJh if data→board→is_invalid then {\n    #diswbwoJ0rRtyUbA data→logger := app→create_logger(\"simulator\");\n    #YKJMortE5mXaazK7 data→event_queues := collections→create_string_map;\n    #JjsD2sJPrJ6vUU5w data→counters := web→create_json_builder;\n    #dSJI8h1ZUeMsbz21 data→compass_heading_value := invalid→number;\n    #BamJivB3cALMYQoQ data→start_time := time→now;\n    #pJfHUw7KRZ5r6xTq data→board := media→create_portrait_board(612, 498 + 100);\n    #tGJciuV0e2iZndkr wall→set_background(colors→transparent);\n    #xHZJdg4oIJlrN7cX data→picture := media→create_picture(612, 498);\n    #mes9Z70SlnN52zQT data→padding := 27;\n    #q8k7EFimR0fMv4GZ data→left := 205;\n    #xjbIl53FS2hhHDRL data→@top := 156;\n    #xHQWCYdhMT39OHlO data→bkg := data→board→create_picture(data→picture);\n    #tduKnQa7ilnDwAR8 data→bkg→width := data→board→width;\n    #Y4hGkvffxjBnxeqh data→bkg→left := 0;\n    #biiwiRxx6lfA2TSm data→bkg→@top := 0;\n    #xYFT5Uzzo7KE5Kr1 code→create_buttons;\n    #CT4ZDKfwZOw9wE2M data→finger := data→board→create_ellipse(20, 20);\n    #JoeW2bsnEkDyWSyt data→finger→set_opacity(0);\n    #mEta1VHYHeLZUHiH data→back_leds := data→board→create_sprite_set;\n    #xWKGWdrq4hPuEt6s data→leds := data→board→create_sprite_set;\n    #SfZi0Q4PST9W8C6f $led_opacity := 1;\n    #md36WuHm2WM6OUim $led_w := 10;\n    #wL4ZbsjEBlcHVdT4 $led_offset := 48;\n    #czF5GDH9tIShJiHQ $led_h := 20;\n    #eOl4yTJgCvJGnDPC for 0 ≤ i < 5 do {\n      #xu2j46v9YsXKI68O $led_top := $i * $led_offset + data→@top;\n      #VtKgwueOnr9ToKNo for 0 ≤ j < 5 do {\n        #xbwb4ptsRLHB8U2X $led_left := $j * $led_offset + data→left;\n        #pjVTyTlf5kQ4qA6G $back_led := data→board→create_rectangle($led_w, $led_h);\n        #cuWZqw3O5y2yXQb5 $led := data→board→create_rectangle($led_w + 8, $led_h + 8);\n        #m96ZgbF29ABbEmoL $back_led→left := $led_left;\n        #xGiwGuU71Tu9FgU5 $back_led→@top := $led_top;\n        #QjqcjX5p0pAvotrx $led→x := $back_led→x;\n        #avXCJDNsL2TCMLfU $led→y := $back_led→y;\n        #WPrSA3bt4MdkOVEE $led→color := colors→transparent;\n        #GCX2ykJxlYVUyoYt $led→set_opacity($led_opacity);\n        #g49uDAC8FfRzMF9O $led→set_shadow(10, colors→red, 0, 0);\n        #LZwZ7CQdOe5bMLP7 code→led_index_anim($back_led, $j, $i);\n        #N1DKQdDMWiPq5R3f data→back_leds→add($back_led);\n        #IwDQ2EgCXYvDIWQD data→leds→add($led);\n      }\n    }\n    #xN44GIpThDd2JQn5 code→init_theme;\n    #QIjvtSonf6Bx38tP code→init_eyes;\n    #auzjzpClkNJY94I3 code→init_axis;\n    #BlWLf7LrHMucdyNB code→init_pins;\n    #xVIOjGStCgdLjic6 code→update_axis;\n    #qLoyPDrDUdeG77Vv code→set_theme(\"\");\n    #ByFADaJmirytJ02b code→background_animation;\n    #xmVrpXc8aqbE3dq6 `async` code→animation_worker;\n    #pNdJy7kyaeqKZhfS data→board→on_every_frame;\n    #xbsS9F4HXWsdVT8s where `implicit` \\_body\\_() {\n      #WF6Md7jUVLVAe3m4 code→update_board;\n    }\n    #MYgk7IsTxvU17LkN data→board→post_to_wall;\n  }\n  meta sync;\n}\n#example\naction example() {\n  #unS88qlSD4KUIFo3 // {topic:td/micro-bit-api}\n  #Nn25gD1f1VnaefC5 // {shim:}\n  #WtyCgbH9W8rsFzbE // This library lets you control your **BBC micro:bit**. [read more...](/td/contents).\n  meta private;\n}\n#board\nvar board : Board {\n  // {shim:}\n  transient = true;\n}\n#starttime\nvar start_time : DateTime {\n  // {shim:}\n  transient = true;\n}\n#pTYFKJ2dSVmrISHGn2Cvx1ak\nvar leds : Sprite_Set {\n  // {shim:}\n  transient = true;\n}\n#delay\naction pause(#s4T6Z7saqVl4e7GI ms: Number) {\n  #xw0ceQXmgnW2YLkd // Pause for the specified time in milliseconds\n  #tkri0MjL1YpQLUMc // {help:functions/pause}\n  #aY6hM3Nf9YqDfRgi // {namespace:basic}\n  #oug4zW7u9u8tBZ1B // {weight:88}\n  #AEJQ04Cx4VKx2Rpc // {hints:ms:100,200,500,1000,2000}\n  #IwA49hY0PNZDrAK9 // {shim:micro_bit::pause}\n  #u4DOIK9VQzUgYTrN $ms := math→round($ms);\n  #tRxpGJplhnETomzN if $ms < 0 then {\n    #FsfEfBx8OfPv4xyo code→warning(\"ms should be a greater than or equal to 0\");\n    #YNPa4d34bFB8by52 `return` ;\n  }\n  #GQyW248xhuAJWQPB if `not` data→before_pause→is_invalid then {\n    #oTDD8uv0Dx2hvZqB data→before_pause→run;\n  }\n  #xgfVUH6efvOMy24z app→allow_other_events;\n  #R9tJwE1rZG7RwmLw time→sleep(math→max(1, $ms) / 1000);\n}\n#v8iiJ26rxKIMp44uFEIBfxCW\naction set_led_state(#AfRF8uNgO84DQCu3 x: Number, #MRql0kRW2QFozyIw y: Number, #k48W7K4Qx24WBKJY state: Number) {\n  #xztCKIZ3qGbn4IBK // Sets the LED color\n  #iv3jy8xz84h7sofY // {shim:}\n  #atk33Oey3ER4dzFQ // {hints:state:1,0}\n  #anevNAi4IdyNVhyu $x := math→round($x);\n  #x0qMudFm7xUQCgA4 $y := math→round($y);\n  #so9bs46bW4iXY0SR if $x < 0 `or` $x > 4 then {\n    #xea4WpawOvddatsC code→warning(\"x should be between 0 and 4.\");\n    #x4lxI0KQibRnJrdF `return` ;\n  }\n  else { #xI4iq6zmeb1WSESU if $y < 0 `or` $y > 4 then {\n    #wrr9Pq2Vl4NflTyC code→warning(\"y should be between 0 and 4.\");\n    #hGoYfUVVWx50GxJh `return` ;\n  }\n  else { } } \n  #w44RwY4hgpRIgpHZ $led := data→leds→at(code→index($x, $y));\n  #oj4yNDnGGTQFvFOa code→set_led_color($state, $led);\n  #JtzjlP7mB1bd2Ogn code→update_board;\n  meta private;\n  meta sync;\n}\n#AVn5dHoZz4zk1U2cqDlwGBFI\naction test_board() {\n  #lxgHqHNb4A6nnQOR // {shim:}\n  #z60YvOdiDDDJUrSK code→\\_libinit;\n  #xggqn1uH0YmirAs0 data→board→set_debug_mode(true);\n  #xbs7leriwIgIYW84 code→set_led_state(0, 0, 1);\n  #H2rlrr32Nr1cTRzG contract→assert(code→led_state(0, 0) = 1, \"\");\n  #pE0Lk2GcSwtMu6vO code→set_led_state(1, 1, 1);\n  #HRSkXl2cW0BeOvz4 contract→assert(code→led_state(1, 1) = 1, \"\");\n  #UuPVu5lhnJc26H43 code→set_led_state(2, 3, 1);\n  #q47JRBjbG423RGP7 contract→assert(code→led_state(2, 3) = 1, \"\");\n  meta private;\n  meta test;\n}\n#xbFe3E4xlaPVKqyQgLDbw44R\naction create_A_button() {\n  #xb4n7opYqhj4K5RQ // {shim:}\n  #fsNdOyLEOVKbaNzO data→button_a_inner := code→create_circle(45, 229);\n  #i0mbEct0JsGmR2IX data→button_a_inner→set_color(colors→black);\n  #hxuBSjFJoTGcKkyF data→button_a_inner→set_gradient(false);\n  #x0bngB2zwD5YNqhc data→button_a := code→create_circle(data→button_a_inner→x, data→button_a_inner→y);\n  #xeJ9fLqaRwHysI6H data→button_a→opacity := 0;\n  #QUMDCVZwMje402BB data→button_a→width := 112;\n  #xgxl4xE59t5HUcsH data→button_a→height := 112;\n  #Dvbapa4O529H2fs1 data→button_a→x := data→button_a_inner→x;\n  #jI0c4WdUI8QVWBHC data→button_a→y := data→button_a_inner→y;\n  #byJDE43aA5Kg6F5t data→button_a→on_touch_down($touch_down);\n  #xRnGBKk3PwrPrVq7 where touch_down(x: Number, y: Number) {\n    #Etn5CjWrVyWerIAv data→button_a_inner→set_color(colors→orange);\n  }\n  #spYCmKzaeQetcXJf data→button_a→on_touch_up($touch_up);\n  #hBkQn82nWTIgqurc where touch_up(x: Number, y: Number) {\n    #w8V7Xy22Sy1uDnD0 data→button_a_inner→set_color(colors→black);\n  }\n  meta private;\n  meta sync;\n}\n#rIjgEVDnXyYKKGW2z0G19vjb\naction create_circle(#dY8pewFJbnj6hliB left: Number, #NzrnBsCre4NFCIwk @top: Number) returns(#dyBo2jl2fIsGiYIo sp: Sprite) {\n  #Yba134pj3lkXWPx4 // {shim:}\n  #iBBRg3iUUQVTsPKF $sp := data→board→create_ellipse(42, 42);\n  #xLLim4SK6XqTBI1W $sp→left := $left;\n  #A4vAaBWwpyS1U0Xm $sp→@top := $@top;\n  #mPWpygJUPRH61jT2 $sp→set_color(colors→transparent);\n  #x4n4AmYHSf7bLueZ $sp→friction := 1;\n  meta private;\n  meta sync;\n}\n#sa4Hw2IQQ6yKVRcp\nvar led_on_color : Color {\n  // {shim:}\n  transient = true;\n}\n#sQ4pRVTHKnMu9DYy\nvar button_a : Sprite {\n  // {shim:}\n  transient = true;\n}\n#oUAhsVC3wJ704APn\nvar button_b : Sprite {\n  // {shim:}\n  transient = true;\n}\n#xcaCrKgyeje9xop6\nvar led_off_color : Color {\n  // {shim:}\n  transient = true;\n}\n#eJrkaFqwHMniAE60\naction clear_screen() {\n  #m6PiKdvQQQ7NBgLu // Turn off all LEDs\n  #ZG9A5FPHHkO4uHN5 // {help:functions/clear-screen}\n  #Lc4GU4SQEeDXJcAp // {namespace:basic}\n  #WwZ9Imwcdzf4H2Db // {weight:79}\n  #IsinvyLebNu1rsu9 // {shim:micro_bit::clearScreen}\n  #yVSc2bJhsH0utE1x foreach led in data→leds\n  do {\n    #Tgb6koDUxsIrk8ua $led→set_color(data→led_off_color);\n  }\n  #e4hu5CQWn3R63uYt code→update_board;\n  meta sync;\n}\n#xdRC0FfCUbSXMbmh\naction update_board() {\n  #j4oi2p366aTw6QKa // {shim:}\n  #BoBb0C4wRa7gItQD data→board→evolve;\n  #MROJQrS4v1wSkgL7 code→update_compass;\n  #dEb8PV520FV1duTv code→update_acceleration;\n  #Qs6wzz1w9RgDe3yH data→board→update_on_wall;\n  meta private;\n  meta sync;\n}\n#rVt0ZcmX6UHbaXhI\nvar finger : Sprite {\n  // {shim:}\n  transient = true;\n}\n#T8E8znSXqQ2mBFaZ\naction set_led_color(#By9YA6QxMYHWVuPB state: Number, #w3io4YAswOq422Cs led: Sprite) {\n  #WNlyDe90AUFRSu16 // {shim:}\n  #xUaGp05mSO8ORKZ4 if $state = 0 then {\n    #w00c6FcHfazKsYrb $led→set_color(data→led_off_color);\n  }\n  else {\n    #TJGybBt6wykGbktJ $led→set_color(data→led_on_color);\n    #W39jTBnHFjSBib2V if data→\\_greyscale then {\n      #wL9uIv4tefOsQPiY $led→set_opacity(1 / 10 + 9 / 10 * math→log($state, 2) / 7);\n    }\n  }\n  meta private;\n  meta sync;\n}\n#BJ2LCyxTdQTyJIp4\naction led_state(#N5nd2zYg8ab9fj4E x: Number, #DrKMD4313XKAT7bj y: Number) returns(#zaJYN2jOBvU1HSRr state: Number) {\n  #xw3iEm0w54TEtrgm // Gets the state of a LED\n  #x823TnD4vMJUBvzI // {shim:}\n  #OJ67jtmj97vZUbUW $x := math→round($x);\n  #yMqGU0KTaz37h4lD $y := math→round($y);\n  #PItiVZIbypFvB4Ry if $x < 0 `or` $x > 4 then {\n    #uGUPj25ME43D7Bo3 code→warning(\"x should be between 0 and 4.\");\n    #k8Pjmch1K7qB7lzo `return` 0;\n  }\n  else { #G9RGmjhlZCHYpXo3 if $y < 0 `or` $y > 4 then {\n    #KQulE9FjsIO1jweV code→warning(\"y should be between 0 and 4.\");\n    #E2bQYfvtLS9MGdfx `return` 0;\n  }\n  else { } } \n  #Rs4DiTpY2Z4oV7sm $sprite := data→leds→at(code→index($x, $y));\n  #GrRbVE3LBFdiTxiy if `not` $sprite→is_invalid `and` $sprite→color→equals(data→led_on_color) then {\n    #z54A0XeDMLRIfIif `return` 1;\n  }\n  else {\n    #xNajv7Lgj9sPexQ4 `return` 0;\n  }\n  meta private;\n  meta sync;\n}\n#XJovYmLSOmKdCJPA\naction require_range(#pmedvcwuHbLnWC7W x: Number) returns(#xjG1JKjh2SbYBHt1 x2: Number) {\n  #Q1hQnkMVTzFmkD7E // {shim:}\n  #vF5Zkqpoz3eLR6Fs $x := math→floor($x);\n  #uaSKzCviakcz2Hgh contract→requires($x ≥ 0 `and` $x < 5, \"``x`` must be between 0 and 4 included\");\n  #xUUHEmAdLLlWhbNc $x2 := $x;\n  meta private;\n  meta sync;\n}\n#xVWGu871324FOHjb\naction bit(#qNb6K0K0Rv5gyH5O state: Number, #lJdGRw37BIcyWKtc x: Number) returns(#xI3h98FdRMqtr7rx state_i: Number) {\n  #EUfj2oPVG1MdKp8J // {shim:}\n  #xT7rsPKc3oufTSE8 $state_i := bits→and_uint32($state, bits→shift_left_uint32(1, $x));\n  #xLlmHK36SxZRh1xe if $state_i ≠ 0 then {\n    #ncgTXBzRhH2qcGob $state_i := 1;\n  }\n  meta private;\n  meta sync;\n}\n#BdGhpbmca\ntable Image {\n  // {shim:MicroBitImage}\n  type = \"Object\";\n  persistent = false;\n  fields {\n    #yczPr24geBgMxLbS leds : Matrix\n  }\n}\n#IGYgeBIpT62o9thr\naction sprite_from(#xSkDv46XVEoGCGdp x: Number, #A4TskwCTJk6qsg62 y: Number, #DgwwO2tgSkt14x23 width: Number, #xNwk4F0E4PVfaaQv height: Number) returns(#e7LIwNU1P7sj5r4t sprite: * Image) {\n  #xTkMUmuLHn6rCvcN // Extracts a new sprite from the current LED state.\n  #lEJq90PR2XwX4LWH // {shim:}\n  #GIZkJPyuoHVyLQvL $x := code→require_range($x);\n  #LJ7RyTPUzHmKq7qg $y := code→require_range($y);\n  #Px1qblV2PJdaSpFP $width := math→floor($width);\n  #IkJaTkTmG91scVxN contract→requires($x + $width < 5, \"too many columns\");\n  #UX437qD2aXfAs2K2 $height := math→floor($height);\n  #VugnBMqCdmloPdUn contract→requires($y + $height < 5, \"too many rows\");\n  #dIVCKXtu2IlpAMVY $sprite := code→create_sprite($width, $height);\n  #x2875Vxpg3Bp2PqA for 0 ≤ i < $width do {\n    #KrB4HHn2Lv0THbbV $xi := $x + $i;\n    #Jbzw3CsmimDDyrg8 for 0 ≤ j < $height do {\n      #PIqy1dJJsLGtH4vv $yj := $y + $j;\n      #AZUiEPzXmo0wB0mK $sprite→leds→set_at(code→index($xi, $yj), code→led_state($xi, $yj));\n    }\n  }\n  meta private;\n}\n#UfF7JOuScQfe5nnQ\naction index(#yuxV96yMNc6bUq72 x: Number, #UeWExLbJKOvZm7Lo y: Number) returns(#WZy6fjZAdBtmlvO9 index: Number) {\n  #F7qzqMCjZAg84ncU // {shim:}\n  #jHDElY6pSQg45hPr $index := $x + 5 * $y;\n  meta private;\n  meta sync;\n}\n#xrG3VA1cfC2J48fe\naction create_image_from_string(#WpbiG7M8pO8744cQ text: String) returns(#h937aDHP8dI2uUxT sprite: * Image) {\n  #btZDtCFCtf5qJCze // Create an image from the given text\n  #wW4iJXbwjNxZIFU6 // {shim:}\n  #rFXxMBc9LkwafeIX // {hints:text:hello}\n  #WPj3cOy0MJ59WIY5 code→init_font;\n  #xtzzE0XUUIsjAUc8 $sprite := code→create_sprite(6 * $text→count - 1, 5);\n  #P1KIVstMFDXRwF3I $k := 0;\n  #ocKg9CThqYfc08nJ for 0 ≤ i < $text→count do {\n    #x6Yzz0Oxk4szoFpC $char_code := $text→at($i)→to_unicode;\n    #xrcZN3qkfpggQLbu $char_start := ($char_code - 32) * 5;\n    #scugRD8oRG3wf9PP $w := data→font→width;\n    #w24as3aqIizfCySm if $char_start < 0 `or` $char_start + 5 > data→font→width then {\n      #je2HGup30lVVeYSw $char_code := \" \" →to_unicode;\n      #vOjWWAPcpHUFOaZ7 $char_start := ($char_code - 32) * 5;\n    }\n    #tckFmsMLGvfO2Wt2 data→font→copy($char_start, 5, $sprite, $k);\n    #htKxdnjIIL6Dj32s $k := $k + 5;\n    #rSWCxQVjgak3yHrl if $i < $text→count - 1 then {\n      #xNb8Xf2rGMryC3t4 $k := $k + 1;\n    }\n  }\n  meta private;\n  meta sync;\n}\n#A1geJUVrAOpqBzMO\naction create_sprite(#NXMvo2FCreUM57C8 width: Number, #T4IqbKqxeaWzGfu2 height: Number) returns(#gJCl5tgT9aZygOzM sprite: * Image) {\n  #SetwMqs402272zX2 // {shim:}\n  #dICN6N9VCIvsD3kb contract→requires($width > 0 `and` $height > 0, \"sprite must be at least 1x1\");\n  #SavRXQCZKe8RHaT5 $sprite := records→Image→create;\n  #OS3K5fEIA4Rny0hF $sprite→leds := math→create_matrix($width, $height);\n  meta private;\n  meta sync;\n}\n#EgRqP2ucVXW1es2k\nvar chars\\u002ejson : Json_Object {\n  is\\_resource = true;\n  url = \"data:text/plain;base64,eyIwIjpbNiwxMSwxNSwxMyw2XSwiMSI6WzIsNiwyLDIsMl0sIjIiOlsxNCwxLDYsOCwxNV0sIjMiOlsxNCwxLDYsMSwxNF0sIjQiOlsyLDYsMTAsMTUsMl0sIjUiOlsxNSw4LDE0LDEsMTRdLCI2IjpbNiw4LDE0LDksNl0sIjciOlsxNSwxLDIsNCw4XSwiOCI6WzYsOSw2LDksNl0sIjkiOls2LDksMTUsMSw2XSwiICI6WzAsMCwwLDAsMF0sIiEiOls0LDQsNCwwLDRdLCJcIiI6WzEsMiwwLDAsMF0sIiMiOls2LDE1LDYsMTUsNl0sIiQiOls3LDEwLDYsNSwxNF0sIiUiOls3LDE0LDQsNywxNF0sIiYiOlsyLDUsNiwxMCw1XSwiJyI6WzAsMTAsMCwwLDBdLCIoIjpbNCw4LDgsOCw0XSwiKSI6WzQsMiwyLDIsNF0sIioiOlswLDYsMTUsNiwwXSwiKyI6WzAsMiw3LDIsMF0sIiwiOlswLDAsMCwyLDRdLCItIjpbMCwwLDAsMTUsMF0sIi4iOlswLDAsMCwwLDRdLCIvIjpbMSwxLDIsNCw4XSwiOiI6WzAsNCwwLDQsMF0sIjsiOlswLDQsMCw0LDhdLCI8IjpbMiw0LDgsNCwyXSwiPSI6WzAsMTUsMCwxNSwwXSwiPiI6WzQsMiwxLDIsNF0sIj8iOls2LDksMiwwLDJdLCJAIjpbNiwxMywxMSw4LDZdLCJBIjpbNCwxMCwxNCwxMCwxMF0sIkIiOlsxNCw5LDE0LDksMTRdLCJDIjpbNiw5LDgsOSw2XSwiRCI6WzE0LDksOSw5LDE0XSwiRSI6WzE1LDgsMTQsOCwxNV0sIkYiOlsxNSw4LDE0LDgsOF0sIkciOls2LDgsMTEsOSw2XSwiSCI6WzksOSwxNSw5LDldLCJJIjpbMTQsNCw0LDQsMTRdLCJKIjpbMSwxLDEsOSw2XSwiSyI6WzksMTAsMTIsMTAsOV0sIkwiOls4LDgsOCw4LDE1XSwiTSI6WzksMTUsMTUsOSw5XSwiTiI6WzksMTMsMTUsMTEsOV0sIk8iOls2LDksOSw5LDZdLCJQIjpbMTQsOSwxNCw4LDhdLCJRIjpbNiw5LDksMTEsN10sIlIiOlsxNCw5LDE0LDEwLDldLCJTIjpbNyw4LDYsMSwxNF0sIlQiOlsxNCw0LDQsNCw0XSwiVSI6WzksOSw5LDksNl0sIlYiOls5LDksOSw2LDZdLCJXIjpbOSw5LDE1LDE1LDldLCJYIjpbOSw5LDYsOSw5XSwiWSI6WzksNSwyLDIsMl0sIloiOlsxNSwyLDQsOCwxNV0sIlsiOlsxNCw4LDgsOCwxNF0sIlxcIjpbOCw4LDQsMiwxXSwiXSI6WzcsMSwxLDEsN10sIl4iOls0LDEwLDAsMCwwXSwiXyI6WzAsMCwwLDAsMTVdLCJgIjpbNCwyLDAsMCwwXSwiYSI6WzAsNSwxMSwxMSw1XSwiYiI6WzgsOCwxNCw5LDE0XSwiYyI6WzAsNyw4LDgsN10sImQiOlsxLDEsNyw5LDddLCJlIjpbMCw2LDE1LDgsN10sImYiOlszLDQsMTQsNCw0XSwiZyI6WzcsOSw3LDEsN10sImgiOls4LDgsMTQsOSw5XSwiaSI6WzAsMiwwLDIsMl0sImoiOlsxLDAsMSwxLDZdLCJrIjpbOCwxMCwxMiwxMCw5XSwibCI6WzEyLDQsNCw0LDE0XSwibSI6WzAsOSwxNSwxNSw5XSwibiI6WzAsMTQsOSw5LDldLCJvIjpbMCw2LDksOSw2XSwicCI6WzAsMTQsOSwxNCw4XSwicSI6WzAsNiw5LDcsMV0sInIiOlswLDExLDEyLDgsOF0sInMiOlswLDcsNCwyLDE0XSwidCI6WzQsMTQsNCw0LDNdLCJ1IjpbMCw5LDksOSw2XSwidiI6WzAsOSw5LDYsNl0sInciOlswLDksMTUsMTUsNl0sIngiOlswLDksNiw2LDldLCJ5IjpbMCw5LDcsMSw2XSwieiI6WzAsMTUsMiw0LDE1XSwieyI6WzYsNCwxMiw0LDZdLCJ8IjpbNCw0LDAsNCw0XSwifSI6WzEyLDQsNiw0LDEyXSwifiI6WzAsMCw1LDEwLDBdfQ==\";\n  transient = true;\n}\n#FBCYO1ysYzVS3rEJ\naction test_scroll_string() {\n  #vY9MA7hWCXU1Ra23 // {shim:}\n  #eho3QrBxWsMAix4R code→\\_libinit;\n  #xSaLaPGzEk8WaSd1 code→show_string(\"\", 100);\n  #mPN9ztLMk7UbME0e code→pause(1000);\n  #PYmqDeoYaFBfJT8x code→show_string(\"A\", 100);\n  #gb29N4yYNoQOfoaW code→pause(1000);\n  #a4p4CD0Rz14TmzwM code→show_string(\"0123\", 100);\n  #xGyJN7Jgvwq9ZB4s code→pause(1000);\n  #xSjakVYLu7gd1QHM $sprite := code→create_image_from_string(\"Hello\");\n  #VKpTa6fxINbbXVz5 $sprite→scroll_image( - 5, 200);\n  #eyb8bNW9ffSO6O2G $sprite→scroll_image(5, 200);\n  #bwM4Tq2dxt2mOHIW $sprite→scroll_image(1, 200);\n  #ZYxNc8AOTZbdOJ1n $sprite→scroll_image( - 1, 200);\n  meta private;\n  meta test;\n}\n#Zm96IqdgVrI2iCjB\naction width(#mNqXeR0Venxmv0uf @this: * Image) returns(#xY2xXA2sFDmKE4PQ w: Number) {\n  #DPngUzxZ3HlrXHyv // Gets the width in columns\n  #ulYlLiq3yUhayh1l // {help:functions/width}\n  #gFXMVYYVHx5aY7Ts // {namespace:image}\n  #x2eHyTJVIamAaq45 // {shim:micro_bit::getImageWidth}\n  #z66k2w22K7InEnyV $w := $@this→leds→row_count;\n  meta sync;\n}\n#rZT5E9pMud033e54\naction height(#lwwRe2IKIaJ2btEs @this: * Image) returns(#oV9jdReQ85HMKiON h: Number) {\n  #gL2f9kgRHinswu2z // Gets the height in rows\n  #x6JI6jqwN4h4M2jY // {shim:}\n  #HWsux5YjWGEpumtE $h := $@this→leds→column_count;\n  meta private;\n  meta sync;\n}\n#D944KGlI2CeHG0gq\nvar board_color : Color {\n  // {shim:}\n  transient = true;\n}\n#H1uQDGTSbSLoJlFF\naction scroll_image(#dVF1wUlpKx2pPtHa @this: * Image, #Fr2rDLarbEiIzfHm x_offset_per_step: Number, #gPjfa2RSvx3dAN3H interval: Number) {\n  #xGQ520j5fXArwqWl // Scrolls sprite through the screen. If sprite has width <= 5, does not scroll, otherwise, shifts the image by one column every ``interval`` milliseconds.\n  #iT7MH9Kd29dafjMN // {help:functions/scroll-image}\n  #GkJdERhnRveIvkAV // {namespace:image}\n  #u06IOFGf80LHWg3W // {weight:68}\n  #xtyyk9lLDfqJLWpL // {hints:x offset per step:5,1}\n  #kK2O5fLxOlBFvjHG // {hints:interval:400,100}\n  #UrNHQ26Tc7HxFp1p // {shim:micro_bit::scrollImage}\n  #xtlglkDAp2Q1OJUh $anim_id := data→current_animation;\n  #Jysm4Pd4lszqgxXV $x_offset_per_step := math→round($x_offset_per_step);\n  #Hv8BBJJLK4ATmTYK code→queue_animation_and_wait;\n  #lyweMkPTU58Kbmtp where `implicit` \\_body\\_() {\n    #xluG50TZnkrViJjL if $x_offset_per_step > 0 then {\n      #xMcTw7gf2Fz9FwZ8 $dx := math→max(1, $x_offset_per_step);\n      #CXEE00t44mfWLUIC $x := 0;\n      #GwuUOeH3zqRBqEQ1 while $x + 4 < $@this→width do {\n        #x5vjJ5zSuf1rqKnV $@this→render_image($x);\n        #OwLsXGKEmYf3u4Gj code→pause($interval);\n        #PHeDA80GctvZmtme if data→current_animation ≠ $anim_id then {\n          #ietA2urgnfVpp2ss `return` ;\n        }\n        #wDxlPdR9HkBH4PHv $x := $x + $dx;\n      }\n    }\n    else {\n      #xQMEmAD35uksb3qz $dx := math→min( - 1, $x_offset_per_step);\n      #JkulbmMt5UmnsSIB $x := $@this→width - 5;\n      #ujNFlLWKwHnNk5rJ while $x ≥ 0 do {\n        #Gp42FT0fV8jwrcE4 $@this→render_image($x);\n        #d4IJlY2NIltFZZiE code→pause($interval);\n        #uLdovnfNVFKKXuXO if data→current_animation ≠ $anim_id then {\n          #yJCgIFUX2A0x3Os4 `return` ;\n        }\n        #xgrTFzGv8MLnnysv $x := $x + $dx;\n      }\n    }\n  }\n}\n#j6How14prTjVLiKJ\naction button_is_pressed(#dwrDe5YG33oG3MHB name: String) returns(#RdtB26hD1lA5OO8J pressed: Boolean) {\n  #xDfRt2S0C1CkPSHd // Get the button state (pressed or not) for ``A`` and ``B``.\n  #dmv7pPfdUX3Nii67 // {help:functions/button-is-pressed}\n  #RVFWVBfCjLPg2uRU // {namespace:input}\n  #yTzqdrDfKTub5zSp // {weight:59}\n  #xROirQwDWqY9ZgYL // {enum:name:A=MICROBIT_ID_BUTTON_A,B=MICROBIT_ID_BUTTON_B}\n  #QFNxD51gqBGenDQ6 // {shim:micro_bit::isButtonPressed}\n  #ntxF2QNxLArWB2V5 $name := $name→trim(\" \\t\")→to_lower_case;\n  #nA1Wp5PR401L45J9 if data→board→touched then {\n    #Tg9Z2s4GUdfgvcf8 $target := code→button_from_id($name);\n    #YTVfEiLMEHSyTaYY $p := data→board→touch_current;\n    #tq26Gcbvm0zenWR0 data→finger→set_pos($p→x, $p→y);\n    #PhXWkNR6epuZNkBa if data→finger→overlaps_with($target) then {\n      #IKV9abE47o0mPXbn `return` true;\n    }\n    else { #xvwUV2et9kypbYOc if $name→equals(\"a\") `or` $name→equals(\"b\") then {\n      #wM0dFQyl00dy9W8y $target := code→button_from_id(\"a+b\");\n      #Sg4UFkSp2RJWNX7P if data→finger→overlaps_with($target) then {\n        #VhRVWWt2X81ZkFV0 `return` true;\n      }\n    }\n    else { } } \n  }\n  #rujS852B1Sx8Gh1f if $name→equals(\"a\") `and` (senses→is_key_pressed(\"a\") `or` senses→is_key_pressed(\"left\")) then {\n    #eNt8xKqeXVB6CgMS `return` true;\n  }\n  else { #en3kBi1aD9t9e4lG if $name→equals(\"b\") `and` (senses→is_key_pressed(\"b\") `or` senses→is_key_pressed(\"d\") `or` senses→is_key_pressed(\"right\")) then {\n    #FclRZcdq6c4gnFaI `return` true;\n  }\n  else { } } \n  #o4B6c8hDkCKfcqbP `return` false;\n  meta sync;\n}\n#YKkpIRxYCYj6luNy\naction plot(#xr21JhTVxIw6N8eD x: Number, #mr8Hkd8kLjqzu8IZ y: Number) {\n  #C4ZSSnemxpZWIiOE // Turn on the specified LED using ``x``, ``y`` coordinates (``x`` is horizontal, ``y`` is vertical)\n  #oO7LJ2kRt1FlICbW // {help:functions/plot}\n  #PTHzXQhcnHkdu9e2 // {namespace:led}\n  #oVRf0YOvIGx9J1i9 // {weight:78}\n  #Oko244Xjtl3XaFOw // {hints:x:0,1,2,3,4}\n  #xEIQtXe6fw4kg5FH // {hints:y:0,1,2,3,4}\n  #tPQEuS6Gmqc7l6oB // {shim:micro_bit::plot}\n  #r35AgHxwXK1n29pb code→set_led_state($x, $y, 1);\n  meta sync;\n}\n#f02nNkUzv6b6aPHB\naction point(#PGRW6DJGVEVi5wFW x: Number, #JS5Z305cxyrTyxH2 y: Number) returns(#u0fXIVDG4WzrfN7B on: Boolean) {\n  #WPM6kMiDO4MFbj6F // Get the on/off state of the specified LED using ``x, y`` coordinates.\n  #cYimilnL8Y3meMHz // {help:functions/point}\n  #uLmwV8jgK3a2Fequ // {namespace:led}\n  #hferw4vyJzoT524J // {weight:76}\n  #fc2JgYLVULK0v7iN // {hints:x:0,1,2,3,4}\n  #MF2t9k2UiqFfh4Cm // {hints:y:0,1,2,3,4}\n  #ugAQOqPTl7WVJCXs // {shim:micro_bit::point}\n  #rJpqUyeFN9Z27674 `return` code→led_state($x, $y) > 0;\n  meta sync;\n}\n#xX8BI6pQozHWIVZF\naction show_string(#EEchsFBax4g4Pk4y text: String, #xhQbPcu59cxTmgPb interval: Number) {\n  #TC2ipxc1vXR9hICR // Display text on the display, one character at a time, and shift by one column each ``interval`` milliseconds. If the string fits on the screen (i.e. is one letter), does not scroll.\n  #IFE4Aw9tdA4X617h // {help:functions/show-string}\n  #lO7UShx1xNCN5Zk3 // {namespace:basic}\n  #bAlRv4X18pWxONAI // {weight:87}\n  #Scfwz74tte2bvoT1 // {hints:interval:150,100,200,-100}\n  #kf4HddkY4wQUaUAU // {shim:micro_bit::scrollString}\n  #DMmxTOrCif13ztvx $interval := math→round($interval);\n  #N4KPZT9PpUDTn9R1 if $text→is_empty then {\n    #yIHTm1wXSp2w8fes code→queue_animation_and_wait;\n    #GcGnNDNYH7xeg0od where `implicit` \\_body\\_() {\n      #YB68tFgWoN2PlJYA code→clear_screen;\n      #YvZOGJUcPcBXex8I code→pause($interval * 5);\n    }\n  }\n  else { #Qv7UTtB9F3o4pkvl if $text→count = 1 then {\n    #YeGT0NEaIr4ew2Wd code→queue_animation_and_wait;\n    #x4NHkwmJbhbUpSeh where `implicit` \\_body\\_() {\n      #jQ3KH7NUrCa547Rj $sprite := code→create_image_from_string($text);\n      #y26xiE0eE4lGwFIH $sprite→show_image(0);\n      #TxqzE2nAu66dxqXK code→pause($interval * 5);\n    }\n  }\n  else {\n    #yCPOXhiQN5kj94eK if `not` $text→starts_with(\" \") then {\n      #ijFFFXMfycO3t4zT $text := \" \" →concat($text);\n    }\n    #mq4ZR5VqItlUQ6Ky if `not` $text→ends_with(\" \") then {\n      #flvuXQ4pm95KpIM4 $text := $text→concat(\" \");\n    }\n    #VED492aakcpq3QUQ $sprite := code→create_image_from_string($text);\n    #D4qMsHOTTZizH0aw $sprite→scroll_image(1, $interval);\n  }\n  } \n}\n#VQSvphGIva2j2eg4\naction unplot(#O7M8Vy1IbaXhzvLo x: Number, #GhmbCx46is3dXy3V y: Number) {\n  #x5dqUP1tUHNDDO3f // Turn off the specified LED using x, y coordinates (x is horizontal, y is vertical)\n  #xHyH4CKLbyg4Z46P // {help:functions/unplot}\n  #xFBaTe43eGHuX7jq // {namespace:led}\n  #OI57h7faeHyfUDJb // {weight:77}\n  #qbCl2JQDXjhkn4EY // {hints:x:0,1,2,3,4}\n  #bSncxBMLCswRbQ32 // {hints:y:0,1,2,3,4}\n  #ogXFG41ygqbXVmwT // {shim:micro_bit::unPlot}\n  #x742H6HoaE2M3kHZ code→set_led_state($x, $y, 0);\n  meta sync;\n}\n#O675B3CiRNXztplX\naction on_button_pressed(#M03fUuuX2m9eRu7n name: String, #LzMsXwEMSCmDzfWI body: Action) {\n  #K1FqW47X5j2qSM4S // Do something when a button (``A``, ``B`` or both ``A+B``) is pressed\n  #qpJP52P9EiGj7TmZ // {help:functions/on-button-pressed}\n  #LlzvO4Vhe7GjhJdh // {namespace:input}\n  #bb2jhwAjjludGu2o // {weight:58}\n  #fm3i5OlTIzr9FGuU // {enum:name:A=MICROBIT_ID_BUTTON_A,B=MICROBIT_ID_BUTTON_B,A+B=MICROBIT_ID_BUTTON_AB}\n  #KwFDbs7Kr12Y7FTP // {shim:micro_bit::onButtonPressed}\n  #OzSnTzWiKXQk0HlQ $evid := \"on button pressed \" ∥ $name;\n  #FMX7Dy8may7mfc7j code→notify_event_registration($evid);\n  #h2x2L30VBbMGVNED $btn := code→button_from_id($name);\n  #xOIGjOLy2Zmt99MW code→clear_button_handler($name);\n  #F5Y2ciTtYo87uZSG $ev := $btn→on_touch_down($touch_up);\n  #j0K6jsuWQ4V0EcaI where touch_up(x: Number, y: Number) {\n    #zvnW22u4MgaK24ge code→queue_event($body, $evid);\n  }\n  #hijH5eY42toXLOFF code→store_button_handler($name, $ev);\n  meta sync;\n}\n#Xf05xdIQbCZ19OFL\naction show_image(#x4Os5UgJK1k1DyDo @this: * Image, #WCEICn0SBZ7AnvYq x_offset: Number) {\n  #ZRFi6tDU9uTL4BAg // Shows an frame from the image at offset ``x offset``.\n  #CSX0am9r0KxyCfal // {help:functions/show-image}\n  #xo16JkWN0uUFScS2 // {namespace:image}\n  #ffde8HnYsd4thcGC // {namespace:led}\n  #s0MpoKh2adnhmM8z // {weight:69}\n  #RfVXECzwY1YjIfSF // {hints:x offset:0,5,10}\n  #UN2qrX2ZL1nyHdhU // {shim:micro_bit::showImage}\n  #AqfPdUQhQ8tq2B7e code→render_image($@this, $x_offset);\n}\n#gszRC4JNYzCIA8xJ\naction compass_heading() returns(#zcZKxlXZbsmdRJqQ degrees: Number) {\n  #xWohtN6AzrOdY6So // Get the current compass compass heading in degrees.\n  #ncq2Y4nDXRMWihmD // {help:functions/compass-heading}\n  #xELObR81CTxHPD2w // {namespace:input}\n  #m4jqzA8etiVBViTO // {weight:56}\n  #x2ui0y5T5xOVIJqE // {shim:micro_bit::compassHeading}\n  #r5T8xUyjlMatcURv if data→compass_arrow→is_invalid then {\n    #znZ4XizKuZgheSQa code→create_compass;\n  }\n  #xPo09mCqoceFQEYn $h := data→compass_heading_value;\n  #x8XQ4UchqvBIyyls if $h→is_invalid then {\n    #wRS57ygpIbvVyPSm $h := senses→heading;\n    #qErFwnuTtYjZ4nLa if $h→is_invalid then {\n      #hHLRZosDB3Q2AvMU $h := 0;\n    }\n  }\n  #T884bHCaSqLpYr2s `return` math→round($h);\n  meta sync;\n}\n#W2sYA4QxOtQbam5R\naction acceleration(#xFFtxqCX93owGiup dimension: String) returns(#x6aaLDiJe51GV4oq millig: Number) {\n  #sgNx1oCFIRqwLC6n // Get the acceleration value in milli-gravitys (when the board is laying flat with the screen up, x=0, y=0 and z=-1024)\n  #DoP0wrdqmS24eYbg // {help:functions/acceleration}\n  #lYmOu5jwgh9COs0W // {namespace:input}\n  #lmLkxkGRFp62YJly // {weight:57}\n  #LydMcPZr1SYTRbIt // {enum:dimension:x=0,y=1,z=2,strength=3}\n  #x2JSA5b4r4dcAO9P // {shim:micro_bit::getAcceleration}\n  #T4Ks27Pca5wQIBTz if data→acc_title→is_invalid then {\n    #a5RQGCAqswXV6Eiq data→acc_title := data→board→create_text(100, 40, 20, \"acceleration:\");\n    #xhS5Chpszr4Peq29 data→acc_title→fit_text;\n    #OO8NswAECGRtUDCO data→acc_title→color := colors→black;\n    #gV3Nm9rI8rv9WFSB data→acc_title→y := data→board→height - 80;\n    #ugQ4877rJLld9R1t data→acc_title→left := 200;\n    #xWsWgWWKrNZ8rzNs data→acceleration_x_text := data→board→create_text(100, 40, 20, \"x: -000\");\n    #q95IkSqEY2H4xCc6 data→acceleration_x_text→fit_text;\n    #xtbi4k3NDjlGfYi4 data→acceleration_x_text→text := \"\";\n    #zudWOEtdnOldj5Vt data→acceleration_x_text→y := data→board→height - 58;\n    #YaOi4wx0w2L2bRrd data→acceleration_x_text→left := 200;\n    #ydbSLoThXq28afSs data→acceleration_y_text := data→board→create_text(100, 40, 20, \"y: -000\");\n    #mm44LAERXjEwcw45 data→acceleration_y_text→fit_text;\n    #BMozg2TG88gKqWS5 data→acceleration_y_text→text := \"\";\n    #lVXLNglfbI6mlkMj data→acceleration_y_text→y := data→board→height - 36;\n    #GKJFyWtx7U9Bwkih data→acceleration_y_text→left := 200;\n    #Ij8VSPlCh9cUHLtL data→acceleration_z_text := data→board→create_text(100, 40, 20, \"z: -000\");\n    #xW6jBmKGvurjowgm data→acceleration_z_text→fit_text;\n    #uRhNDZQxzf60QioK data→acceleration_z_text→text := \"\";\n    #RaMet5qas3S6DyL2 data→acceleration_z_text→y := data→board→height - 14;\n    #xADu072x9Zk92VEH data→acceleration_z_text→left := 200;\n  }\n  #HQMGQT9aJ2NkNqVV $p := senses→acceleration_quick;\n  #x51K0wrwuxa2aoXN if $dimension→equals(\"x\") then {\n    #nEUa5R0jRvgiO3B5 data→acceleration_x_text→color := colors→black;\n    #R6D1BOSBvoJOofLE $millig := math→round($p→x * 1024);\n  }\n  else { #hpsliRC29yxAgj7q if $dimension→equals(\"y\") then {\n    #SYSYbYCqENPZIto2 data→acceleration_y_text→color := colors→black;\n    #o4OHeiSP0U04H5Oi $millig := math→round($p→y * 1024);\n  }\n  else {\n    #V2j2C7I62xgo9cWz data→acceleration_z_text→color := colors→black;\n    #opsthjH4KZ60PzoB $millig := math→round($p→z * 1024);\n  }\n  } \n  meta sync;\n}\n#itddg6di2mtKdWUA\naction digital_write_pin(#kihCn9i6hirgp2CN name: String, #SKnQ2VHVowJuQj03 value: Number) {\n  #fqLCfHZvhkkbdEsl // Set a pin or connector value to either 0 or 1.\n  #x8IX3LaoPHuSPP1k // {help:functions/digital-write-pin}\n  #QvcKHCKm4bLp2av4 // {namespace:pins}\n  #p48bRe3Fk04cqci0 // {weight:48}\n  #hf52W4GpWNOvCu3I // {enum:name:P0=uBit.io.P0,P1=uBit.io.P1,P2=uBit.io.P2,P3=uBit.io.P3,P4=uBit.io.P4,P5=uBit.io.P5,P6=uBit.io.P6,P7=uBit.io.P7,P8=uBit.io.P8,P9=uBit.io.P9,P10=uBit.io.P10,P11=uBit.io.P11,P12=uBit.io.P12,P13=uBit.io.P13,P14=uBit.io.P14,P15=uBit.io.P15,P16=uBit.io.P16,P19=uBit.io.P19,P20=uBit.io.P20}\n  #xm4nD5CwJqCSj9nK // {shim:micro_bit::digitalWritePin}\n  meta sync;\n}\n#xqTDv45uY4g5Elo4\naction digital_read_pin(#w0yR0K9R0Vc1fl1w name: String) returns(#YJovAyKaUYf7fdeN value: Number) {\n  #bZe0bFUC7DkD6n1D // Read the specified pin or connector as either 0 or 1\n  #dmS3OiTqd3Gl4lDI // {help:functions/digital-read-pin}\n  #BnyFEXR5wKKdhtR5 // {namespace:pins}\n  #h1y7ij55abn1ywo2 // {weight:49}\n  #xXyGXmuQJNZlU61v // {enum:name:P0=uBit.io.P0,P1=uBit.io.P1,P2=uBit.io.P2,P3=uBit.io.P3,P4=uBit.io.P4,P5=uBit.io.P5,P6=uBit.io.P6,P7=uBit.io.P7,P8=uBit.io.P8,P9=uBit.io.P9,P10=uBit.io.P10,P11=uBit.io.P11,P12=uBit.io.P12,P13=uBit.io.P13,P14=uBit.io.P14,P15=uBit.io.P15,P16=uBit.io.P16,P19=uBit.io.P19,P20=uBit.io.P20}\n  #KeelVlaOy290uC3r // {shim:micro_bit::digitalReadPin}\n  #YQtrwltmovQDIOC4 $pin := code→pin_by_name($name);\n  #Ko563vnmhZrsGquz if `not` $pin→is_invalid `and` $pin→mass - 1 > 0 then {\n    #xMThD47Dxan2pEwh `return` 1;\n  }\n  else {\n    #JIo9xOYMSEWhMsDF `return` 0;\n  }\n  meta sync;\n}\n#IMZk4sIic3bl2IqV\naction analog_read_pin(#MbbuFwADdbqnJ4Vx name: String) returns(#NMqOBEeeGloyin4x value: Number) {\n  #xbV7xMVLeyDT0M4e // Read the connector value as analog, that is, as a value comprised between 0 and 1023.\n  #xah2vLBRZf3FqQzb // {help:functions/analog-read-pin}\n  #xsg9Er2mxpPh27XU // {namespace:pins}\n  #n6fzrbe7G44K3Hb9 // {weight:47}\n  #x60f9nanAtGqf58c // {enum:name:P0=uBit.io.P0,P1=uBit.io.P1,P2=uBit.io.P2,P3=uBit.io.P3,P4=uBit.io.P4,P10=uBit.io.P10}\n  #KbSL0ZGyQSVvXAE4 // {shim:micro_bit::analogReadPin}\n  #xYp4xr8kW2d84h5C $p := code→pin_by_name($name);\n  #x4ki5CnUbrxJQS5O `return` $p→mass - 1;\n  meta sync;\n}\n#HV4Q7fi2POmCkKXI\naction analog_write_pin(#Ij91JuDakdZUgyo4 name: String, #CeWgWOcwgRe0D5op value: Number) {\n  #eDN1oz2oyUfdvk48 // Set the connector value as analog. Value must be comprised between 0 and 1023.\n  #kTJK4kSvEWdiaeOC // {help:functions/analog-write-pin}\n  #b4oneIlT9h82g7S4 // {namespace:pins}\n  #M12kgf6X8FWgiE4P // {weight:46}\n  #RE8jT20OKbkM5oUQ // {enum:name:P0=uBit.io.P0,P1=uBit.io.P1,P2=uBit.io.P2,P3=uBit.io.P3,P4=uBit.io.P4,P10=uBit.io.P10}\n  #RXZASxwspuxN3AMn // {hints:value:1023,0}\n  #AY2QBjk4JghxAoSU // {shim:micro_bit::analogWritePin}\n  #NhjrLchqhj38jvVW $value := math→round($value);\n  #VoXahNiX4SWBg3rH if $value < 0 `or` $value > 1023 then {\n    #rv064Y14no7Xfrs6 code→warning(\"value should be between 0 and 1023.\");\n  }\n  meta sync;\n}\n#FOUJKwAjjQYg4Z01\naction create_image(#xkJvjGlZhyZHdmXg leds: String) returns(#d56UY1ORndlIMO5Z img: * Image) {\n  #xubRNFj0V14GVLwA // Create an image from a string of 0s and 1s\n  #lnGJt7NO5XSCYPCy // {help:functions/create-image}\n  #L3GzUd2cQeVret60 // {namespace:image}\n  #M8Rx5C74XOlneYTn // {weight:67}\n  #jwMX2SPoQ4OZPjFE // {language:leds:bitmatrix}\n  #uCb1uN0qGPIcavMf // {shim:micro_bit::createImage}\n  #ssLFHuIGAuT7O22r $img := code→parse_image($leds);\n  meta sync;\n}\n#xyrtyZ1z9MfBqH74\naction test_scroll_frames() {\n  #VgklC7f31Qls4an6 // {shim:}\n  #gyNJ4o0Keyf2wQO7 $sprite := code→create_image(\"1 1 1 1 1 1 0 0 0 0\\n0 0 0 0 0 1 0 1 0 0\\n0 1 1 1 0 1 0 1 0 1\\n0 0 0 0 0 1 0 1 0 0\\n0 0 1 0 0 1 0 0 0 0\");\n  #Nnmh4QLzVUWiEDS4 $sprite→scroll_image(5, 1000);\n  meta private;\n  meta test;\n}\n#x6MHp7ZQosljXBmh\naction button_from_id(#eWMyP2eed08EGj4i name: String) returns(#zZfqvpXF2TdNNjHB btn: Sprite) {\n  #zYsdQ2fdRAyiMMz6 // {shim:}\n  #xWip9UlKCrWerh1O $btn := invalid→sprite;\n  #HaglGnKeAYSISmWn $name := $name→trim(\" \\t\")→to_lower_case;\n  #IqwO4RKwUHTnlHCE if $name→equals(\"a\") then {\n    #ym1Bm5lxgGWMsD13 `return` data→button_a;\n  }\n  else { #dbL1RrfP7iYQnrPS if $name→equals(\"b\") then {\n    #jIZBLoeBLvpv87DZ `return` data→button_b;\n  }\n  else {\n    #K8Hk416DRp2f8rBC `return` data→button_a\\u002bb;\n  }\n  } \n  meta private;\n  meta sync;\n}\n#j57JbuVLhpRqJgbE\naction brightness() returns(#BZntGnCXsZYfxF2X brightness: Number) {\n  #xThf61EiGzXmaQVh // Get the screen brightness from 0 (off) to 255 (full bright).\n  #VrdakCnATFjtHjF2 // {help:functions/brightness}\n  #QNhPnnSYegd96QKN // {namespace:led}\n  #xQl2lvnN0kK3Npk0 // {weight:75}\n  #ffmCdknGe2J5ReU5 // {shim:micro_bit::getBrightness}\n  #Y872aj2BcDz0OMq2 $sprite := data→leds→at(0);\n  #xw0Ia9fgB02ZhIYE $x := $sprite→opacity;\n  #x3An1b9z2xip0Gn9 `return` math→floor($x * 255);\n  meta sync;\n}\n#Twa3ce2bugWhfW5Y\naction set_brightness(#kQeLgaV0YyWLTlCU value: Number) {\n  #j2osE1iAluAsBgjv // Set the screen brightness from 0 (off) to 255 (full bright).\n  #x1oLl7Js4DF5vUEd // {help:functions/set-brightness}\n  #r0hfweCAmAfJleDQ // {namespace:led}\n  #GTVh8j2PgD5ThcRO // {weight:74}\n  #f7pgqybG2Xda88Bm // {hints:value:255,50,30,10,0}\n  #xqY7TLQ2N0x8G9Yv // {shim:micro_bit::setBrightness}\n  #Vw0rhEfqksjuLmTz $value := math→round($value);\n  #j4S5fdOn2dZJ1v9c if $value < 0 `or` $value > 255 then {\n    #ARlErhDNjWUNk008 code→warning(\"value should be between 0 and 255.\");\n    #lVvkWmOH3yaOkd6P `return` ;\n  }\n  #w1r41Dx8m1rxeJey $opacity := $value / 255;\n  #MB3OiAEWMZ7wvrZH foreach sprite in data→leds\n  do {\n    #u4R2mHlwhMSXKBTj $sprite→set_opacity($opacity);\n  }\n  meta sync;\n}\n#amts8p71bcrUxkz1\naction test_main() {\n  #xyiiPHS90ToCvNsw // {shim:}\n  #xWzTyxr4F353Sjnb for 0 ≤ i < 5 do {\n    #xfa5QOwui5DgOLIp for 0 ≤ j < 5 do {\n      #CIb4JiIp4VnOBWLz code→plot($i, $j);\n    }\n  }\n  #ap6UE2At48Euv4sK code→set_brightness(0);\n  #ZOaTPEpAJrW2mnS7 code→pause(1000);\n  #xXe1OlzRTbkfj9Nm code→set_brightness(100);\n  #xUMgLebswWRJzs1J code→pause(1000);\n  #jNQcDqEmnENrFh42 code→set_brightness(50);\n  #HiVvh4TiFo0Epu2m code→pause(1000);\n  #gP2D5I1dvKO6fP23 while true do {\n    #Xt41f42aNzuj5nuU code→show_animation(\"0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0\\n1 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 1 0 1 0\\n0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0\\n0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\", 400);\n  }\n  meta private;\n  meta test;\n}\n#SqFERoUjMO52Yumn\naction show_animation(#LyDDqLjSvn1Mm4Xg leds: String, #C8902m9EtYbNj0u2 interval: Number) {\n  #i6Ya8Ok0jXfIWDwx // Shows a sequence of LED screens as an animation with an ``interval`` delay between each frame\n  #IMLoWk7aPkY2iqZ1 // {help:functions/show-animation}\n  #n2TGAB2Ool7dvNeM // {namespace:basic}\n  #x9issdCQmgXJGFgm // {language:leds:bitmatrix}\n  #xGPHI0rWxwi7n4s6 // {hints:interval:400,300,500,600}\n  #PnCSsOeThMMBAVXy // {shim:micro_bit::showAnimation}\n  #Ruz1jL2FF4H8oDpB $interval := math→round($interval);\n  #acZvOWOMmtBi8EK8 $img := code→parse_image($leds);\n  #vveYnNG2g6NXdP5g $img→scroll_image(5, $interval);\n}\n#SNaX2qGs1EJq6FCk\nvar led_indexes : Sprite_Set {\n  // {shim:}\n  transient = true;\n}\n#YEEItevulMc5K8Y2\naction update_axis() {\n  #xPVzjwLZvZBJ1x54 // {shim:}\n  #dkkLIU2fisYJPDgs for 0 ≤ i < 5 do {\n    #L6R7REP2RTV1ScG3 $sprite := data→led_indexes→at($i);\n    #x05FmmbOP9lsYovE $sprite→x := 211 + $i * 48;\n    #UkRsH3J4KCopUW6L $sprite→@bottom := 138;\n  }\n  #x9NcX2IPJTEr0YWB for 0 ≤ j < 5 do {\n    #GkDVBnIsjWst55Xl $sprite := data→led_indexes→at(5 + $j);\n    #xscN82XsBQ0HyOK0 $sprite→right := 180;\n    #ARG4f5kv6L542Vrc $sprite→y := 165 + $j * 48;\n  }\n  #XTCqT7R96r4UdteD data→led_x_index_legend→@bottom := 120;\n  #xDJRmybQdn3KETdh data→led_x_index_legend→left := 398;\n  #SjZ8WZmGZlQWutzs data→led_y_index_legend→left := 157;\n  #s2Hk7HlUFJH93vtY data→led_y_index_legend→@top := 347;\n  meta private;\n  meta sync;\n}\n#xaPlYNe5tmsCPc2x\naction running_time() returns(#gweptbT46k6jE8Lw now: Number) {\n  #jT8dmGMOR5HrvMA2 // Gets the number of milliseconds elapsed since power on.\n  #wgPDaZahSf78v2p8 // {help:functions/running-time}\n  #aSsocNV70Kl3gcq5 // {namespace:input}\n  #Tu7WFLYb2Qoht2MC // {shim:micro_bit::getCurrentTime}\n  #z2i5g6cse2ex2Lcf $seconds := time→now→subtract(data→start_time);\n  #VRUr0JWDsoqvcfjD $ms := math→round($seconds * 1000.0);\n  #h4YOt8m3rm6vNTWU `return` $ms;\n  meta sync;\n}\n#xOO43E2NIkwrkXxd\naction show_number(#arqB8R393DWmG4yx value: Number, #xwSeYvwN5k4Kt277 interval: Number) {\n  #f4ANMXr8KMpT2G8n // Scroll a number on the screen and shift by one column every ``interval`` milliseconds. If the number fits on the screen (i.e. is a single digit), does not scroll.\n  #carGbAdhyB3bdddY // {help:functions/show-number}\n  #xMbTyq6JVNUTdcS9 // {namespace:basic}\n  #BXU1lVjllXSyR2ie // {weight:89}\n  #OuyYvK30y62ROGkM // {hints:interval:150,100,200,-100}\n  #dxD9lszdBNwzGAUk // {shim:micro_bit::scrollNumber}\n  #x5tg98AeJkbUQbiv $value := math→round($value);\n  #C3O0Rmqfj0wV31Uh $interval := math→round($interval);\n  #oIZAtpmgCfqgmA3B code→show_string($value→to_string, $interval);\n}\n#QY3E6cU6eBZ2OJSF\nvar prelude\\u002ecpp : String {\n  is\\_resource = true;\n  url = \"data:text/plain;base64,I2luY2x1ZGUgIk1pY3JvQml0VG91Y2hEZXZlbG9wLmgi\";\n  transient = true;\n}\n#G1Hz2h0zbwEBMp8r\naction parse_image(#x0HNlskTjdSJeH7D leds: String) returns(#xysJj47ftGjOcxII img: * Image) {\n  #QCBfLADs0uy227pF // {shim:}\n  #ThhId49geuiERw0b if $leds→is_empty then {\n    #zMq8tYbUScrWhnVh `return` code→create_sprite(5, 5);\n  }\n  #oob6dV9UWsHDaLfX $coll := $leds→replace(\"\\n\", \" \")→split(\" \");\n  #Mtf8A3quiblg1vce $rows := $leds→split(\"\\n\")→count;\n  #jXV4K5hN3HnyKe4H if $rows ≠ 5 then {\n    #zt8c282yV7aLQUxE // create empty image\n    #ciffAzoM4UqzmFDZ `return` code→create_sprite(5, 5);\n  }\n  #tcARpGMvK8xwXtqj contract→assert($rows = 5, \"\");\n  #YKBULFF4pHgepPU0 $frames := $coll→count / ($rows * $rows);\n  #vQR4hrlzcnNZSZ4W $img := code→create_sprite($rows * $frames, $rows);\n  #HLRmLq08LpAB4okw $k := 0;\n  #Y31WIkDlikmi6Enb for 0 ≤ i < $rows do {\n    #xuoRzFEt1jKUNb07 for 0 ≤ j < $frames * $rows do {\n      #qS2DEgnlZI2rzI6E $bit := $coll→at($k);\n      #BF25h8Q5DS7t75Ol $img→leds→set_item($j, $i, $bit→to_number * 255);\n      #aH1dE2Wf26cTcJPy $k := $k + 1;\n    }\n  }\n  meta private;\n  meta sync;\n}\n#UtnSCSPxXT40kUae\naction create_buttons() {\n  #NhHdk2ZIg12mfIYm // {shim:}\n  #HPSfi8YXpzMd424M code→create_A_button();\n  #h5cYiVMZiqGPQpHd code→create_B_button();\n  #qATt6iPL4iFDhhLM code→create_A\\u002bB_button();\n  meta private;\n  meta sync;\n}\n#ykpAyylV4sU5Im4Z\naction test_print_text() {\n  #xNfHTwPX2YSGu0Ec // {shim:}\n  #XYfFtFoX41cu3orG code→\\_libinit;\n  #U38gBCeZHv0VcHP2 code→show_string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", 120);\n  #wh2snLHufOKmIF0L code→show_string(\"abcdefghijklmnopqrstuvwxyz\", 120);\n  #LCp56xZb2hT4h2LC code→show_string(\"£\", 100);\n  #xs64irnHsnCW82vb code→show_string(\"£££\", 100);\n  #sEboYWEAbegqYbMZ code→show_string(\"0123456789\", 100);\n  meta private;\n  meta test;\n}\n#GNCSnnlE2fFVnKGK\naction test_buttons() {\n  #W2mFTHLBePxLBlHZ // {shim:}\n  #E5YEE67bsbTys0jb code→\\_libinit;\n  #xm6Flc2jfLQMGfFQ code→on_button_pressed(\"A\");\n  #gS4N82WpF6tkuelR where `implicit` \\_body\\_() {\n    #ON7phOtrAHh9Jejz code→show_string(\"A\", 100);\n  }\n  #gmr7aY7MXcYsbncb code→on_button_pressed(\"B\");\n  #Rp8qiY1vzviZ2kWq where `implicit` \\_body\\_() {\n    #Wf7Z3Bn5plHJ78I1 code→show_string(\"B\", 100);\n  }\n  #NO9PrQ5LFZfQfagg code→on_button_pressed(\"A+B\");\n  #POC91PYG4214TJp0 where `implicit` \\_body\\_() {\n    #xYIv0xzaNMKmq0z3 code→show_string(\"A+B\", 150);\n  }\n  meta private;\n  meta test;\n}\n#xoBb197IePtkqyhM\nvar count : Number {\n  // {shim:}\n  transient = true;\n}\n#VHsIMy7uJfZzPoMX\naction set_pixel(#P0GQI7mqQZLddWdU @this: * Image, #E5qctGDlXgeNbS9G x: Number, #reArL0ANylbd8RZg y: Number, #cjLlFOO9xgu09YmX value: Boolean) {\n  #xOswNPjjGMm1sUfm // Set a pixel state at position ``(x,y)``\n  #InGkIRcHpl4IXVQK // {help:functions/set-pixel}\n  #zIS2o2dBpWF9RDx8 // {namespace:image}\n  #l8YA4111fgihgo2H $b := 0;\n  #mOmRFng7uyfg3XLR if $value then {\n    #ET2Fj3fuKjgQ93Hh $b := 255;\n  }\n  #fYNF76FqaZnZ4tL1 $@this→set_pixel_brightness($x, $y, $b);\n  meta sync;\n}\n#xNKMIAKQZ2XYQAqe\naction pixel(#TVxswFwyZs0INV5W @this: * Image, #QLIezAtdKSgv2ohr x: Number, #yMN5fgUMFfzObabg y: Number) returns(#BGQ1D2Ag9wHaQCLC state: Boolean) {\n  #rJhKHlNK4kKD4ezD // Get the pixel state at position ``(x,y)``\n  #JuPT9jZBFV6JJwj8 // {help:functions/pixel}\n  #xwxPjJYSo2B5Vkkq // {namespace:image}\n  #JTtgaUATi8Oo7he4 // {hints:x:0,1,2,3,4}\n  #Itieq6wpbGiz7w6r // {hints:y:0,1,2,3,4}\n  #KUGL4al4LBtoR7uX `return` $@this→pixel_brightness($x, $y) > 0;\n  meta sync;\n}\n#aqdR2AyKfGIWjWKX\naction clear(#TcdNAKsIbu986dqh img: * Image) {\n  #HyVQr9pzr4lAWRAX // Clears all the pixels in the image\n  #Vo18UEQT4sDp4o21 // {help:functions/clear}\n  #cupoiXR5e4GmsVYr // {namespace:image}\n  #xW1Iq3aG39sLTugT // {shim:micro_bit::clearImage}\n  #K4ZFXN4ytxFTfH2s for 0 ≤ i < $img→leds→count do {\n    #kA4W7IWpYB4o2624 $img→leds→set_at($i, 0);\n  }\n  meta sync;\n}\n#xq3rVK5p1wAVqxhU\nvar button_a\\u002bb : Sprite {\n  // {shim:}\n  transient = true;\n}\n#Ms9O2l7vxlDJVrtZ\nvar compass_arrow : Sprite {\n  // {shim:}\n  transient = true;\n}\n#dv4l34Vyg1pMFJgt\naction create_compass() {\n  #ZZtsSd44QAQ2UWxn // {shim:}\n  #xAlkfPeoWDvYa4Ix data→compass_text := data→board→create_text(100, 40, 20, \"359°\");\n  #VQG2dir1qpnkppWG data→compass_text→fit_text;\n  #qsbHlfR2wqbqLObO data→compass_text→y := data→board→height - 80;\n  #TXLyGWO4oXkQ202f data→compass_text→left := 30;\n  #uksFN3lypHUnVGUv data→compass_text→color := colors→black;\n  #UrsppZ77d3E3glgs $pic := media→create_picture(100, 100);\n  #BfAgyhEWuRzF042T $pic→fill_ellipse(0, 0, 100, 100, 0, \"#989898\" →to_color);\n  #pFWjh4kboAdRfglW $pic→fill_path(0, 0, 0, colors→white, \"M 50 0 L 60 70 L 50 65 L 40 70 Z\");\n  #xQl6MSp9TWUBTMEl data→compass_arrow := data→board→create_picture($pic);\n  #Slbh4hBK115AyrsX data→compass_arrow→width := 80;\n  #JMHYz83jCwfR2BiG data→compass_arrow→left := 60;\n  #ea8auwV1sLWF3At4 data→compass_arrow→y := data→board→height - 48;\n  #TLghe1aK8X4Y0P2L data→compass_heading_value := invalid→number;\n  #xP4D15cRYTcP3EEq data→compass_arrow→on_touch_down($touch_down);\n  #PGl4eapBlwlN5FSH where touch_down(x: Number, y: Number) {\n    #i4clvVN4ppe22bFC code→read_compass_arrow($y, $x);\n  }\n  #zO37ABILHahWBLkf data→compass_arrow→on_drag($dragged);\n  #qt3STQH7aH6YY1w8 where dragged(x: Number, y: Number, delta_x: Number, delta_y: Number) {\n    #ZHM1jr4hFYuNOCEN code→read_compass_arrow($y, $x);\n  }\n  meta private;\n  meta sync;\n}\n#JiZO327G3fL0SZGF\nvar compass_text : Sprite {\n  // {shim:}\n  transient = true;\n}\n#z8UAvCstrXYppXV7\nvar compass_heading_value : Number {\n  // {shim:}\n  transient = true;\n}\n#Hv7ujfF0nVCz8sx5\naction read_compass_arrow(#OHGqICBfnbz4QhvP y: Number, #xRbEEfKhc3Yxm43U x: Number) {\n  #ZD0GSuKo2Clfn6zQ // {shim:}\n  #g22ewR3VZal24Vqg $angle := math→rad_to_deg(math→atan2($y - data→compass_arrow→y, $x - data→compass_arrow→x) + math→\\u03c0 / 2);\n  #xnty57tqtklkEP8u if $angle < 0 then {\n    #SGb40PfCmS1yrV7d $angle := $angle + 360;\n  }\n  #pvXAKVWysSrTMdcR data→compass_heading_value := $angle;\n  meta private;\n  meta sync;\n}\n#FLON3QSP0fwDIZC4\naction test_compass() {\n  #MW4yaiY9wynUWlMR // {shim:}\n  #PPW482lSAJyUQ9ri code→\\_libinit;\n  #xAE8v7KmRMicbljm code→calibrate;\n  #FsMBbmufaJix02xe $degrees := code→compass_heading;\n  #xse7eRxbWddqX6nL $millig := code→acceleration(\"x\");\n  #tlXXCrB6Djt9HGiJ data→board→set_debug_mode(true);\n  meta private;\n  meta test;\n}\n#xzhTBaRFA7w2suUl\naction test_button_a\\u002bb() {\n  #b4aW2uElgK2cbabi // {shim:}\n  #VozcHml4ANVDRCzV code→\\_libinit;\n  #ntNRRFZ3bcxc6HtO code→on_button_pressed(\"A+B\");\n  #I444JVhpwg64uUp3 where `implicit` \\_body\\_() {\n    #ayHPmOCSVMv8QTqa code→show_string(\"good\", 100);\n  }\n  meta private;\n  meta test;\n}\n#trpRg6yTXKX8M8cY\nvar acceleration_x_text : Sprite {\n  // {shim:}\n  transient = true;\n}\n#xj4QxpGx2XVt6SIa\nvar acceleration_y_text : Sprite {\n  // {shim:}\n  transient = true;\n}\n#PM0d2btuj5TMrQKD\nvar acceleration_z_text : Sprite {\n  // {shim:}\n  transient = true;\n}\n#D7945sGiSVeFOiz0\naction mg_to_string(#xVpQut6zF7b3yH2y g: Number) returns(#Wac7i7TRPpbskC9b mg2: String) {\n  #xrwjNX0PVUwch4D3 // {shim:}\n  #GB9LrYmhIg6CxRoh $mg := math→round($g * 1000)→to_string;\n  #Hd2xoPM6C0l4kyj2 `return` $mg;\n  meta private;\n  meta sync;\n}\n#I0wd2ww0cWi61IbW\naction test_accelerometer() {\n  #tdPH2SckDQFP0AHb // {shim:}\n  #c0W2EHJjeOCb9SP7 code→\\_libinit;\n  #x4TQZaZGf4vYeOAp data→board→set_debug_mode(true);\n  #j7MfPADEGw5Pi5im while true do {\n    #xnxjKVT2qERsVvmc $x := code→acceleration(\"x\");\n    #A5yEcY6mbAfb6TPA $y := code→acceleration(\"y\");\n    #xxSBeHns1qEX4s5O $z := code→acceleration(\"z\");\n    #i8PmYalgHlZL9oim $pitch := code→rotation(\"pitch\");\n    #fWfo2WcvU0qLKUYo $angle := code→rotation(\"roll\");\n    #B3OVJ2E408AL9uqx code→pause(100);\n  }\n  meta private;\n  meta test;\n}\n#db4usuIXbJkUwwL3\nvar bkg : Sprite {\n  // {shim:}\n  transient = true;\n}\n#UxZtwFWDOl2eBWHS\nvar acc_title : Sprite {\n  // {shim:}\n  transient = true;\n}\n#NB71vR2acuoxOzhF\naction update_compass() {\n  #GUKjAqnGheX4V0Fo // {shim:}\n  #ngsZsBasKScY4T5V if `not` data→compass_arrow→is_invalid then {\n    #zZbyXaPFEJrI4vnn $degrees := code→compass_heading;\n    #fP6woTbM4WvDhu5z if data→compass_heading_value→is_invalid then {\n      #SVWo2h2OTKLTN9Zu data→compass_arrow→angle := - $degrees;\n    }\n    else {\n      #jtGD4e2BPt7sPQ2f data→compass_arrow→angle := $degrees;\n    }\n    #xmqom9DO2N4UCxUo data→compass_text→text := $degrees ∥ \"°\";\n    #xye0othn81opwsR6 data→compass_text→fit_text;\n    #BoQ8NUUvE6oK18RC data→compass_text→left := 30;\n  }\n  meta private;\n  meta sync;\n}\n#Duo2QkiHEzLUwbPP\naction update_acceleration() {\n  #xYTnumJe8pmdMnOj // {shim:}\n  #T5H4jq33oZ2P97M2 if `not` data→acceleration_x_text→is_invalid `or` `not` data→acceleration_y_text→is_invalid `or` `not` data→acceleration_z_text→is_invalid then {\n    #Y4gIGmGYXPYUSSnc $p := senses→acceleration_quick;\n    #oonnY6sWxw0tq6ag if `not` data→acceleration_x_text→is_invalid then {\n      #xld1RvlF3fr7fUpj data→acceleration_x_text→text := \"x: \" ∥ code→mg_to_string($p→x);\n      #bLiTgPxiTV1D6D73 data→acceleration_x_text→fit_text;\n      #cob34YxVwT4lSg5N data→acceleration_x_text→left := 200;\n    }\n    #xE54GZuni6hnc2LU if `not` data→acceleration_y_text→is_invalid then {\n      #CK4RRChJoo5LTaD4 data→acceleration_y_text→text := \"y: \" ∥ code→mg_to_string($p→y);\n      #xtH0Dr43TgaKViYo data→acceleration_y_text→fit_text;\n      #x6204VDd8dJKb7bj data→acceleration_y_text→left := 200;\n    }\n    #xgm4X9sFTILN4PkS if `not` data→acceleration_z_text→is_invalid then {\n      #rKo1iSU2MLyJrjiu data→acceleration_z_text→text := \"z: \" ∥ code→mg_to_string($p→z);\n      #xdR4vtWBQlLAqFj8 data→acceleration_z_text→fit_text;\n      #X477zJbexlWyCpOd data→acceleration_z_text→left := 200;\n    }\n  }\n  meta private;\n  meta sync;\n}\n#eVKtTh73RfddrPbU\naction in_background(#x67Zj4FKKV2jt3w9 body: Action) {\n  #JS61XiP3XLxBGcSJ // Schedules code that run in the background.\n  #xOGy2Csz0dMRNvwY // {help:functions/in-background}\n  #xeIeSmXBocppJ249 // {namespace:control}\n  #tpcIQODlauXc4x94 // {shim:micro_bit::runInBackground}\n  #H9LSVq6QNak6kS1E if $body→is_invalid then {\n    #DcDY2ImNUd2qaRhd `return` ;\n  }\n  #M0p9EJ9u34sADrAp app→allow_other_events;\n  #xK0Ei4Ey5Aa6ktal `async` $body→run;\n  meta sync;\n}\n#z6mgAgBseIwhSA9q\nvar pins : Sprite_Set {\n  // {shim:}\n  transient = true;\n}\n#S4AaF6H9Bir1YG2B\naction init_pins() {\n  #xvHUpiQyRqSw08j4 // {shim:}\n  #x48sTDN6eBa0xXyy if data→pins→is_invalid then {\n    #xVyNflPdb6lsKBCK data→pins := data→board→create_sprite_set;\n    #FNXCkGWZPHZHdFMp $color := colors→blue;\n    #bEGdJ995axSAPUnk $coll := create→Collection_of→Number;\n    #OBYzjLeMGZGSwlRp $coll→add(25);\n    #PJgCYPHIzLXbTs1X $coll→add(145);\n    #XUScfAJ414uNtG3o $coll→add(280);\n    #FLd4X2wW20GtInS2 for 0 ≤ i < $coll→count do {\n      #bCVbJpfp40lEL102 $left := $coll→at($i);\n      #Afqsons4pseBNxj0 $pin := code→create_pin($color, $left);\n      #xIgLaDCrGz1xSf4r data→pins→add($pin);\n    }\n  }\n  meta private;\n  meta sync;\n}\n#A9xZmVQH2nPrrN8o\naction pin_by_name(#pznPOV8prsiYdNhL name: String) returns(#QC9UtfUA0ZQiyxvN sprite2: Sprite) {\n  #YLwrAONQnaRmH9mk // {shim:}\n  #ololoiFjuAzCfyDe $index := $name→trim(\"pP\\t\")→to_number;\n  #j0yR5tWcQjVZyB1T $sprite := data→pins→at($index);\n  #qz6N2BmKUFCpxz4N if `not` $sprite→is_invalid then {\n    #xGr49fRupLhPmlEq $sprite→show;\n  }\n  #aZHYIJGu0HFUl4SU `return` $sprite;\n  meta private;\n  meta sync;\n}\n#RtVnuDAS2Tqp1LSg\naction update_pin(#xLFmUabqhUFi0ZiP sprite: Sprite) {\n  #OLMKJMgxATEpHRHu // {shim:}\n  #oa5bznMuZaSILcw4 if $sprite→mass - 1 ≤ 0 then {\n    #xzLXU96Zk9wUo7bD $sprite→set_color(colors→transparent);\n  }\n  else {\n    #ZMq4rk7QkaT2NOsD $sprite→set_color(colors→green);\n  }\n  #v6NNVvhZ2YzYJw2D data→board→update_on_wall;\n  meta private;\n  meta sync;\n}\n#hEU77nyoMCRSSAqa\naction test_pins() {\n  #xynDU3S3kjEYy18D // {shim:}\n  #rK2IutWay0PFVvqq code→\\_libinit;\n  #t829Xv42HzfA2nAG code→digital_write_pin(\"P0\", 1);\n  #INTK9O6xrjxHkJ9g code→digital_write_pin(\"P1\", 1);\n  #aeUtxvIe4YYta4Nz code→digital_write_pin(\"P2\", 1);\n  #opMdOZDBv2MTyBXq code→digital_write_pin(\"P8\", 1);\n  #TVwRJDzgrpIJuTZ2 code→digital_write_pin(\"P12\", 1);\n  #s6YLWaYNLlbaI6bq code→digital_write_pin(\"P16\", 1);\n  #IUhZptHB34mvrxW2 $value2 := code→digital_read_pin(\"P0\");\n  #hPJl24rmbFWsf4a3 $value := code→digital_read_pin(\"P1\");\n  #NVG04rX4uPRfEh2d $value3 := code→digital_read_pin(\"P2\");\n  #MKOvVDJ6dfcQo0u1 $value4 := code→digital_read_pin(\"P8\");\n  #xVOeb35l5ezwAQqx $value5 := code→digital_read_pin(\"P12\");\n  #x6tsh2LJoLcSYHih $value6 := code→digital_read_pin(\"P16\");\n  #RU4iMpCdo1kUigzr code→analog_write_pin(\"P1\", 1000);\n  #HbZSxLTByep2h4qZ code→pause(1000);\n  #hpOIzAtXk5fN5c5M while true do {\n    #IDR9JN8Q2N13Bumo code→digital_write_pin(\"P0\", 0);\n    #xnKEa428MreHgCNq code→pause(1000);\n    #xKnTarBirfEP9bL5 code→digital_write_pin(\"P0\", 1);\n    #ieC6KUFGlIGc2sCf code→pause(1000);\n  }\n  meta private;\n  meta test;\n}\n#x871W29FACCUQhgl\naction create_pin(#xwnvtwXoIoa22y4Z color: Color, #IVU23UfeIRgACC6Q left: Number) returns(#m3RyCzsn2DCgDD7W pin2: Sprite) {\n  #Aq6gfS2XnSqEO42R // {shim:}\n  #Px6ORF6xlL3ssrZ0 $pin := data→board→create_rectangle(50, 108);\n  #xUih2I3DqrfQGQC2 $pin→set_color($color);\n  #bVSo2lipkr25Ga2P $pin→@bottom := data→bkg→@bottom - 5;\n  #xDtMKVUu2fjw8gEH $pin→mass := 1;\n  #uOBdkNKC5tgxgMmu $pin→set_friction(1);\n  #qCCZl1zpt7Jc32cS $pin→hide;\n  #IRReqhZX8YsLhC44 $pin→left := $left;\n  #xgbiNSJLlb6Ct3Xf $pin→on_touch_down($touch_down);\n  #dnm1P3MFrEzgk7ZV where touch_down(x: Number, y: Number) {\n    #gQ2vyq2Jd7fOV7g6 $pin→mass := 1024;\n    #ELw1bdG72zYVtFzz code→update_pin($pin);\n  }\n  #x5e0KdFm44Im64AZ $pin→on_touch_up($touch_up);\n  #n0fTpU4XnqkfP4qT where touch_up(x: Number, y: Number) {\n    #hn3r2pa6wYAY4u8w $pin→mass := 1;\n    #nvk6QNLw1m6DrV9M code→update_pin($pin);\n  }\n  #zUDQyhCWpFFvbmjL code→update_pin($pin);\n  #wemNuUcwH4xjwwNw `return` $pin;\n  meta private;\n  meta sync;\n}\n#tYt6bUhy3Nm9mpAR\naction test_plot_unplot() {\n  #xXot6id59vwJvRh2 // {shim:}\n  #xtZorNV3Gqgbg1S0 code→\\_libinit;\n  #xQdOxnawNQbuLBIm for 0 ≤ k < 2 do {\n    #PihMnuz9A57aOBax for 0 ≤ i < 5 do {\n      #xY5ZW4seHSQm14te for 0 ≤ j < 5 do {\n        #xk8RVw6DDoorZhsL $b := code→point($i, $j);\n        #aBSVSfZkN77ha2X4 if $b then {\n          #lytsEo6NBz3VlT47 code→unplot($i, $j);\n        }\n        else {\n          #vGAQtJ9z5CBiW5U9 code→plot($i, $j);\n        }\n        #puQuMFzF3KMG1e4q code→pause(500);\n      }\n    }\n  }\n  meta private;\n  meta test;\n}\n#xCn8l4L2PfqCeiNR\naction calibrate() {\n  #a592ki5YrzeI6a2X // Obsolete, compass calibration is automatic.\n  #jvwA9fcOAMuHgvd3 // {help:functions/calibrate}\n  #K69mm2lCHD9ANu8u // {namespace:input}\n  #xodr3UlxL4wpG04K // {weight:0}\n  #ZJoAB7BFrtoAg633 // {shim:TD_NOOP}\n}\n#OsMsC0czXS2YrjdU\naction forever(#xYRk46PsjFkdlEOm body: Action) {\n  #a1ZdSLsAwD6Rv0FM // Repeats the code forever in the background. On each iteration, allows other codes to run.\n  #Xa3HrwxE9W3Z3Erw // {help:functions/forever}\n  #Bo8g50yakYNCYSa1 // {namespace:basic}\n  #x4L41J1h0VUQZ1s2 // {weight:55}\n  #fJ2PtEUzMS9ydxsM // {shim:micro_bit::forever}\n  #xxnWmxDbWPRikigP $c := code→tick(\"forever\");\n  #xCLA2qrMQhTjL6yy if $c > 10 then {\n    #XSOwmzMlmmLIQMlN code→warning(\"You are creating a lot of `forever` loops!\");\n  }\n  #Pj4YeL1fWpHS4Rqe code→in_background;\n  #DzqAW6AtT7qsGylm where `implicit` \\_body\\_() {\n    #VewPBkQpxjnPzsoN while true do {\n      #xxjM7mD3FQ3G0HYN $body→run;\n      #q2kJK2U1MbTh4d4L code→pause(20);\n    }\n  }\n  meta sync;\n}\n#x2UhK7IwofqmWDW2\nvar background_scene : Picture {\n  is\\_resource = true;\n  url = \"https://microbit0.blob.core.windows.net/pub/prcwhomc\";\n  transient = true;\n}\n#gqSUQusGllAt4X3R\naction init_axis() {\n  #QkvjQqSfn5L41Ph4 // {shim:}\n  #q7cMCQpYupmXc3oS data→led_indexes := data→board→create_sprite_set;\n  #x36Llp6v7tD4OgDD for 0 ≤ l < 2 do {\n    #xPsYPYIXtbJBJDDl for 0 ≤ k < 5 do {\n      #WVBiy4HYa9LPzM9f $index := data→board→create_text(100, 40, 16, $k→to_string);\n      #GP3ccJkbFZoGfIOo $index→fit_text;\n      #bZpgALZp1Y7Pqvwq $index→set_color(colors→white);\n      #rJHNHPvhK2CuW6K5 data→led_indexes→add($index);\n    }\n  }\n  #xZvCdCFHs2yBG1WD data→led_x_index_legend := data→board→create_text(100, 40, 20, \"X\");\n  #kWxcFIVT5naWzvWl data→led_x_index_legend→fit_text;\n  #xryAhH2rPFt7CGEu data→led_x_index_legend→set_color(colors→white);\n  #Swmd5OgE0kLUq6vI data→led_y_index_legend := data→board→create_text(100, 40, 20, \"Y\");\n  #toIFKA5P9IJU4fyF data→led_y_index_legend→fit_text;\n  #v88nKL6Mx0ObDSQb data→led_y_index_legend→set_color(colors→white);\n  meta private;\n  meta sync;\n}\n#gbl636zYs8BjKywu\naction background_animation() {\n  #cXcKTdQsmOf72PyZ // {shim:}\n  #sbOu1sddCBbbzLto $anim_style := math→random(2);\n  #zWd8PXsYN214PuSi if $anim_style = 0 then {\n    #xOUvhBkpwLPAJKQE for 0 ≤ x < 5 do {\n      #XztMutk0HQK5N4bE for 0 ≤ y < 5 do {\n        #V0LLzNL1lk6N8oiG code→rotate_pixel($x, $y, ($x + $y) / 11);\n      }\n    }\n  }\n  else { #N8Fm2yynpg44tcFN if $anim_style = 1 then {\n    #WFnJlsyfcMVWjUdA for 0 ≤ x < 5 do {\n      #O0vgqGWuikN0Igzt for 0 ≤ y < 5 do {\n        #oqHsWxXgwop5m3UQ code→rotate_pixel($y, $x, (8 - $x - $y) / 11);\n      }\n    }\n  }\n  else { } } \n  #W55d2CMIzJ17AYTx time→run_after(20 + math→random(20));\n  #l3mxxkPpmOIFL0MI where `implicit` \\_body\\_() {\n    #hPG2SGmZ0v82ge2v code→background_animation;\n  }\n  meta private;\n  meta sync;\n}\n#xY4SKFl04lUKP0Tz\nvar back_leds : Sprite_Set {\n  // {shim:}\n  transient = true;\n}\n#s4TpycEQnK9omxJE\naction rotate_pixel(#xQ6b7K01ABZHGoIM x: Number, #LByh34Z47Y1t7STj y: Number, #xXPwmL1c4yZhN70E delay: Number) {\n  #hDHLiXE2IoG2LAIC // {shim:}\n  #ZhRYM1cp26cnzoZ1 $index := code→index($x, $y);\n  #Z4jTOPX6Hf1TWJsy $back_led := data→back_leds→at($index);\n  #f9URVMJG14plLGON $led := data→leds→at($index);\n  #Axwwjnz8AnLRT1zD $anim := $led→create_animation;\n  #BXSGIclwP5UQZVWn $anim→sleep($delay);\n  #T1txW266DHqoj2VL $anim→turn_to(0.7, \"expo\", \"inout\", 360);\n  #JmbebaijvsuwQhiZ $anim := $back_led→create_animation;\n  #NqByltxb37T2IH33 $anim→sleep($delay);\n  #NwwgANo3MHaQnz5l $anim→turn_to(0.7, \"expo\", \"inout\", 360);\n  meta private;\n  meta sync;\n}\n#Y42hygGODxnJXaRw\naction led_index_anim(#QVFm7dBCUmhXNZ2d back_led: Sprite, #x2kGm9JYaUim4lt7 j: Number, #L5TjxqpH6tKGkOTd i: Number) {\n  #mZsj4T6J4M2uKZuV // {shim:}\n  #bU0sdnTBX02bATEy $back_led→on_tap($tapped);\n  #QGyzuuvKa9ITgnVd where tapped(x: Number, y: Number) {\n    #x4h4i0Xr2uWxRBvm $anim2 := $back_led→create_animation;\n    #xsMdEt8ccoRpbNYI $anim2→beat(0.3, 3, 1.2);\n    #s6iFPhs6n9jPEG7J $hint := data→board→create_text(100, 40, 22, \"x=\" ∥ $j ∥ \", y=\" ∥ $i);\n    #D6b4Qvjr06KgKv45 $hint→fit_text;\n    #gJIdoRKO7jwnlbzz $hint→set_text_baseline(\"bottom\");\n    #qx3Y9mRjHEwbnF6m $hint→@bottom := $back_led→y;\n    #zGixTQ9Kuk2m6Whe $hint→left := $back_led→x;\n    #FTPPf6p4gUiFcxxb $anim := $hint→create_animation;\n    #DyAb59RCz24FZLtG $anim→fade_in(0.5, \"cubic\");\n    #lOOqrViiBQ4e4jku $anim→sleep(.5);\n    #XJ5iEvyaoe36o2rc $anim→puff_out(0.5, \"cubic\", 1.5);\n    #DoyEH0iisHSMcqKe $anim→delete;\n  }\n  meta private;\n  meta sync;\n}\n#xB22l4bTEuykprY5\nvar current_animation : Number {\n  // {shim:}\n  transient = true;\n}\n#IhVzhAZz2OeYSRgl\naction test_multi_scroll() {\n  #B6N0Ow6kWjo3o2k4 // {shim:}\n  #jwlm0IOR4ZnMvote code→\\_libinit;\n  #vvz4qs78fnml39OQ code→on_button_pressed(\"A\");\n  #LFV6TOZvYxsiDM0g where `implicit` \\_body\\_() {\n    #VEQJMbAIvN5XNwiw code→show_string(\"ABC\", 100);\n  }\n  #dH24BpCdIjxC0udR code→on_button_pressed(\"B\");\n  #xGRNMYqr5Oobo6Iv where `implicit` \\_body\\_() {\n    #xdthtZf2mEoAmQO3 code→show_leds(\"0 0 0 0 0\\n0 1 1 1 0\\n0 1 0 1 0\\n0 1 1 1 0\\n0 0 0 0 0\", 400);\n  }\n  meta private;\n  meta test;\n}\n#cEmz3y3ohmdp6AXY\naction init_eyes() {\n  #xufwLhiDE0bQWtRU // {shim:}\n  #bjkoPxbCzJ4pL2uK data→eye_y := 86;\n  #NkEaRwjz7rWxJKQK data→eye_left := 276;\n  #v783038Eh682f2OC data→eye_right := 324;\n  #eiAcEwONRspI5U37 data→left_eye := data→board→create_ellipse(13, 13);\n  #kvrBgQVgS7G0K2jA data→left_eye→color := colors→blue;\n  #Xl8q5Ud55nALw4Qz data→left_eye→left := data→eye_left;\n  #NEMjm8SQ7r0P45jG data→left_eye→@top := data→eye_y;\n  #pshgYorYc1f0W1RK data→left_eye→set_friction(1);\n  #R6QEKy3rQdbXOaX1 data→right_eye := data→board→create_ellipse(13, 13);\n  #cOqnG6djBmo9cbBW data→right_eye→color := data→left_eye→color;\n  #GZdwztrKXD2QRxAJ data→right_eye→left := data→eye_right;\n  #k85veqcrDilOuwDt data→right_eye→@top := data→eye_y;\n  #HRun2WhRntsb626o data→right_eye→set_friction(1);\n  #xvDkOawcF4uscx4W time→run_after(5);\n  #fO2SW4IL13o44Bv6 where `implicit` \\_body\\_() {\n    #B3LDJWeGHtW8E4MP code→background_eye_animation;\n  }\n  meta private;\n  meta sync;\n}\n#O8kw8lSdWvW7wrc8\nvar left_eye : Sprite {\n  // {shim:}\n  transient = true;\n}\n#PRwAVo3AkO2aHbCQ\nvar right_eye : Sprite {\n  // {shim:}\n  transient = true;\n}\n#xhHLX6h5QdTnhalv\nvar eye_left : Number {\n  // {shim:}\n  transient = true;\n}\n#HWT93EnmgbqC9YKH\nvar eye_y : Number {\n  // {shim:}\n  transient = true;\n}\n#x4DvJKIPIgQ0E92R\nvar eye_right : Number {\n  // {shim:}\n  transient = true;\n}\n#qMsgTIJWIq1mQwZd\naction background_eye_animation() {\n  #H6xmVCztL24M7rH5 // {shim:}\n  #Yp9i79aYpUQDzMh3 $anim := data→right_eye→create_animation;\n  #yODxrazNsQmAFCaS $anim→turn_to(1, \"cubic\", \"inout\", - 360);\n  #cxDUduuWUiSMNJ7P $anim := data→left_eye→create_animation;\n  #bgGZqI1SAwMsPhxz $anim→turn_to(1, \"cubic\", \"inout\", - 360);\n  #WVY3japNIXYmFVbI time→run_after(20 + math→random(20));\n  #iOueH51c9marewEa where `implicit` \\_body\\_() {\n    #yItKPwNOdgar5Drt code→background_eye_animation;\n  }\n  meta private;\n  meta sync;\n}\n#kaq96iZh93dUdQ0Z\naction test_forever() {\n  #gIoxApIo64EHyPn8 // {shim:}\n  #ltm6kY4KiWLUR5jc code→\\_libinit;\n  #ZdeN0qz5MQzjBkkP code→forever;\n  #xPjmmLzsEKaNVoWr where `implicit` \\_body\\_() {\n    #qNI9KS2fM6Fo1pP4 skip;\n  }\n  meta private;\n  meta test;\n}\n#WuJjn92QznNVUE3Z\nvar font_chars : String {\n  is\\_resource = true;\n  url = \"data:text/plain;base64,ezB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDgsIDB4OCwgMHg4LCAweDAsIDB4OCwgMHhhLCAweDRhLCAweDQwLCAweDAsIDB4MCwgMHhhLCAweDVmLCAweGVhLCAweDVmLCAweGVhLCAweGUsIDB4ZDksIDB4MmUsIDB4ZDMsIDB4NmUsIDB4MTksIDB4MzIsIDB4NDQsIDB4ODksIDB4MzMsIDB4YywgMHg5MiwgMHg0YywgMHg5MiwgMHg0ZCwgMHg4LCAweDgsIDB4MCwgMHgwLCAweDAsIDB4NCwgMHg4OCwgMHg4LCAweDgsIDB4NCwgMHg4LCAweDQsIDB4ODQsIDB4ODQsIDB4ODgsIDB4MCwgMHhhLCAweDQ0LCAweDhhLCAweDQwLCAweDAsIDB4NCwgMHg4ZSwgMHhjNCwgMHg4MCwgMHgwLCAweDAsIDB4MCwgMHg0LCAweDg4LCAweDAsIDB4MCwgMHhlLCAweGMwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4OCwgMHgwLCAweDEsIDB4MjIsIDB4NDQsIDB4ODgsIDB4MTAsIDB4YywgMHg5MiwgMHg1MiwgMHg1MiwgMHg0YywgMHg0LCAweDhjLCAweDg0LCAweDg0LCAweDhlLCAweDFjLCAweDgyLCAweDRjLCAweDkwLCAweDFlLCAweDFlLCAweGMyLCAweDQ0LCAweDkyLCAweDRjLCAweDYsIDB4Y2EsIDB4NTIsIDB4NWYsIDB4ZTIsIDB4MWYsIDB4ZjAsIDB4MWUsIDB4YzEsIDB4M2UsIDB4MiwgMHg0NCwgMHg4ZSwgMHhkMSwgMHgyZSwgMHgxZiwgMHhlMiwgMHg0NCwgMHg4OCwgMHgxMCwgMHhlLCAweGQxLCAweDJlLCAweGQxLCAweDJlLCAweGUsIDB4ZDEsIDB4MmUsIDB4YzQsIDB4ODgsIDB4MCwgMHg4LCAweDAsIDB4OCwgMHgwLCAweDAsIDB4NCwgMHg4MCwgMHg0LCAweDg4LCAweDIsIDB4NDQsIDB4ODgsIDB4NCwgMHg4MiwgMHgwLCAweGUsIDB4YzAsIDB4ZSwgMHhjMCwgMHg4LCAweDQsIDB4ODIsIDB4NDQsIDB4ODgsIDB4ZSwgMHhkMSwgMHgyNiwgMHhjMCwgMHg0LCAweGUsIDB4ZDEsIDB4MzUsIDB4YjMsIDB4NmMsIDB4YywgMHg5MiwgMHg1ZSwgMHhkMiwgMHg1MiwgMHgxYywgMHg5MiwgMHg1YywgMHg5MiwgMHg1YywgMHhlLCAweGQwLCAweDEwLCAweDEwLCAweGUsIDB4MWMsIDB4OTIsIDB4NTIsIDB4NTIsIDB4NWMsIDB4MWUsIDB4ZDAsIDB4MWMsIDB4OTAsIDB4MWUsIDB4MWUsIDB4ZDAsIDB4MWMsIDB4OTAsIDB4MTAsIDB4ZSwgMHhkMCwgMHgxMywgMHg3MSwgMHgyZSwgMHgxMiwgMHg1MiwgMHg1ZSwgMHhkMiwgMHg1MiwgMHgxYywgMHg4OCwgMHg4LCAweDgsIDB4MWMsIDB4MWYsIDB4ZTIsIDB4NDIsIDB4NTIsIDB4NGMsIDB4MTIsIDB4NTQsIDB4OTgsIDB4MTQsIDB4OTIsIDB4MTAsIDB4MTAsIDB4MTAsIDB4MTAsIDB4MWUsIDB4MTEsIDB4M2IsIDB4NzUsIDB4YjEsIDB4MzEsIDB4MTEsIDB4MzksIDB4MzUsIDB4YjMsIDB4NzEsIDB4YywgMHg5MiwgMHg1MiwgMHg1MiwgMHg0YywgMHgxYywgMHg5MiwgMHg1YywgMHg5MCwgMHgxMCwgMHhjLCAweDkyLCAweDUyLCAweDRjLCAweDg2LCAweDFjLCAweDkyLCAweDVjLCAweDkyLCAweDUxLCAweGUsIDB4ZDAsIDB4YywgMHg4MiwgMHg1YywgMHgxZiwgMHhlNCwgMHg4NCwgMHg4NCwgMHg4NCwgMHgxMiwgMHg1MiwgMHg1MiwgMHg1MiwgMHg0YywgMHgxMSwgMHgzMSwgMHgzMSwgMHgyYSwgMHg0NCwgMHgxMSwgMHgzMSwgMHgzNSwgMHhiYiwgMHg3MSwgMHgxMiwgMHg1MiwgMHg0YywgMHg5MiwgMHg1MiwgMHgxMSwgMHgyYSwgMHg0NCwgMHg4NCwgMHg4NCwgMHgxZSwgMHhjNCwgMHg4OCwgMHgxMCwgMHgxZSwgMHhlLCAweGM4LCAweDgsIDB4OCwgMHhlLCAweDEwLCAweDgsIDB4NCwgMHg4MiwgMHg0MSwgMHhlLCAweGMyLCAweDQyLCAweDQyLCAweDRlLCAweDQsIDB4OGEsIDB4NDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MWYsIDB4OCwgMHg0LCAweDgwLCAweDAsIDB4MCwgMHgwLCAweGUsIDB4ZDIsIDB4NTIsIDB4NGYsIDB4MTAsIDB4MTAsIDB4MWMsIDB4OTIsIDB4NWMsIDB4MCwgMHhlLCAweGQwLCAweDEwLCAweGUsIDB4MiwgMHg0MiwgMHg0ZSwgMHhkMiwgMHg0ZSwgMHhjLCAweDkyLCAweDVjLCAweDkwLCAweGUsIDB4NiwgMHhjOCwgMHgxYywgMHg4OCwgMHg4LCAweGUsIDB4ZDIsIDB4NGUsIDB4YzIsIDB4NGMsIDB4MTAsIDB4MTAsIDB4MWMsIDB4OTIsIDB4NTIsIDB4OCwgMHgwLCAweDgsIDB4OCwgMHg4LCAweDIsIDB4NDAsIDB4MiwgMHg0MiwgMHg0YywgMHgxMCwgMHgxNCwgMHg5OCwgMHgxNCwgMHg5MiwgMHg4LCAweDgsIDB4OCwgMHg4LCAweDYsIDB4MCwgMHgxYiwgMHg3NSwgMHhiMSwgMHgzMSwgMHgwLCAweDFjLCAweDkyLCAweDUyLCAweDUyLCAweDAsIDB4YywgMHg5MiwgMHg1MiwgMHg0YywgMHgwLCAweDFjLCAweDkyLCAweDVjLCAweDkwLCAweDAsIDB4ZSwgMHhkMiwgMHg0ZSwgMHhjMiwgMHgwLCAweGUsIDB4ZDAsIDB4MTAsIDB4MTAsIDB4MCwgMHg2LCAweGM4LCAweDQsIDB4OTgsIDB4OCwgMHg4LCAweGUsIDB4YzgsIDB4NywgMHgwLCAweDEyLCAweDUyLCAweDUyLCAweDRmLCAweDAsIDB4MTEsIDB4MzEsIDB4MmEsIDB4NDQsIDB4MCwgMHgxMSwgMHgzMSwgMHgzNSwgMHhiYiwgMHgwLCAweDEyLCAweDRjLCAweDhjLCAweDkyLCAweDAsIDB4MTEsIDB4MmEsIDB4NDQsIDB4OTgsIDB4MCwgMHgxZSwgMHhjNCwgMHg4OCwgMHgxZSwgMHg2LCAweGM0LCAweDhjLCAweDg0LCAweDg2LCAweDgsIDB4OCwgMHg4LCAweDgsIDB4OCwgMHgxOCwgMHg4LCAweGMsIDB4ODgsIDB4MTgsIDB4MCwgMHgwLCAweGMsIDB4ODMsIDB4NjB9\";\n  transient = true;\n}\n#PMFLUE1q1CuJ4ghz\naction init_font() {\n  #b0vtErRVv2lKiwyD // {shim:}\n  #so2fife4MqLt1Dln if data→font→is_invalid then {\n    #hRTF6gnQkpgcVI0F $font_rows := art→font_chars→trim(\"{}\")→split(\",\")→map_to→Number($converter);\n    #gnhl2igarTz8w2X1 where converter(elt: String) returns (result: Number) {\n      #NZd95tR0pei7srD9 $x := $elt→to_number;\n      #bjwdIjRW58xl4ZgI contract→assert( `not` $x→is_invalid, $elt);\n      #VE234B61ItgkKgVL `return` $x;\n    }\n    #GXwn4PKhSZinH5Jl $nb := $font_rows→count;\n    #bcE3hNwJudeu449H contract→assert(math→mod($nb, 5) = 0, \"invalid font data\");\n    #ws1lTcfPCXYdibgp $n := $nb / 5;\n    #FNuWAd8Sjya04cTv data→font := code→create_sprite($nb, 5);\n    #xvsY0LHtmGPgd3TL for 0 ≤ c < $n do {\n      #NHblt5yTsRCX4KY1 for 0 ≤ row < 5 do {\n        #Krg7mRods3Dl3k2y $char := $font_rows→at($c * 5 + $row);\n        #PWFqQxwKPwt6h2Wd for 0 ≤ col < 5 do {\n          #NOwv6OryF0clX7lo if bits→and_uint32($char, bits→shift_left_uint32(1, $col)) ≠ 0 then {\n            #Cx4707D9Ly7f7wl3 data→font→leds→set_item($c * 5 + 4 - $col, $row, 255);\n          }\n        }\n      }\n    }\n  }\n  meta private;\n  meta sync;\n}\n#lXqPrHVzWaoZMhQU\nvar font : * Image {\n  // {shim:}\n  transient = true;\n}\n#kn3pxm1GvYlNa2FM\naction copy(#xDSPvIZLimSE2MgA src: * Image, #x3OdCZm4sg12zaMQ x_src_index: Number, #W2oZZTGMGJa7NNyS length: Number, #we1A4KgB1twL5dAS target: * Image, #SMzdIeBXlWN3rk9Z x_target_index: Number) {\n  #xVS27yM2iLbckrF4 // {shim:}\n  #itHlEE9vAYKoLLwH contract→requires($x_target_index ≥ 0 `and` $x_target_index + $length ≤ $target→leds→row_count, \"\");\n  #xSw5Z2RjNt6KkO1O contract→requires($x_src_index ≥ 0 `and` $x_src_index + $length ≤ $src→leds→row_count, \"\");\n  #YLi1rzwGdt51yvgW for 0 ≤ x < $length do {\n    #wOepVxKUEXepB4JQ for 0 ≤ y < 5 do {\n      #byEw4wKZ8D34CjTA $value := $src→leds→item($x_src_index + $x, $y);\n      #xgoui2MU0NwSX63I $target→leds→set_item($x_target_index + $x, $y, $value);\n    }\n  }\n  meta private;\n  meta sync;\n}\n#GBVlNX6jjV0ZeEsK\naction test_show_image() {\n  #vT52tges4o3Y4sKH // {shim:}\n  #tJWkRScB87ES2vh5 code→\\_libinit;\n  #B3ht5L7s2p9R2mUJ code→create_image(\"\");\n  #xaDxNVhBCfNUzkgF $img := code→create_image(\"1 0 0 0 0\\n0 1 0 0 0\\n0 0 1 0 0\\n0 0 0 1 0\\n0 0 0 0 1\");\n  #QVb2KOULf0Nlfuhv $img→show_image(0);\n  #UVUpjEQQ4dp7wzHj $img→show_image( - 2);\n  #F9pi4aSzEu9kjmyZ $img→show_image(2);\n  meta private;\n  meta test;\n}\n#Clf38zxkZIrobSlk\naction on_before_pause(#xk8GIyGNr2wlsynF body: Action) {\n  #tzjretiGNHu9Jbzz // **Simulator only!** Registers an event to run before pause.\n  #nAL0A4jjuTPWjd0J // {shim:}\n  #xjnRGo2GMH2Qy3Fi // {weight:0}\n  #xbU8a1LTxptE5w5M data→before_pause := $body;\n  meta private;\n  meta sync;\n}\n#lPJG6os6F3M65GjY\nvar before_pause : Action {\n  // {shim:}\n  transient = true;\n}\n#CCgTYpjWRTwnp9VZ\nvar doc : Document {\n  is\\_resource = true;\n  transient = true;\n}\n#xuFJQyZVR24l4lZD\naction pin_is_pressed(#PqStokDT5lOf1jxR name: String) returns(#tEhrD6EfDVOcSbFI pressed: Boolean) {\n  #azmYPGjkodVTzZEW // Get the pin state (pressed or not). Requires to hold the ground to close the circuit.\n  #vBhRQqSJZf4WYIle // {help:functions/pin-is-pressed}\n  #yiahMKDpg9PMqNVd // {namespace:input}\n  #x8XLiwKMO5Evc4TB // {weight:58}\n  #HNt4QiENW2fWc4fU // {enum:name:P0=uBit.io.P0,P1=uBit.io.P1,P2=uBit.io.P2}\n  #QRFOhtCMkFfrBa2r // {shim:micro_bit::isPinTouched}\n  #SShWUIP3VYby3fRd code→init_pins;\n  #WsVEccEOZ0aG95J8 $name := $name→trim(\" \\t\")→to_lower_case;\n  #Ta2Yaf4GHnPo1g9S if data→board→touched then {\n    #xo2G8eJDCmsq4gT4 $target := code→pin_by_name($name);\n    #GtVffND0qQpD2Uky $p := data→board→touch_current;\n    #x3Gr77Zk0mZawflE data→finger→set_pos($p→x, $p→y);\n    #xB28uqAlbJAhYFzu if data→finger→overlaps_with($target) then {\n      #Ws3G9qMFZIAcnvDZ `return` true;\n    }\n  }\n  #adGG0ohDxSfXMItY if $name→equals(\"p0\") `and` senses→is_key_pressed(\"0\") then {\n    #b741DDwiWIafJlj6 `return` true;\n  }\n  else { #xN11da8I4Uh5uCI0 if $name→equals(\"p1\") `and` senses→is_key_pressed(\"1\") then {\n    #MwC8h4HyPUYqG0xK `return` true;\n  }\n  else { #KyslP3kLRnPWaw2f if $name→equals(\"p2\") `and` senses→is_key_pressed(\"2\") then {\n    #HvlIx1YVevH1jKxa `return` true;\n  }\n  else { } } } \n  #rE7lIBNdOOjEf4VE `return` false;\n  meta sync;\n}\n#J3NOIEutRnzUY4bD\naction on_pin_pressed(#xSs4Svf30EPMhoVj name: String, #BxKLhpiGqRcDwB1h body: Action) {\n  #kReLjZqoQYm1X75l // Do something when a pin(``P0``, ``P1`` or both ``P2``) is pressed.\n  #jHDQ6E4HWmRlwyxo // {help:functions/on-pin-pressed}\n  #yj4K6E3sCCK1V32N // {namespace:input}\n  #UZIoGA4CKSwhMxlf // {weight:57}\n  #OgqWJNwCulcyJT7l // {enum:name:P0=MICROBIT_ID_IO_P0,P1=MICROBIT_ID_IO_P1,P2=MICROBIT_ID_IO_P2}\n  #xZ0ArWZwbu4SBuBn // {shim:micro_bit::onPinPressed}\n  #jDgDoJLo4kvbVPvk $evid := \"on pin pressed \" ∥ $name;\n  #nPpJQoCs8nAIigcE code→notify_event_registration($evid);\n  #AC4jsXJ71LfQp2kk code→clear_pin_handler($name);\n  #h5fUFp7OQ9fEwJRv $btn := code→pin_by_name($name);\n  #g7K6590eu6r59eIv $ev := $btn→on_touch_up($touch_up);\n  #xSk8PXoFQvpiueOt where touch_up(x: Number, y: Number) {\n    #NbkK6P2y62Y9tOIt code→queue_event($body, $evid);\n  }\n  #P1GQOzd8c8e0hPJt code→store_pin_handler($name, $ev);\n  meta sync;\n}\n#pqc71fRJDE9AyREy\nvar led_x_index_legend : Sprite {\n  // {shim:}\n  transient = true;\n}\n#VTpQmE9c2z7zHZvZ\nvar led_y_index_legend : Sprite {\n  // {shim:}\n  transient = true;\n}\n#x6wCsmeEKLVxXaL2\naction test_pin_pressed() {\n  #YbjZ28PiH7cboofJ // {shim:}\n  #xrTaGQCG4tQ7BuaQ code→\\_libinit;\n  #uk4llAEL60uunwoN code→on_pin_pressed(\"P0\");\n  #xOX7XEk48KmshvAM where `implicit` \\_body\\_() {\n    #K9SewNiqXXHAAr9I code→show_number(0, 150);\n  }\n  #vMbUCvZwCzUVIPCj code→on_pin_pressed(\"P1\");\n  #ZNMMtevlmkH4UeG4 where `implicit` \\_body\\_() {\n    #xd8cEg1eTi89m63q code→show_number(1, 150);\n  }\n  #M792rT11iDEw20Qp code→on_pin_pressed(\"P2\");\n  #V3NF8Cc4SsoAbwjt where `implicit` \\_body\\_() {\n    #SkiHZpgB4MGkk3M6 code→show_number(2, 150);\n  }\n  meta private;\n  meta test;\n}\n#xfEzD2r0WjZppPTL\naction test_devices() {\n  #xM2V2HK64vD5CCP6 // {shim:}\n  #SF8Y7AzLVf79J9Hv code→\\_libinit;\n  #cTuQbNGhz19mZ9t8 code→on_notified(\"incoming call\");\n  #GyS1jjevaGOtFn7t where `implicit` \\_body\\_() {\n    #qV2L159TGxJqtFWY code→show_string(\"call\", 150);\n  }\n  #fDLKJmiUUW69SvE1 code→on_notified(\"display on\");\n  #xJ0TOWIoWn36b1L2 where `implicit` \\_body\\_() {\n    #x3DQ6nvE2f4Rqd2h code→show_string(\"on\", 150);\n  }\n  #pzhqPTIc6apYk7pA code→on_notified(\"display off\");\n  #tIPIEP27KGu6QXrc where `implicit` \\_body\\_() {\n    #oPQrc25PShs2hY12 code→show_string(\"off\", 150);\n  }\n  #TN6fi4j2zlOS6ZZN code→on_notified(\"incoming message\");\n  #xovkFszj0eJqEcde where `implicit` \\_body\\_() {\n    #jJR01sQvfk3C30u4 code→show_string(\"msg\", 150);\n  }\n  #xlty8np4b3hGTffF code→on_notified(\"orientation landscape\");\n  #n0VbKITZgs222bFS where `implicit` \\_body\\_() {\n    #z2ehI01nRsXB7Jri code→show_string(\"landscape\", 150);\n  }\n  #xo2CAyPVq82gihJv code→on_notified(\"orientation portrait\");\n  #ANNOwYn5M8CNBLsx where `implicit` \\_body\\_() {\n    #w3RcKVkf5ZwT0Yoy code→show_string(\"portrait\", 150);\n  }\n  #SP0ycUjbfsOKsd6J code→on_notified(\"shaken\");\n  #yRyJSh232waGLyFz where `implicit` \\_body\\_() {\n    #nQjSnZdNP45rtSYC code→show_string(\"shaken\", 150);\n  }\n  #xYsvR3f5jJsVfu8P code→tell_remote_control_to(\"play\");\n  #VXZ2fZLriKdH5o25 code→pause(1000);\n  #VHKRZyj11yrItaeA code→tell_remote_control_to(\"pause\");\n  #iuTCLYFn24YBEBAV code→pause(1000);\n  #NFjU8XLb5qH4qi0s code→tell_remote_control_to(\"stop\");\n  #oizDycRjQI2sU0fO code→pause(1000);\n  #x6tXtLrOjbyLj71J code→tell_remote_control_to(\"next track\");\n  #AaGU8mHo0WmDNVGm code→pause(1000);\n  #x9ptNjJbOEhQzr2G code→tell_remote_control_to(\"previous track\");\n  #hM89M5NlZSA5aZes code→pause(1000);\n  #m2qkS2n4QlIgr8rU code→tell_remote_control_to(\"forward\");\n  #gH1nNlcw62Yd6tF5 code→pause(1000);\n  #YC9iNYuSkosLnOiS code→tell_remote_control_to(\"rewind\");\n  #xmbSINcx1jnrao3s code→pause(1000);\n  #S4fvdbVeCn1mU7N5 code→tell_remote_control_to(\"volume up\");\n  #xpPB2ugK28IXwA4W code→pause(1000);\n  #c6mF6g3EZsN9kyMH code→tell_remote_control_to(\"volume down\");\n  #yr5uOJyqn6aV8Ge0 code→pause(1000);\n  #yb0esPi6Iy51trEl code→tell_camera_to(\"launch photo mode\");\n  #NzJXZ4xVLRd4Ejyg code→pause(1000);\n  #hCY4GTQ592HR6MDS code→tell_camera_to(\"launch video mode\");\n  #w00LIesoogGZI3SX code→pause(1000);\n  #q7dc4Ems5bX8bUjw code→tell_camera_to(\"start video capture\");\n  #w1XPyVxyf4I43cxv code→pause(1000);\n  #Ig5RtNNeoA2RR4Vp code→tell_camera_to(\"stop video capture\");\n  #VTD5jpdXtP0RSz4w code→pause(1000);\n  #xbMlLP406gUHPHdg code→tell_camera_to(\"stop photo mode\");\n  #x7UpsxVmiuAKf2O2 code→pause(1000);\n  #mji2VTG8pklTAlZT code→tell_camera_to(\"stop video mode\");\n  #xzqQy9QuYzBSFcU4 code→pause(1000);\n  #osyLpvx7y5Rqez47 code→raise_alert_to(\"display toast\");\n  #xgMtYE2VyuuK0SUh code→pause(1000);\n  #vplr1SUmLrtoEKw1 code→raise_alert_to(\"ring alarm\");\n  #mLMYnQoFZOYU4bBv code→pause(1000);\n  #Ti16hcwPzBwmNNj8 code→raise_alert_to(\"ring alarm 2\");\n  #nrJs9EsvqT9kFj7T code→pause(1000);\n  #abtVG7M5AmVIebxk code→raise_alert_to(\"ring alarm 2\");\n  #CuUOhQyH7q1POsMW code→pause(1000);\n  #wM3rylf47Mzw2D1I code→raise_alert_to(\"ring alarm 3\");\n  #hpxVivTxxOSR8Pqr code→pause(1000);\n  #c15239nr9VsPiIo9 code→raise_alert_to(\"ring alarm 4\");\n  #xI4HNzsLpPpgty82 code→pause(1000);\n  #N76wkVa5Gu9l3vAc code→raise_alert_to(\"ring alarm 5\");\n  #rS2fSXiqIn63Nape code→pause(1000);\n  #AXiIgG5uqhZfftXK code→raise_alert_to(\"ring alarm 6\");\n  #dnOMZGp6VT48T3g9 code→pause(1000);\n  #lQfV8k1SdXdWnQyy code→raise_alert_to(\"find my phone\");\n  #u4p6kOo9s73HoGoD code→pause(1000);\n  #r4nWD2K8jmaMjfI0 code→raise_alert_to(\"play ringtone\");\n  #KzEts7e3LbwEb2bL code→pause(1000);\n  #Llmpr8UCY4YttCbj code→raise_alert_to(\"play sound\");\n  #TKfJJ60q6Z52Y2Zs code→pause(1000);\n  #NmGpttcHIFb2l2NP code→raise_alert_to(\"vibrate\");\n  meta private;\n  meta test;\n}\n#FsXN4qs00Niar2I3\naction tell_camera_to(#p3kEX3EqeufdJmG1 @event: String) {\n  #wY3y0ASAfRrgGtG2 // Sends a ``camera`` command to the parent device.\n  #T9jxpLbgaFQwkQy8 // {namespace:devices}\n  #w2wLNoci3MafdcN6 // {weight:19}\n  #eeF0Fl9hopb7V9WB // {help:functions/tell-camera-to}\n  #Iqur1M60Xd5273Xa // {shim:micro_bit::devices::camera}\n  #gQP8w2Pvp4ygp502 // {enum:event:take photo=MES_CAMERA_EVT_TAKE_PHOTO,start video capture=MES_CAMERA_EVT_START_VIDEO_CAPTURE,stop video capture=MES_CAMERA_EVT_STOP_VIDEO_CAPTURE,toggle front-rear=MES_CAMERA_EVT_TOGGLE_FRONT_REAR,launch photo mode=MES_CAMERA_EVT_LAUNCH_PHOTO_MODE,launch video mode=MES_CAMERA_EVT_LAUNCH_VIDEO_MODE,stop photo mode=MES_CAMERA_EVT_STOP_PHOTO_MODE,stop video mode=MES_CAMERA_EVT_STOP_VIDEO_MODE}\n  #yDtIYowWcPuh4mNt code→show_ble_event_notification(\"camera\", $@event);\n  meta sync;\n}\n#CzqRWuR2SyiUNdAg\naction raise_alert_to(#pHqCn0ZWIdyNQSVu @event: String) {\n  #vUmqTLUCj4fjFygl // Sends an ``alert`` command to the parent device.\n  #etLJqyeZ8q3eRTtj // {namespace:devices}\n  #gv2Lztj0odNeIJvt // {weight:18}\n  #ZCcDnTF7ZiSNaNNA // {help:functions/raise-alert-to}\n  #oq6L8Lgvq4qKxsZb // {shim:micro_bit::devices::alert}\n  #gEJkfOlRyGq3Cq72 // {enum:event:display toast=MES_ALERT_EVT_DISPLAY_TOAST,vibrate=MES_ALERT_EVT_VIBRATE,play sound=MES_ALERT_EVT_PLAY_SOUND,play ringtone=MES_ALERT_EVT_PLAY_RINGTONE,find my phone=MES_ALERT_EVT_FIND_MY_PHONE,ring alarm=MES_ALERT_EVT_ALARM1,ring alarm 2=MES_ALERT_EVT_ALARM2,ring alarm 3=MES_ALERT_EVT_ALARM3,ring alarm 4=MES_ALERT_EVT_ALARM4,ring alarm 5=MES_ALERT_EVT_ALARM5,ring alarm 6=MES_ALERT_EVT_ALARM6}\n  #feboFmM8Q6SZnWuH code→show_ble_event_notification(\"alert\", $@event);\n  meta sync;\n}\n#DFpXK66KYosuH2qD\naction create_A\\u002bB_button() {\n  #oqndQEOZsX7D7VuV // {shim:}\n  #Q7HJhFDhF31D1CyH data→button_a\\u002bb_inner := code→create_circle(525, 532);\n  #AezoGLweK6YLo95L // {help:functions/on-logo-up}\n  #jOo9NfJ7oRgpQ8Y4 data→button_a\\u002bb_inner→set_color(colors→black);\n  #nyeqaqfbg2o1utr4 data→button_a\\u002bb_inner→set_gradient(false);\n  #Z8fAqSYlCuXG6dtB data→button_a\\u002bb := code→create_circle(data→button_a\\u002bb_inner→x, data→button_a\\u002bb_inner→y);\n  #qL8vzC4Ua3ivvgm6 data→button_a\\u002bb→opacity := 0;\n  #pgsgfJbTVcGs9ULn data→button_a\\u002bb→width := 84;\n  #QWB0KqvVxcoyhy7H data→button_a\\u002bb→height := 84;\n  #Ktr2xDEXBGgQzQ6q data→button_a\\u002bb→x := data→button_a\\u002bb_inner→x;\n  #jMQz8inx0Hu43J4J data→button_a\\u002bb→y := data→button_a\\u002bb_inner→y;\n  #zS6N4kaRn2wel37F data→button_a\\u002bb→on_touch_down($touch_down);\n  #PJA6VUPCxlzWw0Nv where touch_down(x: Number, y: Number) {\n    #a2abvjq67X2J8yEU data→button_a\\u002bb_inner→set_color(colors→orange);\n    #R67xt5S6i2Tg17ti data→button_a_inner→set_color(colors→orange);\n    #tPC2aVNQVkohUc32 data→button_b_inner→set_color(colors→orange);\n  }\n  #HPkfFmXxktWAAMgq data→button_a\\u002bb→on_touch_up($touch_up);\n  #xWF6IyOF9X9GA09M where touch_up(x: Number, y: Number) {\n    #x3diqaUUBItAgH4p data→button_a\\u002bb_inner→set_color(colors→black);\n    #VWrTjWQVsOX82B1C data→button_a_inner→set_color(colors→black);\n    #mbfRvtByD8SP9Ard data→button_b_inner→set_color(colors→black);\n  }\n  #xrF43zP5h8mPVPIH $a\\u002bb_text := data→board→create_text(100, 40, 20, \"A+B\");\n  #OjSlLvcGgdRux2nI $a\\u002bb_text→set_color(colors→black);\n  #zds87sWwxUvSi4Kc $a\\u002bb_text→fit_text;\n  #MQQ53MhcsvV8Y81c $a\\u002bb_text→x := data→button_a\\u002bb→x;\n  #bs4gmywDvvLuEtqt $a\\u002bb_text→@bottom := data→button_a\\u002bb→@top + 10;\n  meta private;\n  meta sync;\n}\n#w7xLLit7W5biNqRL\naction create_B_button() {\n  #CDDoGfAZ7oqJpEWi // {shim:}\n  #Hxnhl22NTBAKVXpI data→button_b_inner := code→create_circle(525, 229);\n  #OJJgFsj90lBLVD6Y data→button_b_inner→set_color(colors→black);\n  #gtC6KmnU2Z5hTgIN data→button_b_inner→set_gradient(false);\n  #xPpbA1GFc7ufOgwp data→button_b := code→create_circle(data→button_b_inner→x, data→button_b_inner→y);\n  #xVcUpX8PlDVShy0U data→button_b→opacity := 0;\n  #myD38vc5KVYqxJjy data→button_b→width := 112;\n  #nk4Ah7b8Pz5Fxyaa data→button_b→height := 112;\n  #dnWpTTRMAGH5LR7K data→button_b→x := data→button_b_inner→x;\n  #xJ8biFwM65yBGrz4 data→button_b→y := data→button_b_inner→y;\n  #W8ipqb8qzv6DDJ9Z data→button_b→on_touch_down($touch_down);\n  #bZFBsmfIhtPST9HV where touch_down(x: Number, y: Number) {\n    #YiPXtiy40dPPjGdZ data→button_b_inner→set_color(colors→orange);\n  }\n  #Qrm9tjgmXuwskqsV data→button_b→on_touch_up($touch_up);\n  #IsiFhvitsyr3BwTC where touch_up(x: Number, y: Number) {\n    #kecNwKPdnS1ycmCt data→button_b_inner→set_color(colors→black);\n  }\n  meta private;\n  meta sync;\n}\n#h2y3t2CTwSZ5po2P\nvar button_b_inner : Sprite {\n  // {shim:}\n  transient = true;\n}\n#xBES128hctdLOPWp\nvar button_a_inner : Sprite {\n  // {shim:}\n  transient = true;\n}\n#Bv2s8Hio3iAdQCss\nvar button_a\\u002bb_inner : Sprite {\n  // {shim:}\n  transient = true;\n}\n#xrHM168gvIqFDWL4\naction on_notified(#ja99pvTLEWszGU6R @event: String, #u92yApOZzhWqx4x9 body: Action) {\n  #x3KDXHT4kdAt87Pj // Registers code to run when the device notifies about a particular event.\n  #e13mHRXUDt9X8SUj // {shim:micro_bit::onDeviceInfo}\n  #mc3m4mu0EMkFqfIo // {namespace:devices}\n  #x4sPBtRE9IMDXiSl // {enum:event:incoming call=MES_DEVICE_INCOMING_CALL,incoming message=MES_DEVICE_INCOMING_MESSAGE,orientation landscape=MES_DEVICE_ORIENTATION_LANDSCAPE,orientation portrait=MES_DEVICE_ORIENTATION_PORTRAIT,shaken=MES_DEVICE_GESTURE_DEVICE_SHAKEN,display off=MES_DEVICE_DISPLAY_OFF,display on=MES_DEVICE_DISPLAY_ON}\n  #m2Y4FjpJXWArRpT0 // {help:functions/on-notified}\n  #Bux3nIa98lMeKv4u code→notify_event_registration(\"on notified \" ∥ $@event);\n  #MDbRckoe8yhfH0Uw code→pairing_warning;\n  meta sync;\n}\n#xPty4Z96gEpPmXcC\nvar counters : Json_Builder {\n  // {shim:}\n  transient = true;\n}\n#uEOBEDRjLlEAJaV2\naction tick(#j2GGfLeDOHbsXZjl evid: String) returns(#xpE0YoFiEwnltNko c2: Number) {\n  #MeueTVmAKDsL2X3a // {shim:}\n  #nYuZwihGP24HOD9e $c := data→counters→number($evid);\n  #xCTFs2GTH5YoqiBt if $c→is_invalid then {\n    #YkiKdcxa0RNOk1Dd $c := 0;\n  }\n  #EKI3rwRF5c4S12YH $c := $c + 1;\n  #XDi6TARievQiaslS data→counters→set_number($evid, $c);\n  #M4BkiNLAQCyBMo2M `return` $c;\n  meta private;\n  meta sync;\n}\n#Mv24F812mJ3GfnmU\naction notify_event_registration(#g02jGBBa2sA62OQi evid: String) {\n  #HgJ7hFDs0h0KhMo0 // Used by library authors to notify an event.\n  #p4kX3FVGjvu2Bf44 // {shim:TD_NOOP}\n  #WV4LEgRBjvrM2NyD // {weight:0}\n  #xK4U2ElyXeq4kVxN // {namespace:simulator}\n  #JDNtwbXSOeQxOX3c // {action:libsonly}\n  #U3QSq4Bys0HpYoiD $c := code→tick($evid);\n  #CSLMchaNHEeAo9ZX if $c > 10 then {\n    #xGRcYnuDXDMpcEgQ code→warning(\"You register this event a lot. Move it out of the loop maybe?\");\n  }\n  meta sync;\n}\n#iyYckFFAkzncX0z5\naction test_image_partial_paste() {\n  #gGEVbkFZvwn26omq // {shim:}\n  #qNYSv82a9bufwSar code→\\_libinit;\n  #rUN44T7OGT1zz25f code→create_image(\"0 0 0 0 1\\n0 0 0 1 0\\n0 0 1 0 0\\n0 1 0 0 0\\n1 0 0 0 0\")→show_image(0);\n  #Z32wXINdisyPQwFl code→create_image(\"0 0 0 0 0\\n0 0 1 0 0\\n0 0 1 0 0\\n0 0 0 0 0\\n0 0 0 0 0\")→show_image(2);\n  meta private;\n  meta test;\n}\n#pbQ4mX9LsuvB6479\naction test_detect_event_over_registration() {\n  #XmLqRuU4B4mC44vY // {shim:}\n  #RP24GvJESSabTi3j code→\\_libinit;\n  #x8Rtk54oilx28eN2 code→forever;\n  #SDv3nIkUp4301pPy where `implicit` \\_body\\_() {\n    #wXqb2VYzBamFs9y0 code→on_button_pressed(\"A\");\n    #AFrJ39ft1kIpgu4T where `implicit` \\_body\\_() {\n      #iNCIkVU2vCCUxYqg skip;\n    }\n  }\n  meta private;\n  meta test;\n}\n#glHgGKBHAxnk24z2\naction render_image(#KkzO6pqnOT2H4Nbl @this: * Image, #WFXxzfGSmEcaecgL x_offset: Number) {\n  #wJjDZaded1juM16b // {shim:}\n  #xoCK7Hf5VvJd2IIu $cols := math→min(5, $@this→width - $x_offset);\n  #xIjtuyBD6lHvitS8 for 0 ≤ x < $cols do {\n    #cBTue49vRLx322bI for 0 ≤ y < 5 do {\n      #i4GeKthAALnRpGP4 $led := data→leds→at(code→index($x, $y));\n      #P2v15gj3plesHPMl $xi := $x + $x_offset;\n      #JwjqylYbr2MC3BU4 $state := 0;\n      #Xfykmd4KAfBDk2zI if $xi ≥ 0 `and` $xi < $@this→width then {\n        #pWDKJ02kXicPr2an $state := $@this→leds→item($xi, $y);\n      }\n      #zqePS9acv24oQAAv code→set_led_color($state, $led);\n    }\n  }\n  #Fk0NFFrO2Dmk9ebf code→update_board;\n  meta private;\n  meta sync;\n}\n#bjedWwYaJ5lL7RnB\nvar button_a_handler : Event_Binding {\n  // {shim:}\n  transient = true;\n}\n#IJL62FT2o6Z3qp0h\nvar button_b_handler : Event_Binding {\n  // {shim:}\n  transient = true;\n}\n#qHCHrugZxRO2nVNu\nvar button_a\\u002bb_handler : Event_Binding {\n  // {shim:}\n  transient = true;\n}\n#V5epTckafYYQBUwI\naction clear_button_handler(#AP7KUiO86hEZMr3q name: String) {\n  #gVuKg3MqAoiA4KVd // {shim:}\n  #NducJY2YsouJ1sB4 $name := $name→trim(\" \\t\")→to_lower_case;\n  #ixzLqm9v9QnFaHCh if $name→equals(\"a\") `and` `not` data→button_a_handler→is_invalid then {\n    #n6oYNxkCTIM5W6gF data→button_a_handler→delete;\n    #xTH6y6KQyzUnfRMR data→button_a_handler→\\u25c8clear;\n  }\n  else { #dRbB4VOJ1mMUXJDY if $name→equals(\"b\") `and` `not` data→button_b_handler→is_invalid then {\n    #HGRHgdbJG1cj4P92 data→button_b_handler→delete;\n    #uJC4FJWjigU8QwyP data→button_b_handler→\\u25c8clear;\n  }\n  else { #DzKJuB7YBFPZWdo2 if $name→equals(\"a+b\") `and` `not` data→button_a\\u002bb_handler→is_invalid then {\n    #U99rMPfGl8rRBhMO data→button_a\\u002bb_handler→delete;\n    #NNQICBa0FzI7RLML data→button_a\\u002bb_handler→\\u25c8clear;\n  }\n  else { } } } \n  meta private;\n  meta sync;\n}\n#xIuuGWOiw4U0Z9E6\naction store_button_handler(#g5uKm1gGabuH7KEZ name: String, #xJnSEX7WxPHkhSK9 ev: Event_Binding) {\n  #ASAbZc9j0bH7hBmb // {shim:}\n  #Ccq6Wak9K4PcvMqn $name := $name→trim(\" \\t\")→to_lower_case;\n  #Z1idpGSDuTaD2SSS if $name→equals(\"a\") then {\n    #J2yZk3X9x4MJfzt2 data→button_a_handler := $ev;\n  }\n  else { #lFO5umVrdo8N5w8X if $name→equals(\"b\") then {\n    #fnPL4RqMQzhCa7MH data→button_b_handler := $ev;\n  }\n  else {\n    #bLLkTrQExLjukL2V data→button_a\\u002bb_handler := $ev;\n  }\n  } \n  meta private;\n  meta sync;\n}\n#w9lZwJwDJADMNaZY\naction test_forever_register() {\n  #AmcV6THL0zdDxQzd // {shim:}\n  #Dm8UnLZUSyFqCxQX code→\\_libinit;\n  #SJAOh2GVk4zGZC44 code→forever;\n  #xqAh9AiRPBjVq6zh where `implicit` \\_body\\_() {\n    #GCK4VF02k25NXDM1 code→on_button_pressed(\"A\");\n    #twPwQi6XciXsdKjV where `implicit` \\_body\\_() {\n      #xGqyp2mdNkIqsTei code→show_number(math→random(10), 150);\n      #Gjbrkpxz5Tx3vyYN code→pause(1000);\n    }\n  }\n  meta private;\n  meta test;\n}\n#M0RCMbzlj2nj2BI7\naction test_pixel() {\n  #BLv6aL7UZr2cqEfT // {shim:}\n  #chGi9E55itfMAUs2 code→\\_libinit;\n  #SGt5eFaUBCizckCO $img := code→create_image(\"0 1 0 0 0 1 1 1 1 1\\n0 1 0 0 0 0 0 0 0 1\\n0 1 0 0 0 0 0 0 0 1\\n0 1 0 0 0 0 0 0 0 1\\n0 1 0 0 0 0 0 0 0 1\");\n  #rsIi4z5FSvXfEUbY $img→set_pixel(8, 0, false);\n  #T5DS5wjBwJlWRDyx $img→scroll_image(1, 400);\n  #xRajHiRTS3WVG9eQ // grey scale\n  #x6EPsTOBC5Stwv2i code→set_display_mode(\"greyscale\");\n  #YxThP9Zpstv3c0GU for 0 ≤ j < 5 do {\n    #ctiRFQOKYtpl58Rb $img→set_pixel_brightness(9, $j, math→pow(2, $j));\n  }\n  #v7M3MZfrjb3ul0Hz $img→plot_image(5);\n  meta private;\n  meta test;\n}\n#dZXKhO253wRyy8ss\naction test_font() {\n  #x20Hxqj4AQlvhYrW // {shim:}\n  #RBMl9hru9FSnsMFJ code→\\_libinit;\n  #a4OniIrwDB2fZ6dL $s := \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n  #tNdflz42yjWVg2UE code→show_string($s, 150);\n  meta private;\n  meta test;\n}\n#XbUu3qU1GclXjcRC\naction add_button(#xbqiUfNdjVfd4IMd text: String, #xJ3n1woMhZjnYNMw @action: Action) {\n  #USGmD7z2Nxm3G1td // Adds a button to the simulator.\n  #xReX55Ndxhgd8Uwr // {shim:TD_NOOP}\n  #gzUEASG6jJjnjORe // {weight:0}\n  #sz5shPxAJMrHPGcv // {namespace:simulator}\n  #jurR2bpFoTez7gQd // {action:libsonly}\n  #Q7KxeKWW1ylQ4sof if data→button_extra→is_invalid then {\n    #xWU42PbYiXq0h2cU code→create_extra_button($text→to_upper_case, $@action);\n  }\n  meta sync;\n}\n#QofbsqCZ4V5hSSrX\naction create_extra_button(#mncq4kd55AAXrAl3 text: String, #xGKSnvw1vCIbFYyj @action: Action) {\n  #jiT2zrVOmtzOZRYr // {shim:}\n  #HqdXAvEWpftML4hA data→button_extra_inner := code→create_circle(412, 532);\n  #gPk3T8UBTWjSz8zn data→button_extra_inner→set_color(colors→black);\n  #nxreVM8UIUMg1VXW data→button_extra_inner→set_gradient(false);\n  #JGtXNV2yHEji6Ayn data→button_extra := code→create_circle(data→button_extra_inner→x, data→button_extra_inner→y);\n  #b4DhmqP47SNxK8OP data→button_extra→opacity := 0;\n  #SCO4V6exNc28sn95 data→button_extra→width := 84;\n  #LxUwVuZCSl3qrgQ3 data→button_extra→height := 84;\n  #xqljf58UOeHk2y2P data→button_extra→x := data→button_extra_inner→x;\n  #xzo2t6FZjFtPhcKY data→button_extra→y := data→button_extra_inner→y;\n  #pH0k8Ne3XCu2mscE data→button_extra→on_touch_down($touch_down);\n  #ePOpGNP0Ap24XGBk where touch_down(x: Number, y: Number) {\n    #gNN8eW7NKIACfyvx data→button_extra_inner→set_color(colors→orange);\n    #xWdiZFKt6469IQNI $@action→run;\n  }\n  #mFclEPh38W3L4nnR data→button_extra→on_touch_up($touch_up);\n  #xKbGq1XMVS7PZIF9 where touch_up(x: Number, y: Number) {\n    #BMGWQpXAUNqygWVm data→button_extra_inner→set_color(colors→black);\n  }\n  #cYszk5cTaxeH5lMn $btn_text := data→board→create_text(100, 40, 20, $text);\n  #pkRVEwItpfnOPHpL $btn_text→set_color(colors→black);\n  #xhVuttTeTSZXMEca $btn_text→fit_text;\n  #KuRLFeiYpX8ibIt4 $btn_text→x := data→button_extra→x;\n  #zIBuDWJcjBM32Yp4 $btn_text→@bottom := data→button_extra→@top + 10;\n  meta private;\n  meta sync;\n}\n#jKmZy7vMlzUPALmn\nvar button_extra_inner : Sprite {\n  // {shim:}\n  transient = true;\n}\n#cXnqrj241SpxUMwF\nvar button_extra : Sprite {\n  // {shim:}\n  transient = true;\n}\n#VIbUURZHhKQK2SyZ\naction reset() {\n  #xvUvNkHFq7GZFMhL // Resets the BBC micro:bit.\n  #lHHGwpOT14CKYow4 // {weight:1}\n  #bcD9ZyddSMemVKZU // {namespace:control}\n  #O4TGFHEORPMYt8Sp // {shim:uBit.reset}\n  #InYaIalKOaSAg5nh // {help:functions/reset}\n  #bn3n2t5DLBeqS63D app→restart(\"\");\n  meta sync;\n}\n#YEzwn1KNBHbFPNUs\naction test_reset() {\n  #S2osQorpwX0Xn5kn // {shim:}\n  #GSnZiIZY6ZZfqTYY code→\\_libinit;\n  #IPnXPhzZKv8j2H2j code→show_string(\"A\", 150);\n  #ZFn2kKadUEmlY4Wk code→reset;\n  meta private;\n  meta test;\n}\n#TpQcQgKdAFw5Pqho\naction test_show_number() {\n  #lkVsRQg2Y57CbEHt // {shim:}\n  #xlVV048e6Gv5qT80 code→\\_libinit;\n  #pJFrIdojNwmiVXeG code→show_number(0, 150);\n  #sOilRBUMeGHbS5iq code→show_number(1, 150);\n  #XiW64jN2AhkgUI8q code→show_number(2, 150);\n  meta private;\n  meta test;\n}\n#jFmD5xkFyWwpGTFt\naction test_plot_leds() {\n  #uv2qjBz92QKG6jb4 // {shim:}\n  #xWC0vpIb0g6zkauY code→\\_libinit;\n  #HAPp3WJOXLG3Hd5l code→plot_leds(\"0 0 0 0 0\\n0 1 0 1 0\\n0 0 1 0 0\\n0 0 0 1 0\\n1 0 0 0 0\");\n  #kBUen1jy0k4wINSh code→pause(1000);\n  #xekvRRnvmhQHiMBK code→plot_leds(\"0 0 0 0 1\\n0 1 0 1 0\\n0 0 1 0 0\\n0 0 0 1 0\\n0 0 0 0 0\");\n  #xzmqbCGIOoCg2MsE code→pause(1000);\n  #xFXsetNa4Qhcgcja $img := code→create_image(\"0 0 0 0 0 0 0 0 0 0\\n0 0 1 0 0 0 0 0 0 0\\n0 1 1 1 0 0 0 1 0 0\\n0 0 1 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\");\n  #x7RQ0L8v7jnJDs4P $img→plot_frame(1);\n  #fL5VgMaVovLc2kVR code→pause(1000);\n  #BwpLTSufIn4ypBn1 code→show_leds(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 1 1 0\\n0 0 0 0 0\\n0 0 0 0 0\", 400);\n  #ibZy2FI2FCKOxqoF code→show_leds(\"0 0 0 0 0\\n0 0 0 0 0\\n0 1 1 1 0\\n0 0 0 0 0\\n0 0 0 0 0\", 400);\n  #YncCIVFUM28UddtK code→show_leds(\"0 0 0 0 0\\n0 0 0 0 0\\n1 1 1 1 1\\n0 0 0 0 0\\n0 0 0 0 0\", 800);\n  meta private;\n  meta test;\n}\n#Z6Z2iGq64Ec1fuTh\naction warning(#dJIbhLazNunQ2Pqc message: String) {\n  #tzFPXXJ2C0Ha4ERR // Warns the user about a potential usage issue with the current code.\n  #wTj93HfGOCA1RRHP // {shim:TD_NOOP}\n  #xn2tBmso4Kss6D00 // {namespace:simulator}\n  #xOgOSqT4yi1RgSdZ // {weight:0}\n  #keritj886fLnv3fw // {action:libsonly}\n  #ukJpRgVrsYCsFdrj $editor := app→editor;\n  #gwhUA7MFzDe9jIUB if `not` $editor→is_invalid `and` `not` $message→is_invalid `and` `not` $message→is_empty then {\n    #xyn4eh9QnXz4pLxl $editor→annotate_caller(\"warning\", $message);\n  }\n  meta sync;\n}\n#tPLU5ZwYXNcXCDk3\naction analog_set_period(#x0BXJqvN5uf5JIh2 pin: String, #amJYJbzMJzlrlol3 micros: Number) {\n  #D3DLwyTrT2wKkoVN // Configures the Pulse-width modulation (PWM) of the analog output to the given value in **microseconds** or `1/1000` milliseconds.\n  #fUdLXCrX4rNeuilQ // If this pin is not configured as an analog output (using `analog write pin`), the operation has no effect.\n  #DbpdkxM4nUP2sVga // {shim:micro_bit::setAnalogPeriodUs}\n  #xyHbQm9j2k6iXq4P // {namespace:pins}\n  #OBcAFCK2Q2DfudpZ // {help:functions/analog-set-period}\n  #PAYMs0BDD8RbLR3B // {weight:10}\n  #SqhPms4IXETastFm // {enum:name:P0=uBit.io.P0,P1=uBit.io.P1,P2=uBit.io.P2}\n  #Xh232b04YquKwayo // {hints:micros:20000}\n  meta sync;\n}\n#AuigaLeUb4929mNA\naction analog_set_pitch_pin(#xpU1U000JWEY2Boq name: String) {\n  #xj4o22Omk1EIaC9O // Sets the pin used when using `pins->analog pitch`.\n  #p3pMqgSnQxlKKpTd // {shim:micro_bit::enablePitch}\n  #YOZY4h2Snemy2Ssv // {namespace:pins}\n  #ksrlzJbUsmtEkaBH // {help:functions/analog-set-pitch}\n  #xQhxWqWeqz22iboM // {weight:12}\n  #vKrvmC4KbTx4UrT9 // {enum:name:P0=uBit.io.P0,P1=uBit.io.P1,P2=uBit.io.P2}\n  #WHQMX8TGwNk4rHSx data→pitch_pin := $name;\n  meta sync;\n}\n#gEmhFkaGb62VAwjT\naction analog_pitch(#xicUA6rVANK5Hpya frequency: Number, #EOcY1jATp3Ldw16o ms: Number) {\n  #xFJhXD0ijs00YMjd // Emits a Pulse-width modulation (PWM) signal to the current pitch pin. Use `analog set pitch pin` to define the pitch pin.\n  #SuwCvUifdY38to4S // {shim:micro_bit::pitch}\n  #Mh0Oeb4E8cK3WWWW // {namespace:pins}\n  #xGfz4I04h2bsO91l // {help:functions/analog-pitch}\n  #xEGCJ6YyP3Gaw9ug // {weight:14}\n  #Nv7yTShmVzRRmckP // {hints:frequency:440}\n  #lyVvmxzXMSk4YDmd // {hints:ms:500}\n  #fx1pQM2jYhWeMW8F if data→pitch_pin→is_invalid `or` data→pitch_pin→is_empty then {\n    #bqUsIek5pKDTe6Pe code→warning(\"pitch pin not set\");\n    #ifW5htAtZseohisz `return` ;\n  }\n  #wunHmKjgrpZ9byII if $frequency ≤ 0 then {\n    #xXcOYe7q4TdBfOsz media→tone(0, 1);\n    #H9Y66i52F23oOeSD `return` ;\n  }\n  #qvLwajJDb3fREXyj if $ms ≤ 0 then {\n    #xHlePNztv5JpESZp media→tone($frequency, 1);\n  }\n  else {\n    #xbFhJ20GSASivmak $secs := $ms / 1000;\n    #c9RnAE2uzKh6Cqax media→play_note($frequency, 1, $secs);\n    #Bdrwg0EArm46eHAx time→sleep($secs);\n  }\n}\n#KgNK732SuRLWRKOO\nvar pitch_pin : String {\n  // {shim:}\n  transient = true;\n}\n#f01xEP7flwdYeYJq\naction test_pitch() {\n  #YTd12LqhKZ4TaZc2 // {shim:}\n  #seC2W2nEHKYskZWx code→\\_libinit;\n  #ZIUeBcsS2CnLOyAX code→analog_set_pitch_pin(\"P0\");\n  #HgqlbD1gvQviXx8z for 0 ≤ i < 10 do {\n    #U0MwRtD11cCn27TG code→analog_pitch(400 + $i * 100, 1000);\n  }\n  #dDCdl0EzpaRtSQeM code→pause(1000);\n  #xFHA2N0ccuekrNB6 code→analog_write_pin(\"P0\", 512);\n  #AgpJ3he45LX41vYs for 0 ≤ j < 10 do {\n    #VA5aDXkUjZHNPhD9 code→analog_set_period(\"P0\", 5000 - $j * 100);\n    #zq5NuKyDLAFXhWKl code→pause(500);\n  }\n  meta private;\n  meta test;\n}\n#Homv4VKEXNUbTAb4\naction plot_frame(#xYYuLhKmEWIzIX1x @this: * Image, #AJWLlSJwoTdXgT9i index: Number) {\n  #fCfOCntjWE4DNymC // Draws the ``index``-th frame of the image on the screen.\n  #xasY934N29G7WBjg // {help:functions/plot-frame}\n  #wQpnycOYR16SMb15 // {namespace:image}\n  #OFsNMj5vqD4C4rm4 // {weight:65}\n  #uM7fnoqbHXxpqA12 $@this→show_image(5 * $index);\n}\n#x07I9YOUT6XAu5Ky\naction show_leds(#Agy1tNVQeIcg2pFD leds: String, #H23Wq0aPH08LnwS6 ms: Number) {\n  #a1ZU6jET0rFURbW6 // Draws an image on the LED screen and pauses for the given milliseconds.\n  #rah4E4gr6b4ZXnki // {help:functions/show-leds}\n  #q2YahTUs7lFN2x05 // {weight:95}\n  #x8YEphMMwGJeCtZ4 // {namespace:basic}\n  #M7D8GVVyvj4k5vxo // {language:leds:bitframe}\n  #DGgSDJzlKoPX3ljp // {hints:ms:400,1000}\n  #WkpvN4lkB72SdNex // {shim:micro_bit::showLeds}\n  #xxOvJbn2Cq3yEODu $img := code→parse_image($leds);\n  #KrQe1YwMxdRhx6GZ $img→show_image(0);\n  #cvrrG22FPWn6MsSk code→pause($ms);\n}\n#t4AKY0PCv6CBzZ12\naction play_tone(#zExdWNZANFRC5nyu frequency: Number, #Ulhn7NcyJhmRukqz ms: Number) {\n  #RQfvAHuFsy3gBARR // Plays a tone through pin ``P0`` for the given duration.\n  #cyajATGMs74bzPW7 // {help:functions/play-tone}\n  #xQkMwqu2Oa6nrGiE // {namespace:music}\n  #ZTzyTPXsUFIyRaeU // {weight:90}\n  #dIQ0LIbfqHjwOyCO // {hints:frequency:440}\n  #xa04A5Hpj2lPJQ2M // {hints:ms:1000}\n  #L4roLQqOhkhZifAC code→analog_set_pitch_pin(\"P0\");\n  #DGH7JMwHU0ka6VR6 code→analog_pitch($frequency, $ms);\n}\n#q80UeIEQE4foqp5T\naction test_music() {\n  #ADNnaMD8sbQ092vx // {shim:}\n  #cnnl5nwTO8MNlzG2 code→\\_libinit;\n  #bt7ZIZfVg1aOLLEt code→play_tone(440, 1000);\n  #wBYXZY7x529yWQG4 code→play_tone(480, 1000);\n  #nq42JFfrOqGl2QKO code→play_tone(520, 1000);\n  #Cybr2QXkXV2ir6l6 code→pause(2000);\n  #qQ8ZNMWIJJXtutNM code→play_tone(code→note_frequency(\"C\"), 1000);\n  #mneI19aKf1ds9SjX code→play_tone(code→note_frequency(\"D\"), 1000);\n  #xbL5os2MHu5S7uYp code→play_tone(code→note_frequency(\"E\"), 1000);\n  #PVLpMp4WMqlphpIr code→play_tone(code→note_frequency(\"F\"), 1000);\n  #xZjE4yULP8q68zot code→play_tone(code→note_frequency(\"G\"), 1000);\n  #tupQgO33hsOHShvY code→play_tone(code→note_frequency(\"A\"), 1000);\n  #MPE7BMMK24O3cpKc code→play_tone(code→note_frequency(\"B\"), 1000);\n  meta private;\n  meta test;\n}\n#sOGTRmXpnMKLLTtr\naction note_frequency(#G5aP8OToIirHnSrm name: String) returns(#icSfcpgaQI61R31i frequency: Number) {\n  #MBVL4W7GtZth7c8Q // Gets the frequency of a note.\n  #yhvDBEaWWEbLTw4a // {enum:name:C=262,C#=277,D=294,Eb=311,E=330,F=349,F#=370,G=392,G#=415,A=440,Bb=466,B=494,C3=131,C#3=139,D3=147,Eb3=156,E3=165,F3=175,F#3=185,G3=196,G#3=208,A3=220,Bb3=233,B3=247,C4=262,C#4=277,D4=294,Eb4=311,E4=330,F4=349,F#4=370,G4=392,G#4=415,A4=440,Bb4=466,B4=494,C5=523,C#5=555,D5=587,Eb5=622,E5=659,F5=698,F#5=740,G5=784,G#5=831,A5=880,Bb5=932,B5=989}\n  #CEuFbUNDPjFBgtrO // {shim:TD_ID}\n  #xhQC7C2c52WDwr8z // {namespace:music}\n  #iXmcRdXDoHI3JVod // {weight:40}\n  #x3L2s27YTHChFBvT // {help:functions/note-frequency}\n  #cY7oVDRa2q52ktSU $f := art→notetable\\u002esjon→number($name→to_upper_case→trim(\" \\t\"));\n  #fxhp0PqdX2BUGW4N if `not` $f→is_invalid then {\n    #x0GIA0PDAM9yE8tE `return` $f;\n  }\n  else {\n    #STVoohtLA3YlXWin code→warning(\"Sorry, we don\\'t know about this note.\");\n    #SaL0iE3iTWdYkP1k `return` 0;\n  }\n  meta sync;\n}\n#z4gSyUfMQnLVFUce\nvar notetable\\u002esjon : Json_Object {\n  // {shim:}\n  is\\_resource = true;\n  url = \"data:text/plain;base64,ewogICAgIkMiOjI2MiwKICAgICJDIyI6Mjc3LAogICAgIkQiOjI5NCwKICAgICJFQiI6MzExLAogICAgIkUiOjMzMCwKICAgICJGIjozNDksCiAgICAiRiMiOjM3MCwKICAgICJHIjozOTIsCiAgICAiRyMiOjQxNSwKICAgICJBIjo0NDAsCiAgICAiQkIiOjQ2NiwKICAgICJCIjo0OTQsCiAgICAKICAgICJDMyI6MTMxLAogICAgIkMjMyI6MTM5LAogICAgIkQzIjoxNDcsCiAgICAiRUIzIjoxNTYsCiAgICAiRTMiOjE2NSwKICAgICJGMyI6MTc1LAogICAgIkYjMyI6MTg1LAogICAgIkczIjoxOTYsCiAgICAiRyMzIjoyMDgsCiAgICAiQTMiOjIyMCwKICAgICJCQjMiOjIzMywKICAgICJCMyI6MjQ3LAogICAgCiAgICAiQzQiOjI2MiwKICAgICJDIzQiOjI3NywKICAgICJENCI6Mjk0LAogICAgIkVCNCI6MzExLAogICAgIkU0IjozMzAsCiAgICAiRjQiOjM0OSwKICAgICJGIzQiOjM3MCwKICAgICJHNCI6MzkyLAogICAgIkcjNCI6NDE1LAogICAgIkE0Ijo0NDAsCiAgICAiQkI0Ijo0NjYsCiAgICAiQjQiOjQ5NCwKICAgIAogICAgIkM1Ijo1MjMsCiAgICAiQyM1Ijo1NTUsCiAgICAiRDUiOjU4NywKICAgICJFQjUiOjYyMiwKICAgICJFNSI6NjU5LAogICAgIkY1Ijo2OTgsCiAgICAiRiM1Ijo3NDAsCiAgICAiRzUiOjc4NCwKICAgICJHIzUiOjgzMSwKICAgICJBNSI6ODgwLAogICAgIkJCNSI6OTMyLAogICAgIkI1Ijo5ODkKfQ==\";\n  transient = true;\n}\n#xUYxOeKj6LoMvF7P\naction plot_leds(#WQt3HgKnNR1dkKwC leds: String) {\n  #jJiF4GeW3y5L8ZvJ // Draws an image on the LED screen.\n  #xeTbykuSWaF0nr9g // {help:functions/plot-leds}\n  #w9yQC2gSVG43NHs2 // {weight:80}\n  #C2NdzXO4YdWRnaEW // {namespace:basic}\n  #xCxDF5VU01h01Yh6 // {language:leds:bitframe}\n  #BA24IxYmXqkPDxLQ // {shim:micro_bit::plotLeds}\n  #cs0dZUvcOoT2Tbj4 $img := code→parse_image($leds);\n  #dfutR56803BeCdLx code→render_image($img, 0);\n  meta sync;\n}\n#CMiSgO7T4A4heu2z\naction plot_image(#OrAkEEB8qLoT4Mzd @this: * Image, #HXxAUi2ymf5FqRzN x_offset: Number) {\n  #c8b4vsUEisjXLh2u // Plots a frame from the image at offset ``x offset``.\n  #rVAalBbYMFEqtpEC // {help:functions/plot-image}\n  #L9R3IVcl2KNAEQL2 // {namespace:image}\n  #HThvzxSJtOTHengS // {namespace:led}\n  #xhU09kichmIGxHZV // {weight:69}\n  #Kl4zmpg9HVwUey6O // {hints:x offset:0,5,10}\n  #VfYDTi9V6fB4yWKi // {shim:micro_bit::plotImage}\n  #M8USzI3sH1AvswWQ code→render_image($@this, $x_offset);\n  meta sync;\n}\n#veAWzsaQ3mAeSOvA\naction set_theme(#cJ3VYThrkFH2nnon name: String) {\n  #x5CwjchVbMRh3uoA // {shim:}\n  #f2xg2qfKJ7v1Lq5x if $name→is_empty then {\n    #SLALoF6RT42i7Ejp // fetch theme from settings\n    #l3lhYG6Iq5hifmUk $default_theme := app→env→temporary_setting(\"bbc micro:bit theme\");\n    #xwWysIAEYBf7i4gW if $default_theme→is_invalid then {\n      #H4LeHpMBwx4OkSKf $default_theme := \"red\";\n    }\n    #uH4b8fL22EjTKz0h $name := $default_theme;\n  }\n  #e4B1ZURot54YEGiY data→current_theme := $name;\n  #e4Zsrvf4HUVvvwhd app→env→set_temporary_setting(\"bbc micro:bit theme\", $name);\n  #p5briRb9oTIasn8h data→led_off_color := colors→transparent;\n  #a2k5eTy9hRQcxe46 data→board_color := colors→from_rgb(0.85, 0.95, 0.85);\n  #qyDWsRI4ytHtFd8g $leds_background := colors→black;\n  #evzUYi83YPBOBMlr $markup := art→board\\u002esvg;\n  #HFTjMO2guOv7Rm2w if data→current_theme→equals(\"blue\") then {\n    #e1DeXSmMGEeWOuR8 data→led_on_color := colors→blue;\n    #thMgho7JD3MYX4td data→back_led_color := \"#aaa\" →to_color;\n    #waG9f7vlgr57D4RL data→left_eye→color := \"#273EE2\" →to_color;\n  }\n  else {\n    #fu62b3psxXKSTvpr $s := art→boardcolors\\u002ejson→at(math→random(art→boardcolors\\u002ejson→count))→to_string;\n    #E12o9ZhEzBrBdaxR $markup := $markup→replace(\"#273EE2\", $s)→replace(\"#D4AF37\", \"#989898\")→replace(\"#F9F9F9\", \"#000\");\n    #NAj8gc9TnnnW95KJ data→led_on_color := \"#ff7f7f\" →to_color;\n    #PDctHCuC00kxArHt data→back_led_color := \"#202020\" →to_color;\n    #HzF84IyeFuNZEN0S data→left_eye→color := $s→to_color;\n  }\n  #o0Sg6ZIdqIY2MrO7 data→right_eye→color := data→left_eye→color;\n  #DflzlS5FVtxTtiv3 data→picture→blend_svg($markup, 0, 0, 612, 498, 0);\n  #y83CLwRPgvZv68BM for 0 ≤ i < data→back_leds→count do {\n    #j0NqowF1gJYZbFxY $sprite := data→back_leds→at($i);\n    #uUA4sC8H8ziHanbz $sprite→set_color(data→back_led_color);\n  }\n  #xLIqmgbYCB5fxAPi for 0 ≤ j < data→leds→count do {\n    #gxG2ZfmOxSI7272S $sp := data→leds→at($j);\n    #xCqSX9GgsvwAdse6 if `not` $sp→color→equals(colors→transparent) then {\n      #KKuXMjFU6exhXzyG $sp→color := data→led_on_color;\n    }\n  }\n  meta private;\n  meta sync;\n}\n#CIQ4veOCB3b54xEF\nvar back_led_color : Color {\n  // {shim:}\n  transient = true;\n}\n#pKuVW9VLAsoLATs1\nvar current_theme : String {\n  // {shim:}\n  transient = true;\n}\n#ZcRIUJagQtw2kOc3\naction init_theme() {\n  #xG4G6cfMaEbWqlM9 // {shim:}\n  #EkEHXeeTIhNElM4z data→theme_button_inner := code→create_circle(data→board→width - 64, 54);\n  #gvxgpbcF2Vh2n8p5 data→theme_button_inner→set_color(colors→white);\n  #GFgmQ44OMr4dNwq4 data→theme_button := code→create_circle(data→theme_button_inner→x, data→theme_button_inner→y);\n  #Z29h69s2yrXbBYqT data→theme_button→opacity := 0;\n  #xAwSmgeMsxy2mo2m data→theme_button→width := 112;\n  #GbVT219kzML5zCRs data→theme_button→height := 112;\n  #c0AwY5ROsgtG2Knd data→theme_button→x := data→theme_button_inner→x;\n  #sQR4SSgpdHIVYt3Q data→theme_button→y := data→theme_button_inner→y;\n  #B2CwAWAZnJLS03hT data→theme_button_text := data→board→create_text(100, 40, 20, \"THEME\");\n  #D3Q0VYJTEsOeCSSW data→theme_button_text→set_color(colors→white);\n  #xmkTU26RbeIFb2Jc data→theme_button_text→fit_text;\n  #e4SNFryMf0J07YJC data→theme_button_text→x := data→theme_button_inner→x;\n  #tgvI4UL0HsxskMLH data→theme_button_text→y := data→theme_button_inner→y - 34;\n  #LzHTvRzGmrVF5uqf data→theme_button→on_touch_down($touch_down);\n  #j2kGPOFC3VpxGuvH where touch_down(x: Number, y: Number) {\n    #zUofeW9VI4OAw6vA if data→current_theme→equals(\"red\") then {\n      #KyZyX0ozrSc7lt7e code→set_theme(\"blue\");\n    }\n    else {\n      #ihyfyE1odrtrY2mB code→set_theme(\"red\");\n    }\n    #Ekmnrj2o99FWFUDY code→update_board;\n  }\n  meta private;\n  meta sync;\n}\n#xdhVzgfGv2tKJXiC\nvar theme_button_inner : Sprite {\n  // {shim:}\n  transient = true;\n}\n#xzT4DM36ZVg22KDW\nvar padding : Number {\n  // {shim:}\n  transient = true;\n}\n#IumTSFIHhbwxn3H4\nvar left : Number {\n  // {shim:}\n  transient = true;\n}\n#ySs9JtsfD489KWqC\nvar @top : Number {\n  // {shim:}\n  transient = true;\n}\n#R4ySKAi8lAt3lPo4\nvar picture : Picture {\n  // {shim:}\n  transient = true;\n}\n#kgAKd05Qka2tkxaX\nvar theme_button_text : Sprite {\n  // {shim:}\n  transient = true;\n}\n#xxmFVVtdBqvw9AQy\naction temperature() returns(#xBZ4CpbFL4CvRApl temp: Number) {\n  #iJmxeqmb8usTYoBE // Gets the temperature in Celsius degrees (°C).\n  #xbkpE9efBEU3vReG // {weight:70}\n  #trqBmVFo8y4PREFi // {help:functions/temperature}\n  #ettU9cm9h4KGIsTs // {namespace:input}\n  #fokjMzX103zh4OIf // {shim:uBit.thermometer.getTemperature}\n  #w2zqRCAFyOt1oUWQ `return` 21;\n  meta sync;\n}\n#Vl55kdKb5D1kgSyk\naction stop_animation() {\n  #ATIWVp4tTwDxB4Bp // Cancels the current animation and clears other pending animations.\n  #d4LAQbEUe7uRZJAS // {namespace:led}\n  #Ix2qKgTtbnPMed6L // {weight:10}\n  #xbNtuxocqqClsImw // {shim:uBit.display.stopAnimation}\n  #PNe2ZX3bc32uAfMh // {help:functions/stop-animation}\n  #BDAdp8kwFZFXSYHu data→current_animation := data→current_animation + 1;\n  #gQ12sQ2hZdAouv1m records→Animation_table→clear;\n  meta sync;\n}\n#BVGhpbmcgdGFibGUa\ntable Animation {\n  // {shim:}\n  type = \"Table\";\n  persistent = false;\n  fields {\n    #e2tjt3wkHvRy11YN fn : Action\n  }\n}\n#zhNkP3CWz74bNvt9\naction animation_worker() {\n  #Cymc1fF7P43K4gho // {shim:}\n  #twUDLvYsbqiIiLNp while true do {\n    #Z12yqFGgOP8zzrgk $anim := records→Animation_table→row_at(0);\n    #TCtfj65FNI3BQu5k if `not` $anim→is_invalid then {\n      #x42IFPmOy8OMd94D $anim→fn→run;\n      #xwyIlpRntu8n4vEo $anim→delete_row;\n    }\n    else {\n      #xZksFGo4EkNM0dh8 records→Animation_table→wait_for_update;\n    }\n  }\n  meta private;\n}\n#bMFwG1RBnkCrq3IP\naction queue_animation_and_wait(#lZbLVMHV26CI2Azb body: Action) {\n  #pSk1SAXTgEkwXI52 // {shim:}\n  #y91tnga0ipumHs77 $anim := records→Animation_table→add_row;\n  #W4ekNcG32RwDFN64 $anim→fn := $body;\n  #VyXEejIbvlKT85x0 while true do {\n    #r2yPaxh1j83WPSQq if $anim→is_deleted then {\n      #lZZj1cN4JVqKGeD3 `break` ;\n    }\n    #x64FBWkpzD1lr3ys records→Animation_table→wait_for_update;\n  }\n  meta private;\n}\n#xfKBe2N4OpGoOMjI\naction test_animations() {\n  #C28AVJ2OeeVO9UJB // {shim:}\n  #NAatOLGkWDaNdLSJ code→\\_libinit;\n  #xM8mK0o47XZ2xL4w code→on_button_pressed(\"A\");\n  #Ec9RhvIua6hxfiau where `implicit` \\_body\\_() {\n    #xxDjfJsq8yJ2hJZg code→show_string(\"A\", 150);\n  }\n  #dkWr85kOaggITn84 code→on_button_pressed(\"B\");\n  #Ujf724J59Y9Agp4u where `implicit` \\_body\\_() {\n    #fkIWDo3j3WYiNeTE code→show_string(\"B\", 150);\n  }\n  meta private;\n  meta test;\n}\n#vtW004u24giFHFCF\naction show_frame(#so5UArm5bvzzbO7Q img: * Image, #wbgk1lJLlqXDa2l4 frame: Number) {\n  #ul6aa2q9FEngpuGm // Shows a particular frame of the image strip.\n  #FO4MMEEFSc9G0nTb // {namespace:image}\n  #gCr4tw5bcjlK72W2 // {weight:70}\n  #xA18S6STfkQQmHSO // {help:functions/show-frame}\n  #RqxUSeIfDyXF0l5K $img→show_image($frame * 5);\n}\n#jK3Ut2qwQC0bZ07k\ntable Event_Bus {\n  // {shim:}\n  type = \"Table\";\n  persistent = false;\n  fields {\n    #kng9nuProLg6HpFo fn : Action\n    #lz2qarlZRUAVl0SD name : String\n  }\n}\n#xQHQZkhjqzpE4CRi\naction event_bus_worker(#VnWE2Q9sB2A5uIXD name: String) {\n  #xDyM0UomTSCQXKSV // {shim:}\n  #HakK0IQSqWKY8zju while true do {\n    #B2MyaPSqynIjfXO5 code→pause(1);\n    #Zg9hZK25Zv1Ub2Ym $ev := code→first_event($name);\n    #lN4KZZuuN9p2paSM if `not` $ev→is_invalid then {\n      #qUZz8iwjSjiyyavq $ev→fn→run;\n      #E7aHvwM2U423dBK6 $ev→delete_row;\n    }\n    else {\n      #P594Nj69PCQ9z45m records→Event_Bus_table→wait_for_update;\n    }\n  }\n  meta private;\n}\n#uBLXg1puXSO4QzoW\naction queue_event(#ErQcVVIPwKO622FK body: Action, #x6jst5KZQ5V4sFOr name: String) {\n  #TvMY9sg6cL0LP4R4 // Queues an event to be executed in its own queue. **simulator only**.\n  #G4HX55fpvnZloONU // {namespace:simulator}\n  #uUvNaoO65YqMtQTe // {action:libsonly}\n  #x6pUJ4oEgynKekYO // {shim:TD_NOOP}\n  #NpFfWiYSSrNXvvQY $c := records→Event_Bus_table→count;\n  #xv0tUVTZQbNE3PW4 if $c < 10 then {\n    #mbqwhgLr24hPftS9 $ev := records→Event_Bus_table→add_row;\n    #Guj24KBD912FcSYv $ev→name := $name;\n    #OvyZqeICJJ2sQbR4 $ev→fn := $body;\n    #J6B4LYyWUMTT4MXF data→logger→debug(\"queued \" ∥ $name);\n    #N8pNCkiRuu6GYHAN if data→event_queues→at($name)→is_invalid then {\n      #xSpLhvkqOzz2Y2Xp data→event_queues→set_at($name, \"on\");\n      #Dcn5h1NYD742two9 `async` code→event_bus_worker($name);\n      #VtF252bO2GPFA1zp data→logger→debug(\"started queue for \" ∥ $name);\n    }\n  }\n  else {\n    #SzvR3GyWF2k4aEW8 data→logger→debug(\"skipped event \" ∥ $name ∥ \", bus full\");\n  }\n  meta sync;\n}\n#HHvqKQqbQ5Uea74Z\nvar board\\u002esvg : String {\n  is\\_resource = true;\n  url = \"data:text/plain;base64,PHN2ZyB2ZXJzaW9uPSIxLjEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHg9IjBweCIgeT0iMHB4IgoJIHZpZXdCb3g9IjAgMCA0OTggNDA2IiBlbmFibGUtYmFja2dyb3VuZD0ibmV3IDAgMCA0OTggNDA2IiB3aWR0aD0iNDk4IiBoZWlnaHQ9IjQwNiIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSI+CjxnPgoJPHBhdGggZD0iTTQ5OCwzMS45QzQ5OCwxNC4zLDQ4My43LDAsNDY2LjEsMEgzMS45QzE0LjMsMCwwLDE0LjMsMCwzMS45djM0Mi4yQzAsMzkxLjcsMTQuMyw0MDYsMzEuOSw0MDZoNDM0LjIKCQljMTcuNiwwLDMxLjktMTQuMywzMS45LTMxLjlWMzEuOXogTTE0LjMsMjA2LjdjLTIuNywwLTQuOC0yLjItNC44LTQuOGMwLTIuNywyLjItNC44LDQuOC00LjhjMi43LDAsNC44LDIuMiw0LjgsNC44CgkJQzE5LjIsMjA0LjYsMTcsMjA2LjcsMTQuMywyMDYuN3ogTTQ4Ni4yLDIwNi43Yy0yLjcsMC00LjgtMi4yLTQuOC00LjhjMC0yLjcsMi4yLTQuOCw0LjgtNC44YzIuNywwLDQuOCwyLjIsNC44LDQuOAoJCUM0OTEsMjA0LjYsNDg4LjgsMjA2LjcsNDg2LjIsMjA2Ljd6Ii8+CgkJCTxwYXRoIGZpbGw9IiNENEFGMzciIGQ9Ik0wLDM1Ny43djE5LjJjMCwxMC44LDYuMiwyMC4yLDE0LjQsMjUuMnYtNDQuNEgweiIvPgoJCQk8cGF0aCBmaWxsPSIjRDRBRjM3IiBkPSJNNDgzLjYsNDAyYzguMi01LDE0LjQtMTQuNCwxNC40LTI1LjF2LTE5LjJoLTE0LjRWNDAyeiIvPgoJCTxyZWN0IHg9IjY2LjciIHk9IjM1Ni43IiBmaWxsPSIjRDRBRjM3IiB3aWR0aD0iOS4yIiBoZWlnaHQ9IjQ5LjMiLz4KCQk8cmVjdCB4PSI3OS4xIiB5PSIzNTYuNyIgZmlsbD0iI0Q0QUYzNyIgd2lkdGg9IjkuMiIgaGVpZ2h0PSI0OS4zIi8+CgkJPHJlY3QgeD0iOTEuNCIgeT0iMzU2LjciIGZpbGw9IiNENEFGMzciIHdpZHRoPSI5LjIiIGhlaWdodD0iNDkuMyIvPgoJCTxyZWN0IHg9IjEwMy43IiB5PSIzNTYuNyIgZmlsbD0iI0Q0QUYzNyIgd2lkdGg9IjkuMiIgaGVpZ2h0PSI0OS4zIi8+CgkJPHJlY3QgeD0iMTY0LjMiIHk9IjM1Ni43IiBmaWxsPSIjRDRBRjM3IiB3aWR0aD0iMTAuMyIgaGVpZ2h0PSI0OS4zIi8+CgkJPHJlY3QgeD0iMTc2LjYiIHk9IjM1Ni43IiBmaWxsPSIjRDRBRjM3IiB3aWR0aD0iMTAuMyIgaGVpZ2h0PSI0OS4zIi8+CgkJPHJlY3QgeD0iMTg4LjkiIHk9IjM1Ni43IiBmaWxsPSIjRDRBRjM3IiB3aWR0aD0iMTAuMyIgaGVpZ2h0PSI0OS4zIi8+CgkJPHJlY3QgeD0iMjAxLjMiIHk9IjM1Ni43IiBmaWxsPSIjRDRBRjM3IiB3aWR0aD0iMTAuMyIgaGVpZ2h0PSI0OS4zIi8+CgkJPHJlY3QgeD0iMjEzLjYiIHk9IjM1Ni43IiBmaWxsPSIjRDRBRjM3IiB3aWR0aD0iMTAuMyIgaGVpZ2h0PSI0OS4zIi8+CgkJPHJlY3QgeD0iMjc1LjIiIHk9IjM1Ni43IiBmaWxsPSIjRDRBRjM3IiB3aWR0aD0iOS4yIiBoZWlnaHQ9IjQ5LjMiLz4KCQk8cmVjdCB4PSIyODcuNSIgeT0iMzU2LjciIGZpbGw9IiNENEFGMzciIHdpZHRoPSI5LjIiIGhlaWdodD0iNDkuMyIvPgoJCTxyZWN0IHg9IjI5OS44IiB5PSIzNTYuNyIgZmlsbD0iI0Q0QUYzNyIgd2lkdGg9IjkuMiIgaGVpZ2h0PSI0OS4zIi8+CgkJPHJlY3QgeD0iMzEyLjEiIHk9IjM1Ni43IiBmaWxsPSIjRDRBRjM3IiB3aWR0aD0iOS4yIiBoZWlnaHQ9IjQ5LjMiLz4KCQk8cmVjdCB4PSIzMjQuNSIgeT0iMzU2LjciIGZpbGw9IiNENEFGMzciIHdpZHRoPSI5LjIiIGhlaWdodD0iNDkuMyIvPgoJCTxyZWN0IHg9IjM4NS4xIiB5PSIzNTYuNyIgZmlsbD0iI0Q0QUYzNyIgd2lkdGg9IjEwLjMiIGhlaWdodD0iNDkuMyIvPgoJCTxyZWN0IHg9IjM5Ny40IiB5PSIzNTYuNyIgZmlsbD0iI0Q0QUYzNyIgd2lkdGg9IjEwLjMiIGhlaWdodD0iNDkuMyIvPgoJCTxyZWN0IHg9IjQwOS43IiB5PSIzNTYuNyIgZmlsbD0iI0Q0QUYzNyIgd2lkdGg9IjEwLjMiIGhlaWdodD0iNDkuMyIvPgoJCTxyZWN0IHg9IjQyMiIgeT0iMzU2LjciIGZpbGw9IiNENEFGMzciIHdpZHRoPSIxMC4zIiBoZWlnaHQ9IjQ5LjMiLz4KCQk8cGF0aCBmaWxsPSIjRDRBRjM3IiBkPSJNMTM5LjEsMzE3LjNjLTEyLjgsMC0yMi4xLDEwLjMtMjMuMSwyMy4xVjQwNmg0Ni4ydi02NS42QzE2Mi4yLDMyNy43LDE1MS45LDMxNy4zLDEzOS4xLDMxNy4zegoJCQkgTTEzOS4zLDM2MC4xYy0xMC43LDAtMTkuMy04LjYtMTkuMy0xOS4zYzAtMTAuNyw4LjYtMTkuMywxOS4zLTE5LjNjMTAuNywwLDE5LjMsOC43LDE5LjMsMTkuMwoJCQlDMTU4LjYsMzUxLjUsMTUwLDM2MC4xLDEzOS4zLDM2MC4xeiIvPgoJCTxwYXRoIGZpbGw9IiNENEFGMzciIGQ9Ik0yNDksMzE3LjNjLTEyLjgsMC0yMi4xLDEwLjMtMjMuMSwyMy4xVjQwNmg0Ni4ydi02NS42QzI3Mi4xLDMyNy43LDI2MS44LDMxNy4zLDI0OSwzMTcuM3ogTTI0OS40LDM2MC4xCgkJCWMtMTAuNywwLTE5LjMtOC42LTE5LjMtMTkuM2MwLTEwLjcsOC42LTE5LjMsMTkuMy0xOS4zYzEwLjcsMCwxOS4zLDguNywxOS4zLDE5LjNDMjY4LjcsMzUxLjUsMjYwLjEsMzYwLjEsMjQ5LjQsMzYwLjF6Ii8+CgkJPHBhdGggZmlsbD0iI0Q0QUYzNyIgZD0iTTM1OS45LDMxNy4zYy0xMi44LDAtMjIuMSwxMC4zLTIzLjEsMjMuMVY0MDZIMzgzdi02NS42QzM4MywzMjcuNywzNzIuNywzMTcuMywzNTkuOSwzMTcuM3ogTTM2MCwzNjAuMQoJCQljLTEwLjcsMC0xOS4zLTguNi0xOS4zLTE5LjNjMC0xMC43LDguNi0xOS4zLDE5LjMtMTkuM2MxMC43LDAsMTkuMyw4LjcsMTkuMywxOS4zQzM3OS4zLDM1MS41LDM3MC43LDM2MC4xLDM2MCwzNjAuMXoiLz4KCQk8cGF0aCBmaWxsPSIjRDRBRjM3IiBkPSJNNDU4LDMxNy42Yy0xMywwLTIzLjYsMTAuNi0yMy42LDIzLjZjMCwwLDAsMC4xLDAsMC4xaDBWNDA2SDQ2OWM0LjMsMCw4LjQtMSwxMi42LTIuN3YtNjAuNwoJCQljMC0wLjQsMC0wLjksMC0xLjNDNDgxLjYsMzI4LjEsNDcxLDMxNy42LDQ1OCwzMTcuNnogTTQ1Ny44LDM2MC45Yy0xMC43LDAtMTkuMy04LjYtMTkuMy0xOS4zYzAtMTAuNyw4LjYtMTkuMywxOS4zLTE5LjMKCQkJYzEwLjcsMCwxOS4zLDguNywxOS4zLDE5LjNDNDc3LjEsMzUyLjIsNDY4LjQsMzYwLjksNDU3LjgsMzYwLjl6Ii8+CgkJPHBhdGggZmlsbD0iI0Q0QUYzNyIgZD0iTTE2LjUsMzQxLjJjMCwwLjQtMC4xLDAuOS0wLjEsMS4zdjYwLjdjNC4xLDEuNyw4LjYsMi43LDEyLjksMi43aDM0LjR2LTY0LjdoMC4zYzAsMCwwLTAuMSwwLTAuMQoJCQljMC0xMy0xMC42LTIzLjYtMjMuNy0yMy42QzI3LjIsMzE3LjYsMTYuNSwzMjguMSwxNi41LDM0MS4yeiBNMjEuMiwzNDEuNmMwLTEwLjcsOC43LTE5LjMsMTkuMy0xOS4zYzEwLjcsMCwxOS4zLDguNywxOS4zLDE5LjMKCQkJYzAsMTAuNy04LjYsMTkuMy0xOS4zLDE5LjNDMjkuOSwzNjAuOSwyMS4yLDM1Mi4yLDIxLjIsMzQxLjZ6Ii8+CgkJPHBvbHlnb24gZmlsbD0iIzI3M0VFMiIgcG9pbnRzPSIxMTUsNTYuNyAxNzMuMSwwIDExNSwwIAkJIi8+CgkJPHBhdGggZmlsbD0iIzI3M0VFMiIgZD0iTTExNC4yLDBIMjUuOUMxMi4xLDIuMSwwLDEzLjMsMCwyNy43djgzLjlMMTE0LjIsMHoiLz4KCQk8cG9seWdvbiBmaWxsPSIjMjczRUUyIiBwb2ludHM9IjE3MywyNy45IDIwMi41LDAgMTczLDAgCQkiLz4KCQkJPHBhdGggZD0iTTM1LjcsMzc2LjRjMC0yLjgsMi4xLTUuMSw1LjUtNS4xYzMuMywwLDUuNSwyLjQsNS41LDUuMXY0LjdjMCwyLjgtMi4yLDUuMS01LjUsNS4xYy0zLjMsMC01LjUtMi40LTUuNS01LjFWMzc2LjR6CgkJCQkgTTQzLjMsMzc2LjRjMC0xLjMtMC44LTIuMy0yLjItMi4zYy0xLjMsMC0yLjEsMS4xLTIuMSwyLjN2NC43YzAsMS4yLDAuOCwyLjMsMi4xLDIuM2MxLjMsMCwyLjItMS4xLDIuMi0yLjNWMzc2LjR6Ii8+CgkJCTxwYXRoIGQ9Ik0xMzYuMiwzNzQuMWMyLjgsMCwzLjQtMC44LDMuNC0yLjVoMi45djE0LjNoLTMuNHYtOS41aC0zVjM3NC4xeiIvPgoJCQk8cGF0aCBkPSJNMjQ4LjYsMzc4LjVjMS43LTEsMy0xLjcsMy0zLjFjMC0xLjEtMC43LTEuNi0xLjYtMS42Yy0xLDAtMS44LDAuNi0xLjgsMi4xaC0zLjNjMC0yLjYsMS44LTQuNiw1LjEtNC42CgkJCQljMi42LDAsNC45LDEuMyw0LjksNC4zYzAsMi40LTIuMywzLjktMy44LDQuN2MtMiwxLjMtMi41LDEuOC0yLjUsMi45aDYuMXYyLjdoLTEwQzI0NC44LDM4MS4yLDI0Ni40LDM3OS45LDI0OC42LDM3OC41eiIvPgoJPHBvbHlnb24gZmlsbD0iIzI3M0VFMiIgcG9pbnRzPSI1NC4xLDI0Mi40IDU0LjEsMjc0LjEgMjIuNCwyNzQuMSAJIi8+CgkJPHBhdGggZD0iTTQ4LjEsMjcwLjlsLTAuNi0xLjdoLTUuMWwtMC42LDEuN2gtMy41bDUuMS0xNC4zaDMuMWw1LjIsMTQuM0g0OC4xeiBNNDUsMjYwLjdsLTEuOCw1LjloMy41TDQ1LDI2MC43eiIvPgoJPHBvbHlnb24gZmlsbD0iIzI3M0VFMiIgcG9pbnRzPSI0NDYuMiwxNjQuNiA0NDYuMiwxMzIuOCA0NzcuOSwxMzIuOCAJIi8+CgkJPHBhdGggZD0iTTQ0OS4xLDEzNS44aDUuOWMzLjksMCw0LjcsMi40LDQuNywzLjljMCwxLjgtMS40LDIuOS0yLjUsMy4yYzAuOSwwLDIuNiwxLjEsMi42LDMuM2MwLDEuNS0wLjgsNC00LjcsNGgtNlYxMzUuOHoKCQkJIE00NTQuNCwxNDEuN2MxLjYsMCwyLTEsMi0xLjdjMC0wLjYtMC4zLTEuNy0yLTEuN2gtMnYzLjRINDU0LjR6IE00NTIuNCwxNDQuMXYzLjVoMi4xYzEuNiwwLDItMSwyLTEuOGMwLTAuNy0wLjQtMS44LTItMS44CgkJCUg0NTIuNHoiLz4KCQk8cGF0aCBkPSJNMzUyLjEsMzgxLjFjMCwxLjYsMC45LDIuNSwyLjIsMi41YzEuMiwwLDEuOS0wLjksMS45LTEuOWMwLTEuMi0wLjYtMi0yLjEtMmgtMS4zdi0yLjZoMS4zYzEuNSwwLDEuOS0wLjcsMS45LTEuOAoJCQljMC0xLjEtMC43LTEuNi0xLjYtMS42Yy0xLjQsMC0xLjgsMC44LTEuOCwyLjFoLTMuM2MwLTIuNCwxLjUtNC42LDUuMS00LjZjMi42LDAsNSwxLjMsNSw0YzAsMS42LTEsMi44LTIuMSwzLjIKCQkJYzEuMywwLjUsMi4zLDEuNiwyLjMsMy41YzAsMi43LTIuNCw0LjMtNS4yLDQuM2MtMy41LDAtNS41LTIuMS01LjUtNS4xSDM1Mi4xeiIvPgoJCTxwYXRoIGQ9Ik0zNjguNSwzODUuOWgtMy4xbC01LjEtMTQuM2gzLjVsMy4xLDEwLjFsMy4xLTEwLjFoMy42TDM2OC41LDM4NS45eiIvPgoJCQk8cGF0aCBkPSJNNDQ0LjQsMzc4LjNoNy40djIuNWgtMS41Yy0wLjYsMy4zLTMsNS41LTcuMSw1LjVjLTQuOCwwLTcuNS0zLjUtNy41LTcuNWMwLTMuOSwyLjgtNy41LDcuNS03LjVjMy44LDAsNi40LDIuMyw2LjYsNQoJCQkJaC0zLjVjLTAuMi0xLjEtMS40LTIuMi0zLjEtMi4yYy0yLjcsMC00LjEsMi4zLTQuMSw0LjdjMCwyLjUsMS40LDQuNyw0LjQsNC43YzIsMCwzLjItMS4yLDMuNC0yLjdoLTIuNVYzNzguM3oiLz4KCQkJPHBhdGggZD0iTTQ2MS40LDM4MC45di05LjNoMy4zdjE0LjNoLTMuNWwtNS4yLTkuMnY5LjJoLTMuM3YtMTQuM2gzLjVMNDYxLjQsMzgwLjl6Ii8+CgkJCTxwYXRoIGQ9Ik00NzIuNywzNzEuNmM0LjgsMCw3LjUsMy41LDcuNSw3LjJzLTIuNyw3LjItNy41LDcuMmgtNS4zdi0xNC4zSDQ3Mi43eiBNNDcwLjgsMzc0LjR2OC42aDEuOGMyLjcsMCw0LjItMi4xLDQuMi00LjMKCQkJCXMtMS42LTQuMy00LjItNC4zSDQ3MC44eiIvPgoJPHBhdGggZmlsbD0iIzI3M0VFMiIgZD0iTTIzMC42LDY5LjdjLTIuOSwwLTUuMywyLjQtNS4zLDUuM2MwLDIuOSwyLjQsNS4zLDUuMyw1LjNjMi45LDAsNS4zLTIuNCw1LjMtNS4zCgkJQzIzNS45LDcyLjEsMjMzLjUsNjkuNywyMzAuNiw2OS43Ii8+Cgk8cGF0aCBmaWxsPSIjMjczRUUyIiBkPSJNMjY5LjksNTAuMkwyNjkuOSw1MC4ybC0zOS41LDB2MGMtMTQuMSwwLjEtMjQuNiwxMC43LTI0LjYsMjQuOGMwLDEzLjksMTAuNCwyNC40LDI0LjMsMjQuN3YwaDM5LjYKCQljMTQuMiwwLDI0LjgtMTAuNiwyNC44LTI0LjdDMjk0LjUsNjEsMjg0LDUwLjMsMjY5LjksNTAuMiBNMjY5LjcsODkuMkwyNjkuNyw4OS4ybC0zOS4zLDBjLTcuNy0wLjEtMTQtNi40LTE0LTE0LjIKCQljMC03LjgsNi40LTE0LjIsMTQuMi0xNC4yaDM5LjFjNy44LDAsMTQuMiw2LjQsMTQuMiwxNC4yQzI4My45LDgyLjksMjc3LjUsODkuMiwyNjkuNyw4OS4yIi8+Cgk8cGF0aCBmaWxsPSIjMjczRUUyIiBkPSJNMjY5LjcsODAuM2MyLjksMCw1LjMtMi40LDUuMy01LjNjMC0yLjktMi40LTUuMy01LjMtNS4zYy0yLjksMC01LjMsMi40LTUuMyw1LjMKCQlDMjY0LjQsNzcuOSwyNjYuOCw4MC4zLDI2OS43LDgwLjMiLz4KCTxwYXRoIGZpbGw9IiM5Nzk3OTciIGQ9Ik00NzQuMywyMzIuNmgtNTYuMmMtMC41LDAtMS0wLjQtMS0xdi01Ni4yYzAtMC41LDAuNC0xLDEtMWg1Ni4yYzAuNSwwLDEsMC40LDEsMXY1Ni4yCgkJQzQ3NS4zLDIzMi4yLDQ3NC44LDIzMi42LDQ3NC4zLDIzMi42Ii8+Cgk8cGF0aCBmaWxsPSJub25lIiBzdHJva2U9IiMwMTAyMDIiIHN0cm9rZS13aWR0aD0iMC4yMDU3IiBzdHJva2UtbWl0ZXJsaW1pdD0iMTAiIGQ9Ik00NzQuMywyMzIuNmgtNTYuMmMtMC41LDAtMS0wLjQtMS0xdi01Ni4yCgkJYzAtMC41LDAuNC0xLDEtMWg1Ni4yYzAuNSwwLDEsMC40LDEsMXY1Ni4yQzQ3NS4zLDIzMi4yLDQ3NC44LDIzMi42LDQ3NC4zLDIzMi42eiIvPgoJPHBhdGggZD0iTTQ2MS45LDIwMy41YzAsOC43LTcsMTUuNy0xNS43LDE1LjdjLTguNywwLTE1LjctNy0xNS43LTE1LjdjMC04LjcsNy0xNS43LDE1LjctMTUuN0M0NTQuOSwxODcuOCw0NjEuOSwxOTQuOSw0NjEuOSwyMDMuNQoJCSIvPgoJPHBhdGggZmlsbD0ibm9uZSIgc3Ryb2tlPSIjMDAwMDAwIiBzdHJva2Utd2lkdGg9IjAuMTAyOCIgc3Ryb2tlLW1pdGVybGltaXQ9IjEwIiBkPSJNNDYxLjksMjAzLjVjMCw4LjctNywxNS43LTE1LjcsMTUuNwoJCWMtOC43LDAtMTUuNy03LTE1LjctMTUuN2MwLTguNyw3LTE1LjcsMTUuNy0xNS43QzQ1NC45LDE4Ny44LDQ2MS45LDE5NC45LDQ2MS45LDIwMy41eiIvPgoJPHBhdGggZmlsbD0iIzk3OTc5NyIgZD0iTTgyLjEsMjMyLjZIMjUuOWMtMC41LDAtMS0wLjQtMS0xdi01Ni4yYzAtMC41LDAuNC0xLDEtMWg1Ni4yYzAuNSwwLDEsMC40LDEsMXY1Ni4yCgkJQzgzLDIzMi4yLDgyLjYsMjMyLjYsODIuMSwyMzIuNiIvPgoJPHBhdGggZmlsbD0ibm9uZSIgc3Ryb2tlPSIjMDEwMjAyIiBzdHJva2Utd2lkdGg9IjAuMjA1NyIgc3Ryb2tlLW1pdGVybGltaXQ9IjEwIiBkPSJNODIuMSwyMzIuNkgyNS45Yy0wLjUsMC0xLTAuNC0xLTF2LTU2LjIKCQljMC0wLjUsMC40LTEsMS0xaDU2LjJjMC41LDAsMSwwLjQsMSwxdjU2LjJDODMsMjMyLjIsODIuNiwyMzIuNiw4Mi4xLDIzMi42eiIvPgoJPHBhdGggZD0iTTY5LjcsMjAzLjVjMCw4LjctNywxNS43LTE1LjcsMTUuN3MtMTUuNy03LTE1LjctMTUuN2MwLTguNyw3LTE1LjcsMTUuNy0xNS43UzY5LjcsMTk0LjksNjkuNywyMDMuNSIvPgoJPHBhdGggZmlsbD0iI0Y5RjlGOSIgZD0iTTMzMy44LDMxMC4zSDE2NS45Yy04LjMsMC0xNS02LjctMTUtMTVWMTI3LjVjMC04LjMsNi43LTE1LDE1LTE1aDE2Ny44YzguMywwLDE1LDYuNywxNSwxNXYxNjcuOAoJCUMzNDguOCwzMDMuNiwzNDIuMSwzMTAuMywzMzMuOCwzMTAuM3oiLz4KCTxwYXRoIGZpbGw9Im5vbmUiIHN0cm9rZT0iIzAwMDAwMCIgc3Ryb2tlLXdpZHRoPSIwLjEwMjgiIHN0cm9rZS1taXRlcmxpbWl0PSIxMCIgZD0iTTY5LjcsMjAzLjVjMCw4LjctNywxNS43LTE1LjcsMTUuNwoJCXMtMTUuNy03LTE1LjctMTUuN2MwLTguNyw3LTE1LjcsMTUuNy0xNS43UzY5LjcsMTk0LjksNjkuNywyMDMuNXoiLz4KCQk8L2c+Cjwvc3ZnPg==\";\n  transient = true;\n}\n#IP7MQddaWIMSii2f\nvar logger : App_Logger {\n  // {shim:}\n  transient = true;\n}\n#z4JpVqUVYFEt242M\nvar event_queues : String_Map {\n  // {shim:}\n  transient = true;\n}\n#BqrPmRC6jDYCukGD\naction first_event(#D42Ig553PhKq4i1h name: String) returns(#LvCIVEn5SGoFsUQw r: * Event_Bus) {\n  #S54lpFtjKjUHFKzi // {shim:}\n  #RZNIuj3lqoN3XBHs $j := 0;\n  #xl2YfZUIVs2bxDTW $n := records→Event_Bus_table→count;\n  #XSmtWmzT9PIeyS4f while $j < $n do {\n    #xyeEq0ZyXsc8jJee $ev := records→Event_Bus_table→row_at($j);\n    #YLmFnqeqCx4SCqaW if $ev→name→equals($name) then {\n      #BfAUYnBpcCUv9d6a `return` $ev;\n    }\n    #Q1dlEH79JUnTh4LX $j := $j + 1;\n  }\n  #wIXRC18Oi3Crpzb5 `return` records→Event_Bus_table→invalid;\n  meta private;\n  meta sync;\n}\n#shg2hAnCU7F4s74Y\naction test_play_note() {\n  #xzttSnRTTwvwFA7J // {shim:}\n  #x4AIYBST31am9VdY code→ring_tone(440);\n  #THJySqP27cAgQsaj code→pause(1000);\n  #TblGf0VF1CPJ6kMi code→ring_tone(540);\n  #pJWEI0OhM2WjvsmY code→pause(1000);\n  #aRlrDs9lN5SjbIzI code→ring_tone(0);\n  #rTSs47awcQhuxF68 code→pause(1000);\n  #izbzXfqhmfDGfk1T code→ring_tone(440);\n  meta private;\n  meta test;\n}\n#xSM8dUbL7z4962Uq\naction ring_tone(#x6LSvAzKrDJ17xu5 frequency: Number) {\n  #xPhZkakRDj6rdLie // Plays a tone through pin ``P0``.\n  #Io3qQ3JyDbVd2NVV // {help:functions/ring-tone}\n  #Tt9V48fB99uH7oPY // {namespace:music}\n  #YGzmuem9F35GsbhE // {weight:80}\n  #tXZFp05e4tJHLACS // {hints:frequency:440}\n  #N722EwENmgCNUdCs code→analog_set_pitch_pin(\"P0\");\n  #nW42CNnggdII8dc4 code→analog_pitch($frequency, 0);\n}\n#zeiPSQvHNIer2uac\naction test_warning() {\n  #SSMfX6t5fWn7h04x // {shim:}\n  #rGaI9w2nf60bKxEH code→\\_libinit;\n  #mTHHt30PoPagapRP code→forever;\n  #xJiPHVjqVziSJqle where `implicit` \\_body\\_() {\n    #UcbyY25lqLaSlf0N code→on_pin_pressed(\"P2\");\n    #mSBzWIUK9D6gMShm where `implicit` \\_body\\_() {\n      #g6O52rAigBwHjrn4 code→show_string(\"sw\", 150);\n      #cv1jrjdAaBfrfJVt code→pause(500);\n    }\n  }\n  meta private;\n  meta test;\n}\n#tHOUdkl60T7Q7Doi\naction store_pin_handler(#foZZksEULlhDtfjB name: String, #xocE8Y4sHKsI4ZmX ev: Event_Binding) {\n  #sb2HOtfOByaJVTUA // {shim:}\n  #xjhOTngE9qyaAYrE $name := $name→trim(\" \\t\")→to_lower_case;\n  #aboKExhvnNmkj2pM if $name→equals(\"p0\") then {\n    #fp2oW4xMNIzM14oj data→p0_handler := $ev;\n  }\n  else { #t9YxAAvsTwP7gRjc if $name→equals(\"p1\") then {\n    #iEpu6Gr4k7YxwZyZ data→p1_handler := $ev;\n  }\n  else { #y4mYXzm4vv0qIW7V if $name→equals(\"p2\") then {\n    #g4ZFv85AuknPhpvC data→p2_handler := $ev;\n  }\n  else { } } } \n  meta private;\n  meta sync;\n}\n#tnIOjiWz0KJW0Jw4\nvar p0_handler : Event_Binding {\n  // {shim:}\n  transient = true;\n}\n#wHKaWOUBRGyTzDER\nvar p1_handler : Event_Binding {\n  // {shim:}\n  transient = true;\n}\n#P545BoMFP6juxgJ8\nvar p2_handler : Event_Binding {\n  // {shim:}\n  transient = true;\n}\n#FUIrUzLVkX1B0F8a\naction clear_pin_handler(#RSL4xscVGqj094dJ name: String) {\n  #C4gtDdQMQ8juyxA6 // {shim:}\n  #kfqPf0I2193RDPpB $name := $name→trim(\" \\t\")→to_lower_case;\n  #xIRL2SG5Y3slm0gb if $name→equals(\"p0\") `and` `not` data→p0_handler→is_invalid then {\n    #Z3z522H4zGPvuo6V data→p0_handler→delete;\n    #R4urnW9bw1szDdEg data→p0_handler→\\u25c8clear;\n  }\n  else { #oGnSVGLrssTCQmWp if $name→equals(\"p1\") `and` `not` data→p1_handler→is_invalid then {\n    #hXmS2sdX47s6nMDd data→p1_handler→delete;\n    #ssTjCqfie22HWaLa data→p1_handler→\\u25c8clear;\n  }\n  else { #d2xeKSkVSETaiyf1 if $name→equals(\"p2\") `and` `not` data→p2_handler→is_invalid then {\n    #XOFHbVTvwysTjcM0 data→p2_handler→delete;\n    #TgkAqrWwi7OEyrkK data→p2_handler→\\u25c8clear;\n  }\n  else { } } } \n  meta private;\n  meta sync;\n}\n#jIsIcIMs28T2k3d1\naction show_ble_event_notification(#iWT7LqrE1qPWy3nn family: String, #m26PlHeE0cZD3K3d msg: String) {\n  #xw5ZOUW8EPnesEjC // {shim:}\n  #xBsth8WKFROreEm2 code→\\_libinit;\n  #VHYJDnaGvLgvy0IS code→pairing_warning;\n  #lHoodQfdcB4tjgLt data→ble_required := true;\n  #xGdYFwSAjkS6aGY3 $sprite := data→board→create_text(100, 40, 24, $family→concat(\"\\n\")→concat($msg));\n  #FYwPad2E8AYpRN4N $sprite→set_color(colors→white);\n  #x4iM24484ozaNTeT $sprite→fit_text;\n  #MGAALd5sucnheK34 $sprite→set_text_baseline(\"top\");\n  #xFqNWnjtZC3yheXG $sprite→set_shadow(20, colors→white, 5, 5);\n  #QtVpY5jaqI0b24vT $sprite→speed_y := math→random_range( - 50, 10);\n  #tDWv6PeAjgT9jDRp $sprite→acceleration_y := math→random_range(100, 150);\n  #PA5DC8rDbWD8HJvR $sprite→speed_x := math→random_range(20, 30);\n  #eYo2fK83t5tPyZbI $sprite→left := 10;\n  #x25Duph4hxkI6ShK $sprite→@top := 0;\n  #IeqEh6CZBPBArsjt $anim := $sprite→create_animation;\n  #G4m04OrWzinA52eZ $anim→fade_in(0.5, \"cubic\");\n  #DfAyWezJ686P96Mc $anim→sleep(0.5);\n  #I7N2JTZXffLH62QE $anim→puff_out(0.5, \"cubic\", 1.5);\n  #CS4koD4KOBTpR4d2 $anim→delete;\n  meta private;\n  meta sync;\n}\n#fJ4pOnEOqU3eUD2k\naction tell_remote_control_to(#ct4m4Kjn25Ui4zdx @event: String) {\n  #xBtYsIZTUHfWmXCq // Sends a ``remote control`` command to the parent device.\n  #pUWFx7Xrhvhdfd36 // {namespace:devices}\n  #znsH3tl5GMatL1uD // {weight:20}\n  #tYPnukasH2fTz7ef // {help:functions/tell-remote-control-to}\n  #K8Z19s2gUUoEo7hY // {shim:micro_bit::devices::remote_control}\n  #KA5hsujGsAGoxW2v // {enum:event:play=MES_REMOTE_CONTROL_EVT_PLAY,pause=MES_REMOTE_CONTROL_EVT_PAUSE,stop=MES_REMOTE_CONTROL_EVT_STOP,next track=MES_REMOTE_CONTROL_EVT_NEXTTRACK,previous track=MES_REMOTE_CONTROL_EVT_PREVTRACK,forward=MES_REMOTE_CONTROL_EVT_FORWARD,rewind=MES_REMOTE_CONTROL_EVT_REWIND,volume up=MES_REMOTE_CONTROL_EVT_VOLUMEUP,volume down=MES_REMOTE_CONTROL_EVT_VOLUMEDOWN}\n  #DWxu9anbEMzicq8T code→show_ble_event_notification(\"remote control\", $@event);\n  meta sync;\n}\n#x4q8jp37FZ2yFjtH\naction map(#xDrpNVDYcOP4xPyM value: Number, #W7lLKHDJCBcfFWfx from_low: Number, #x51HWkuNwWc6CfRu from_high: Number, #UphF5VHccbBSprcV to_low: Number, #iODWbk9drmgB2ZBV to_high: Number) returns(#XiujfWmMGuAZueU8 r: Number) {\n  #MA0gRjAwdRLlCae7 // Re-maps a number from one range to another. That is, a value of ``from low`` would get mapped to ``to low``, a value of ``from high`` to ``to high``, values in-between to values in-between, etc.\n  #EUpjXk4q9Jn56eQe // {hints:from high:1023}\n  #zfwaGjKO4DVlsVTO // {hints:to high:4}\n  #Tft9hSpV4N3FKVO6 // {help:functions/map}\n  #xCn7AaB8RuB8qFVD // {namespace:pins}\n  #dnQlRSL4btf2ExhK // {weight:40}\n  #uc5IndedDZWZMEwV `return` ($value - $from_low) * ($to_high - $to_low) / ($from_high - $from_low) + $to_low;\n  meta sync;\n}\n#g4a4jkTOoyzp82wv\naction pairing_warning() {\n  #XaJUgiqPPsF9LCfB // {shim:}\n  #ONnRJZP4a5MRHgD4 code→warning(\"pair your micro:bit with another device to use this function\");\n  meta private;\n  meta sync;\n}\n#qPUtJwJ0TqvMC1KG\naction magnetic_force(#LsEFJSIvP0IbVrDx dimension: String) returns(#xHQcYMA6Plgw9L7T millig: Number) {\n  #hPENJP4Mk8DofQRm // Get the magnetic force value in ``micro-Teslas`` (``µT``). This function is not supported in the simulator.\n  #s3Bnnawgp2VmtUO8 // {help:functions/magnetic-force}\n  #xCTDjLY5GkeF3sgN // {namespace:input}\n  #BgprL13WBVpXrK9A // {weight:43}\n  #b4JHQry9Zdd486VW // {enum:dimension:x=0,y=1,z=2,strength=3}\n  #xF4wa42ef8c5X8lA // {shim:micro_bit::getMagneticForce}\n  #havM3pnn4dudJ5gg `return` 0;\n  meta sync;\n}\n#w0az5rdjy9wEVnUV\naction test_magnetic_force() {\n  #ZWuupOD9Su55M1MQ // {shim:}\n  #wsYSu1daVvpWUeD3 code→\\_libinit;\n  #SKnaR2nInQodK0CN while true do {\n    #yOEhUqmj5wpjX6RM $x := code→magnetic_force(\"x\");\n    #RMNgHytGLoye4r3z $y := code→magnetic_force(\"y\");\n    #yr82TE9I7LBUzNcE $z := code→magnetic_force(\"z\");\n    #qvqzBO2R24y8D4I5 code→pause(100);\n  }\n  meta private;\n  meta test;\n}\n#CdzvoNQyYRK48OLL\naction servo_write_pin(#xAG1wlRgYVj9GlRk name: String, #gpDCTuJQs7tEJaYB value: Number) {\n  #D4Do6hAmoqG30qwT // Writes a value to the servo, controlling the shaft accordingly. On a standard servo, this will set the angle of the shaft (in degrees), moving the shaft to that orientation. On a continuous rotation servo, this will set the speed of the servo (with ``0`` being full-speed in one direction, ``180`` being full speed in the other, and a value near ``90`` being no movement).\n  #xRCcrcV8V4YBSRY4 // {help:functions/servo-write-pin}\n  #qzuvM5DmpVW5HnJV // {namespace:pins}\n  #xU4azu812RcdtEK0 // {weight:44}\n  #VAh8yBEk4isWMrPv // {enum:name:P0=uBit.io.P0,P1=uBit.io.P1,P2=uBit.io.P2}\n  #wb072FQSt0oUGTlW // {hints:value:180,90,0}\n  #Q5yrXRxd5OEeNIp4 // {shim:micro_bit::servoWritePin}\n  #r4JhdsGC9rWeysJv $value := math→round($value);\n  #PeRqtR86b2tatBWd if $value < 0 `or` $value > 180 then {\n    #R2SdD6mbOatEAbJ0 code→warning(\"value should be between 0 and 180.\");\n  }\n  meta sync;\n}\n#xyjXPoUGVDbuKVxy\naction servo_set_pulse(#xrp9JurOyqwzOHfl pin: String, #PW24fYn4zEb79S8Z micros: Number) {\n  #zRdYAgRkve7OQ4L9 // Configures this IO pin as an analog/pwm output, configures the period to be 20 ms, and sets the pulse width, based on the value it is given **microseconds** or `1/1000` milliseconds.\n  #oSEIW9PKLCCG0hGx // {shim:micro_bit::setServoPulseUs}\n  #ZNqFhWfv389w4Kvb // {namespace:pins}\n  #IapMTP9dyJt46KX1 // {help:functions/serial-set-pulse}\n  #FPbnv4WqMjILi26F // {weight:10}\n  #dwQoy54QUKSce2jg // {enum:pin:P0=uBit.io.P0,P1=uBit.io.P1,P2=uBit.io.P2}\n  #xWd9YrYWLq2zwBJL // {hints:micros:1000,1500,2000}\n  meta sync;\n}\n#xOZj6EkeH5NrwuKz\naction rest(#Dlu4AkS2aw2W3kKC ms: Number) {\n  #x2FWDwNcak3HMLNZ // Rests (plays nothing) for a specified time through pin ``P0``.\n  #aqMT5z6Ff8QcKE7I // {help:functions/rest}\n  #Emu6nWDM2AFw0d5k // {namespace:music}\n  #xvpxHK76Ioc6P2jg // {weight:79}\n  #N9j25wl9kDg2FJ0c // {hints:millis:1000}\n  #NNgmNw93MRVEDJPH code→play_tone(0, $ms);\n}\n#UiGQIc1iIkMh2d64\naction rotation(#Hc1jGwhjaC7IKMYj kind: String) returns(#nybXv9g8UNYUVvLO angle: Number) {\n  #KUv392v682F9nzAO // The pitch of the device, rotation along the ``x-axis``, in degrees.\n  #uy3Q4O9JgrSbAgzY // {help:/functions/rotation}\n  #nIWWg8S2EfseNqBN // {namespace:input}\n  #H8M557Nv0mthwxR5 // {weight:60}\n  #exd1NQ4dHpmAW4Is // {enum:kind:pitch=0,roll=1}\n  #A2S02DdTu68XAkS6 // {shim:micro_bit::getRotation}\n  #KHSKxqHusXKmJ96h $x := code→acceleration(\"y\");\n  #TDpGRYYu4wknG2QD $y := - code→acceleration(\"x\");\n  #xlIUa0mMjRnw4KZc $z := - code→acceleration(\"z\");\n  #JcE4C83Mbv504yDN $roll := math→atan2($y, $z);\n  #xrDZacJbVkUJq4vB // See https://github.com/lancaster-university/microbit-dal/blob/master/source/MicroBitAccelerometer.cpp\n  #aqZTKjLnrx3auGYS if $kind→equals(\"roll\") then {\n    #VGYsdlr44neknh2p `return` math→floor(math→rad_to_deg($roll));\n  }\n  else {\n    #C8bMftDsn2hjvQ5q $pitch := math→atan( - $x / ($y * math→sin($roll) + $z * math→cos($roll)));\n    #uqPa5krZh97byvdt `return` math→floor(math→rad_to_deg($pitch));\n  }\n}\n#ko8AY4P56uQxR3Lx\naction note(#Y4tRTwLYNsq0niNH name: String) returns(#Shffo9ayK8aw62UV frequency: Number) {\n  #x2rK4VyqeesyxDoG // This function is obsolete. Please use ``music->note frequency`` instead.\n  #j07ppvwZ0wXrU4MB // {enum:name:C=262,C#=277,D=294,Eb=311,E=330,F=349,F#=370,G=392,G#=415,A=440,Bb=466,B=494,C3=131,C#3=139,D3=147,Eb3=156,E3=165,F3=175,F#3=185,G3=196,G#3=208,A3=220,Bb3=233,B3=247,C4=262,C#4=277,D4=294,Eb4=311,E4=330,F4=349,F#4=370,G4=392,G#4=415,A4=440,Bb4=466,B4=494,C5=523,C#5=555,D5=587,Eb5=622,E5=659,F5=698,F#5=740,G5=784,G#5=831,A5=880,Bb5=932,B5=989}\n  #rBsuxzJQpYkPcNvY // {shim:TD_ID}\n  #x2imSmluVwjKgKJq // {namespace:music}\n  #R8VYGr4Htc42XPG2 // {weight:0}\n  #vZCz3CeHwrqlLi2V // {help:functions/note-frequency}\n  #C4Nk1CulhgpB34fw $f := art→notetable\\u002esjon→number($name→to_upper_case→trim(\" \\t\"));\n  #xM27VD6UJfPYh0hy if `not` $f→is_invalid then {\n    #xYh72XsEjmWTjxm6 `return` $f;\n  }\n  else {\n    #vpeBlf9Hrij34fp2 code→warning(\"Sorry, we don\\'t know about this note.\");\n    #IMF8844p2G43Esg8 `return` 0;\n  }\n  meta sync;\n}\n#oQBH3ZAjr5l30Gy1\naction test_rotation() {\n  #LypAVSbUH5nm9UNJ // {shim:}\n  #hdpW2ZEMMT5A8CGv code→\\_libinit;\n  #f3AX3jZEtzwHQqsE code→forever;\n  #W2leacY4H1Hw8aVT where `implicit` \\_body\\_() {\n    #xGDUqeP40Y1Av5kr $angle := code→rotation(\"roll\");\n    #tblBtCn20WaO4kss code→show_number($angle, 150);\n  }\n  meta private;\n  meta test;\n}\n#xOyhkiuukKoXsSf3\naction set_pixel_brightness(#MXRjgwVpEVBRFqeR @this: * Image, #lV45czXkvrdYIaFe x: Number, #VziHcAryoNtz2N0K y: Number, #FGY5E61J6hOffs9e value: Number) {\n  #xjJS62ADi09BoR8h // Set a pixel state at position ``(x,y)``\n  #gY4qfnINky41OVAC // {help:functions/set-pixel}\n  #b2ukvr2YqvGXd6We // {namespace:image}\n  #nWnpK22Wo0dDCaec // {shim:micro_bit::setImagePixel}\n  #RuFHoZWWNJ7nwFbf $x := math→floor($x);\n  #lULDn4tozSW2Swy5 $y := math→floor($y);\n  #cAZh6VFQFZ4HCzP1 if $x < 0 `or` $x ≥ $@this→leds→row_count then {\n    #xAfMmCVOUHZpho4h code→warning(\"x should be between 0 and \" →concat(($@this→leds→row_count - 1)→to_string));\n    #x2K2FAWG4d6E2s5I `return` ;\n  }\n  else { #mrBUjDL4OsPrtTvk if $y < 0 `or` $y ≥ $@this→leds→column_count then {\n    #HbOQG7UJVWq2B1kb code→warning(\"y should be between 0 and \" →concat(($@this→leds→column_count - 1)→to_string));\n    #oIipripGXsEtvKys `return` ;\n  }\n  else { } } \n  #xLygH81fjmSis6kt $@this→leds→set_item($x, $y, $value);\n  meta sync;\n}\n#ZHNC7Mxlv12jRmo6\naction pixel_brightness(#uAEF3o8d5wYosjdT @this: * Image, #S7i6zQSOqBnuNhu5 x: Number, #q9VHqzfRTnI9XDDn y: Number) returns(#FECK2kiFRCeWmF5l state: Number) {\n  #ZAYbbyQljcBromJm // Get the pixel state at position ``(x,y)``\n  #s1qXnDy7759gbelE // {help:functions/pixel}\n  #xg27bIuNvP0nRcPO // {namespace:image}\n  #DWYzPeCDN4GNxa2l // {hints:x:0,1,2,3,4}\n  #cRWiaeT8TKShGdR7 // {hints:y:0,1,2,3,4}\n  #BjJ8orBlo6iJ0NrJ // {shim:micro_bit::getImagePixel}\n  #r3TTpBg0VX2b6DHN $x := math→round($x);\n  #dfZYFPmXS7GKLohf $y := math→round($y);\n  #ti4xQsZ8cO2NCsd4 if $x < 0 `or` $x ≥ $@this→leds→row_count then {\n    #fnFG55i42XiJcdrv code→warning(\"x should be between 0 and \" →concat(($@this→leds→row_count - 1)→to_string));\n    #g27fXMxF9GIeePsv `return` 0;\n  }\n  else { #JUUkH61WF1tcL28p if $y < 0 `or` $y ≥ $@this→leds→column_count then {\n    #HMKmCc6B0h2Q4cz2 code→warning(\"y should be between 0 and \" →concat(($@this→leds→column_count - 1)→to_string));\n    #R11nLsD2zpYlRGFb `return` 0;\n  }\n  else { } } \n  #ma6H9dmbM5CRZvzn `return` $@this→leds→item($x, $y);\n  meta sync;\n}\n#add7T3y7MNatnGny\naction set_display_mode(#WTg2PtS86SYIQDt0 mode: String) {\n  #E35ZI91OTJ2kyT6g // Sets the display mode between black and white and greyscale for rendering LEDs.\n  #b56Xmqi0Ckx0Hz4B // {enum:mode:back and white=0,greyscale=1}\n  #jhKTS5UHC8Rltnka // {shim:micro_bit::setDisplayMode}\n  #SVF4C6g4vgbWIOis // {namespace:led}\n  #jycAgxiKjEkoBwJs // {weight:1}\n  #zCgiDN8quFSVnDaT // {help:/functions/set-display-mode}\n  #awhSb2rKqSuvmbXC data→\\_greyscale := $mode→equals(\"greyscale\");\n  meta sync;\n}\n#hjjZvF3ZOHXgRyFu\nvar \\_greyscale : Boolean {\n  transient = true;\n}\n#g0ss4j1eLk5ynyUt\naction play_note(#bHaFCNEEJaK991Yo frequency: Number, #TcObkTO93uKAovfA ms: Number) {\n  #xgZagGizmoldZ7s1 // This function is obsolete. Please use ``music->play tone`` instead.\n  #xLfJimnAWhsIU1wq // {help:functions/play-tone}\n  #R0wMYnIMaWgjqZan // {namespace:music}\n  #VfhIF1cNxbzbYO2J // {weight:0}\n  #fc2nyHYoM4jaKZJl // {hints:frequency:440}\n  #Neq372aA2RIBI0lX // {hints:ms:1000}\n  #xoBbd94UdCwRCF99 code→play_tone($frequency, $ms);\n}\n#ZCnPMPq5QSyyJy6i\naction light_level() returns(#GXD5twYeWvP3BPyt light: Number) {\n  #WV0iSATx7aji44xQ // Reads the light level applied to the LED screen in a range from ``0`` (dark) to ``255`` bright. In the simulator, the ``acceleration y`` is used to emulate this value.\n  #xikatVrpE6xh0BTn // {help:functions/light-level}\n  #rjeg4imR7dmRWMEJ // {namespace:input}\n  #xi0fmPgjARvr6Z9r // {weight:55}\n  #vYVhQXlLmZu5Mva8 // {shim:micro_bit::lightLevel}\n  #akAqI31dd4qWYn7N `return` math→clamp(0, 255, math→abs(code→acceleration(\"y\") / 2)) - 255;\n  meta sync;\n}\n#v82mkjS2I5pZXQeU\naction is_ble_required() returns(#zvaiE3bc26qZJe0m r: Boolean) {\n  #ndD8Jzfci1As2Qku // Returns a value indicating if any BLE function has been used so far. **simulator only**\n  #Zg2S3ZOPKDzRoqjl // {namespace:simulator}\n  #blWfIptmUrfDF24o // {action:libsonly}\n  #x429y8Nylcc5yo1k `return` data→ble_required;\n  meta sync;\n}\n#Si7IjGa9nv451k3d\nvar ble_required : Boolean {\n  transient = true;\n}\n#qhRPOv27q7FwkCnd\naction signal_strength() returns(#pjNiV2VnbNOLOrtS strength: Number) {\n  #xT2ELzQbRIFqjn4W // Returns the last signal strength reported by the paired device.\n  #BQe7g7kLBH1JXry2 // {help:functions/signal-strength}\n  #LvClLSskMFcoNgOo // {namespace:devices}\n  #nqacunRHChfkRx2G // {weight:40}\n  #xHPfdExQ4TqV8mdt // {shim:micro_bit::signalStrength}\n  #kSpK0NglrvAg93Vz data→ble_required := true;\n  #z4nSUBqBKe6WaUJY `return` 0;\n  meta sync;\n}\n#u9XE1xZdVNsJL8sJ\naction on_signal_strength_changed(#cuYkQZekjFUGjAi4 body: Action) {\n  #RUTzQqkWAkkLT07I // Registers code to run when the device notifies about a change of signal strength.\n  #iYAREqvtJxpxvOH0 // {shim:micro_bit::onSignalStrengthChanged}\n  #UceJa459XHIqYGpt // {namespace:devices}\n  #xmRckxNtld14XWCK // {help:functions/on-signal-strength-changed}\n  #Csvsk6MK3WAipXGZ code→notify_event_registration(\"on string strength changed\");\n  #t84fDrl4Mq6am32n code→pairing_warning;\n  meta sync;\n}\n#od0z0OKRNOBHKno4\nvar namespacedocs\\u002ejson : Json_Object {\n  // {shim:}\n  is\\_resource = true;\n  url = \"data:text/plain;base64,ewogICAgImJhc2ljIjogIkRpc3BsYXkgc3RyaW5nLCBudW1iZXJzLCBpbWFnZXMgb24gdGhlIHNjcmVlbiBhbmQgYmFzaWMgbG9vcHMuIiwKICAgICJpbnB1dCI6ICJBY2Nlc3MgdG8gc2Vuc29yIGFuZCBldmVudHMuIiwKICAgICJsZWQiOiAiVHVybiBvbiBhbmQgb2ZmIExFRHMgb24gdGhlIHNjcmVlbi4iLAogICAgImNvbnRyb2wiOiAiUmVwZWF0IGNvZGUgd2l0aCB2YXJpb3VzIGxvb3BzLiIsCiAgICAibG9naWMiOiAiSWYgc3RhdGVtZW50IGFuZCBib29sZWFuIG9wZXJhdG9ycy4iLAogICAgIm11c2ljIjogIlBsYXkgdG9uZXMgb24gdGhlIHBpbnMuIiwKICAgICJwaW5zIjogIkludGVyYWN0IHdpdGggZWxlY3Rvcm5pYyBzZW5zb3JzIGFuZCBtb3RvcnMgdGhyb3VnIHRoZSBwaW5zLiIsCiAgICAicmFkaW8iOiAiQnJvYWRjYXN0ZWQgY29tbXVuaWNhdGlvbiBiZXR3ZWVuIG1pY3JvOmJpdHMuIiwKICAgICJnYW1lIjogIlNwcml0ZXMgYW5kIGdhbWUgYW5pbWF0aW9ucyIsCiAgICAiZGV2aWNlcyI6ICJDb250cm9sIHBhaXJlZCBkZXZpY2VzIHN1Y2ggYXMgcGhvbmVzIG9yIHRhYmxldHMgb3ZlciBCbHVldG9vdGguIgp9\";\n  transient = true;\n}\n#xYboMgkbvJoQX7sC\naction test_simulator() {\n  #u48cZt3DgE4wCB4Y // {shim:}\n  #Rl7A4R4pnG5P27KE code→\\_libinit;\n  #zfAUVfu4BJ1DcIiz data→board→set_debug_mode(true);\n  #RzutKKtsqnxrwC65 code→forever;\n  #vRZvHqSS2hxQZ66I where `implicit` \\_body\\_() {\n    #qcsH21SkO2PAgOTL code→acceleration(\"x\");\n    #xhGcRD9sid5iFVrZ code→acceleration(\"y\");\n    #o4AExlgMkXXOP8GA code→acceleration(\"z\");\n    #LRctI025VatmeOCr code→acceleration(\"strength\");\n    #KV0405Bp8kY5Q0WX code→compass_heading;\n    #zmws2q49NZq7htip code→temperature;\n    #TwCxJBJlwOBGSdMS code→light_level;\n    #jCWPzJVSnmUVX3HY code→magnetic_force(\"x\");\n  }\n  meta private;\n  meta test;\n}\n#GmOcDyC1h7Te2171\nvar theme_button : Sprite {\n  // {shim:}\n  transient = true;\n}\n#ptr6LKVPwprLEIih\naction on_gamepad_button(#D3QUCj7BfHCBhap4 name: String, #xI9Zgf22rh0WuyDZ body: Action) {\n  #ec8bEwDIIWvoXaAQ // Register code to run when the micro:bit receives a command from the paired gamepad.\n  #DNz3nPXpQNLBRxS2 // {help:functions/on-gamepad-button}\n  #E9BV9SOyuTlksOp9 // {namespace:devices}\n  #T48grEOAY1B4H1ph // {weight:40}\n  #WZzx5JA2s7ssD9tE // {enum:name:A down=MES_DPAD_BUTTON_A_DOWN,A up=MES_DPAD_BUTTON_A_UP,B down=MES_DPAD_BUTTON_B_DOWN,B up=MES_DPAD_BUTTON_B_UP,C down=MES_DPAD_BUTTON_C_DOWN,C up=MES_DPAD_BUTTON_C_UP,D down=MES_DPAD_BUTTON_D_DOWN,D up=MES_DPAD_BUTTON_D_UP,1 up=MES_DPAD_BUTTON_1_DOWN,1 down=MES_DPAD_BUTTON_1_UP,2 down=MES_DPAD_BUTTON_2_DOWN,2 up=MES_DPAD_BUTTON_2_UP,3 down=MES_DPAD_BUTTON_3_DOWN,3 up=MES_DPAD_BUTTON_3_UP,4 down=MES_DPAD_BUTTON_4_DOWN,4 up=MES_DPAD_BUTTON_4_UP}\n  #yUSp4coqF0Z782rL // {shim:micro_bit::onGamepadButton}\n  #huR2efoZWTsLGE6k $evid := \"on gamepad button \" ∥ $name;\n  #NIoxxw4REvwe9Fac code→notify_event_registration($evid);\n  #FVzCwPmbtYNq7UzA code→pairing_warning;\n  meta private;\n  meta sync;\n}\n#dYquo5vKBlFTf010\nvar boardcolors\\u002ejson : Json_Object {\n  // {shim:}\n  is\\_resource = true;\n  url = \"data:text/plain;base64,WwoiIzNBRENGRSIsCiIjRkZENDNBIiwKIiMzQUZGQjMiLAoiI0ZGM0E1NCIKXQ==\";\n  transient = true;\n}\n",
  "rwbwnc": "meta version \"v2.2,js,ctx,refs,localcloud,unicodemodel,allasync,upperplex\";\nmeta name \"micro:bit game\";\nmeta rootId \"Ba3NfsJb7QfMsuiMUrQ4HLjN\";\nmeta isLibrary \"yes\";\nmeta hasIds \"yes\";\nmeta splitScreen \"yes\";\nmeta platform \"current\";\nmeta parentIds \"\";\n// A #microbit game library.\n#FICjbNZc86cUSakA meta import micro\\u003abit {\n  pub \"thflqk\"\n  usage {\n    type Image\n    action `sync` \\_libinit()\n    action `async` pause(ms: Number)\n    action `sync` clear_screen()\n    action `sync` width(@this: ♻ micro\\u003abit → Image) returns(w: Number)\n    action `async` scroll_image(@this: ♻ micro\\u003abit → Image, x_offset_per_step: Number, interval: Number)\n    action `sync` button_is_pressed(name: String) returns(pressed: Boolean)\n    action `sync` plot(x: Number, y: Number)\n    action `sync` point(x: Number, y: Number) returns(on: Boolean)\n    action `async` show_string(text: String, interval: Number)\n    action `sync` unplot(x: Number, y: Number)\n    action `sync` on_button_pressed(name: String, body: Action)\n    action `async` show_image(@this: ♻ micro\\u003abit → Image, x_offset: Number)\n    action `sync` compass_heading() returns(degrees: Number)\n    action `sync` acceleration(dimension: String) returns(millig: Number)\n    action `sync` digital_write_pin(name: String, value: Number)\n    action `sync` digital_read_pin(name: String) returns(value: Number)\n    action `sync` analog_read_pin(name: String) returns(value: Number)\n    action `sync` analog_write_pin(name: String, value: Number)\n    action `sync` create_image(leds: String) returns(img: ♻ micro\\u003abit → Image)\n    action `sync` brightness() returns(brightness: Number)\n    action `sync` set_brightness(value: Number)\n    action `async` show_animation(leds: String, interval: Number)\n    action `sync` running_time() returns(now: Number)\n    action `async` show_number(value: Number, interval: Number)\n    action `sync` set_pixel(@this: ♻ micro\\u003abit → Image, x: Number, y: Number, value: Boolean)\n    action `sync` pixel(@this: ♻ micro\\u003abit → Image, x: Number, y: Number) returns(state: Boolean)\n    action `sync` clear(img: ♻ micro\\u003abit → Image)\n    action `sync` in_background(body: Action)\n    action `async` calibrate()\n    action `sync` forever(body: Action)\n    action `sync` pin_is_pressed(name: String) returns(pressed: Boolean)\n    action `sync` on_pin_pressed(name: String, body: Action)\n    action `sync` tell_camera_to(@event: String)\n    action `sync` raise_alert_to(@event: String)\n    action `async` on_notified(@event: String, body: Action)\n    action `sync` notify_event_registration(evid: String)\n    action `sync` add_button(text: String, @action: Action)\n    action `sync` reset()\n    action `sync` warning(message: String)\n    action `sync` analog_set_period(pin: String, micros: Number)\n    action `sync` analog_set_pitch_pin(name: String)\n    action `async` analog_pitch(frequency: Number, ms: Number)\n    action `async` plot_frame(@this: ♻ micro\\u003abit → Image, index: Number)\n    action `async` show_leds(leds: String, ms: Number)\n    action `async` play_tone(frequency: Number, ms: Number)\n    action `sync` note_frequency(name: String) returns(frequency: Number)\n    action `sync` plot_leds(leds: String)\n    action `sync` plot_image(@this: ♻ micro\\u003abit → Image, x_offset: Number)\n    action `sync` temperature() returns(temp: Number)\n    action `sync` stop_animation()\n    action `async` show_frame(img: ♻ micro\\u003abit → Image, frame: Number)\n    action `sync` queue_event(body: Action, name: String)\n    action `async` ring_tone(frequency: Number)\n    action `sync` tell_remote_control_to(@event: String)\n    action `sync` map(value: Number, from_low: Number, from_high: Number, to_low: Number, to_high: Number) returns(r: Number)\n    action `sync` magnetic_force(dimension: String) returns(millig: Number)\n    action `sync` servo_write_pin(name: String, value: Number)\n    action `sync` servo_set_pulse(pin: String, micros: Number)\n    action `async` rest(ms: Number)\n    action `async` rotation(kind: String) returns(angle: Number)\n    action `sync` note(name: String) returns(frequency: Number)\n    action `sync` set_pixel_brightness(@this: ♻ micro\\u003abit → Image, x: Number, y: Number, value: Number)\n    action `sync` pixel_brightness(@this: ♻ micro\\u003abit → Image, x: Number, y: Number) returns(state: Number)\n    action `sync` set_display_mode(mode: String)\n  }\n}\n#GSTBzUmgzKqh572M\nvar \\_score : Number {\n  transient = true;\n}\n#dBVZeGqsEXhS7NAa\nvar \\_life : Number {\n  transient = true;\n}\n#BAJJhCO4wcEnkvZS\naction score() returns(#ZdGkas4VGdp7KpAk score: Number) {\n  #JKrysLLsVXnU2lZd // Gets the current score\n  #bagjbfBxWixI920m // {namespace:game}\n  #b4OrVIn3auNNVlZc // {weight:10}\n  #gQUXqxZiVTUJH10u // {help:td/game-library}\n  #fLeWes41L5KcTL21 code→init;\n  #dZpwDtBRDC0AuC6K `return` data→\\_score;\n  meta sync;\n}\n#lJ7P9FLSUXiK1qfR\naction set_score(#Oj3vV76xynFUnJ6u value: Number) {\n  #VyQVy7NKpR21Y6op // Sets the current score value\n  #xAB4O7rLX45TrPs0 // {namespace:game}\n  #CpMhV2T2818lBBP4 // {weight:10}\n  #Hb1inJ8c2GnMbVTi // {help:td/game-library}\n  #QG6TE4UiTqrXI4uR code→init;\n  #sjsRgFn54B4GS3gW data→\\_score := math→max(0, $value);\n  meta sync;\n}\n#ct21RxcGord4ZUHK\naction life() returns(#xwvNDXyE5xUJo2w4 life: Number) {\n  #IyJ0579xbWjJurUv // Gets the current life\n  #xaYElyBY73cVSzfc // {namespace:game}\n  #qOfD7vEMcAwTXJCF // {weight:10}\n  #WThSysHUIV4s2PBM // {help:td/game-library}\n  #YWqh1YEfgdNxl82n code→init;\n  #S2tbXAXUHi1iQN22 `return` data→\\_life;\n  meta sync;\n}\n#yQOnar7sIXqp6pis\naction set_life(#A4tOr2LyOrUR2M3f value: Number) {\n  #bQC50q5J4Nv6DxLr // Sets the current life value\n  #xZpUVw9ridjn2EO4 // {hints:value:1,3}\n  #xwe4HAi2BtgQsN0O // {namespace:game}\n  #yMug18SrGqhAT3Bn // {weight:10}\n  #x9P3dC6Iwu2mm5gt // {help:td/game-library}\n  #ynbh4KZHrAcYV2DF code→init;\n  #vQP7JOwXyUTcrKDe data→\\_life := math→max(0, $value);\n  #az2zGYGvRNAVlCiN if data→\\_life ≤ 0 then {\n    #xXtO1gUMmxwZYolc code→game_over;\n  }\n}\n#sCf9vmLsvG8WaSm3\naction init() {\n  #w0iiw6oWxgjcSpvJ if `not` data→\\_init then {\n    #OEkjPQmmhwrJW0Oh data→\\_score := 0;\n    #xiVPvMphLY51NRS8 data→\\_life := 3;\n    #bwqxqjuqihyb94gx data→\\_level := 1;\n    #Lf6evmVl2EvvT5p2 data→\\_init := true;\n  }\n  meta private;\n  meta sync;\n}\n#phR5OQxcOdM4coX9\naction add_score(#upNGyw2apMaUcvQC points: Number) {\n  #tL87Dx4B01r4P1Jc // Adds points to the current score\n  #qxWdMPrkQWGmHqQp // {hints:points:1}\n  #mwAslp0sFgo3kxVy // {namespace:game}\n  #CjU5W9YaAbTDuPXe // {weight:10}\n  #zuiUmYhuZxbAIleZ // {help:td/game-library}\n  #x7PPOGU8dlENtc4w code→init;\n  #kQUTLhhhFULjGZ4O code→set_score(data→\\_score + $points);\n  #vZtX1RcjDdWohAtr control[lib micro\\u003abit] →in_background;\n  #xTmfOuxYEEZU8RZo where `implicit` \\_body\\_() {\n    #EmMB4oUWOSOSrs2Q led[lib micro\\u003abit] →stop_animation;\n    #TpoevJbyuENBzDRz basic[lib micro\\u003abit] →show_animation(\"0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 0 0 1 0 0 0 0 0\\n0 0 0 0 0 0 0 1 0 0 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0\\n0 0 1 0 0 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 1 0 0 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 0 0 1 0 0 0 0 0\", 20);\n  }\n  meta sync;\n}\n#ROPTygCiIFymgxcF\naction add_life(#Idxc4r0G1Vbjq8Ax lives: Number) {\n  #NDQv2bhltDPIfVSi // Adds life points to the current life\n  #gZW4aOWlH3lkAdJ2 // {hints:lives:1}\n  #piZkQFwDxd24sMMZ // {namespace:game}\n  #uTWomM4YiSXvjNFc // {weight:10}\n  #gMxH43bPNY6lkYOk // {help:td/game-library}\n  #XZF4u0yOUgyUQRl2 code→init;\n  #UCNjMauTD6c4fyeX code→set_life(data→\\_life + $lives);\n}\n#eHS28n1RPy4vJt9h\naction start_countdown(#k15bqhzwFzH4Y3yU ms: Number) {\n  #BCtRANWiE67zR26q // Starts a game countdown timer\n  #AZiqP23JFfbITIOx // {hints:ms:10000,30000}\n  #C2ARUWzUgFTvOtlU // {namespace:game}\n  #xOEHlgzZy2hhHBBs // {weight:11}\n  #XhFLKLF40CAqHQDO // {help:td/game-library}\n  #sx4X6t87BpsDX2Rt code→init;\n  #aKdshGPo1iqAXgyG if code→check_start then {\n    #YA72wUp4JSnzvoSL basic[lib micro\\u003abit] →show_animation(\"1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0\\n0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0\\n1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0\\n0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0\\n1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0\", 400);\n    #A7XSXMDEmg5AdGAY data→\\_countdown_pause := math→max(500, $ms);\n    #FnAKYESYclPZ0cIR data→\\_start_time := - 1;\n    #v7EAWZzZFfFzIfTV data→\\_end_time := input[lib micro\\u003abit] →running_time + data→\\_countdown_pause;\n    #j1x6jSbo8PWqhcAB control[lib micro\\u003abit] →in_background;\n    #PfU9olXIFgS5aAwm where `implicit` \\_body\\_() {\n      #lvm9ZUpGlRoNoJSm basic[lib micro\\u003abit] →pause(data→\\_countdown_pause);\n      #Asl8YY54VpNM20l7 code→game_over;\n    }\n  }\n}\n#Zo54Nk7IINBtKKmo\nvar \\_start_time : Number {\n  transient = true;\n}\n#xlqvNMlD5yvfwaqU\nvar \\_end_time : Number {\n  transient = true;\n}\n#qsSRH3fC1L812M5G\naction game_over() {\n  #zL9SS6wzl1a4SmPu // Displays a game over animation.\n  #xEMronZSgyqejFrR // {namespace:game}\n  #iSDqv1rmu8dvkXDc // {weight:10}\n  #zVP4yHOI14OXGY5q // {help:td/game-library}\n  #Kx2cMn3rxMJadRgc if `not` data→\\_is_game_over then {\n    #xNEpLy8Dw9bOe19L data→\\_is_game_over := true;\n    #PHqtjWicyXXr3VHk code→unplug_events;\n    #Guoq4pVnwlRVXTiW led[lib micro\\u003abit] →stop_animation;\n    #XkFnkf3J2op1RUmQ led[lib micro\\u003abit] →set_brightness(255);\n    #qnqiNm6WirsquFMr led[lib micro\\u003abit] →set_display_mode(\"back and white\");\n    #DQ2Ufby7NHShBjEc while true do {\n      #oeKwkJj5snJoUEnm for 0 ≤ i < 8 do {\n        #qN0fKrhol7iI1zpn basic[lib micro\\u003abit] →clear_screen;\n        #puFgaW4Ecm7oLMUb basic[lib micro\\u003abit] →pause(100);\n        #xxi2pN9JNMVicahP basic[lib micro\\u003abit] →show_leds(\"1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\", 300);\n      }\n      #fYNBElDJt4VLUcV3 basic[lib micro\\u003abit] →show_animation(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0\\n1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 0 1 1 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n1 1 0 1 1 1 0 0 0 1 1 0 0 0 1 1 0 0 0 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 0 0 1 1 1 0 0 0 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 0 0 1 1 1 0 0 0 1 1 0 0 0 0 1 0 0 0 0 0\", 100);\n      #XKk2kW9RyjOsqmB1 for 0 ≤ j < 3 do {\n        #bwOlN7eGtv4fFmR6 basic[lib micro\\u003abit] →show_string(\" GAMEOVER \", 100);\n        #PZAWQZkkKMCO3f8F code→show_score;\n      }\n    }\n  }\n  else {\n    #n67cH9pIKxKFcdQ6 // already in game over mode in another fiber\n    #YJW4X4vqAVwdgZoD while true do {\n      #wYMn2vN7Y4h0bBFe basic[lib micro\\u003abit] →pause(10000);\n    }\n  }\n}\n#PdPR9cpJ2YKm2EYO\naction current_time() returns(#fsGwyKm0OLECbz4I ms: Number) {\n  #t5loUEw8UND4YmVQ // Gets the remaining time (since `start countdown`) or current time (since the device started or `start stopwatch`) in milliseconds.\n  #HeGc1Wr68Owk4cqu // {namespace:game}\n  #ioUuv9a7O60p0za8 // {weight:10}\n  #xgITZAJSJ1TVmJ9V // {help:td/game-library}\n  #aBET7rQnCPNQDPF4 code→init;\n  #q3rk2BW2LPvS91gF if data→\\_end_time > 0 then {\n    #eRrmAEc5C7Xt9JLP `return` math→max(0, data→\\_end_time - @\\u267b→micro\\u003abit→running_time);\n  }\n  else {\n    #dVJIN2dJFI6DfRF7 `return` input[lib micro\\u003abit] →running_time - data→\\_start_time;\n  }\n}\n#zklIHAKeSYRvJ7r5\naction remove_life(#wSxIkWFhDMvo9sOL life: Number) {\n  #zrsjRb9maA6M2BdC // Removes some life\n  #yWb3H15TlF1klDBI // {hints:life:1}\n  #x8aXtKa8b6T5VVww // {namespace:game}\n  #V6pwIi2V2K411YlU // {weight:10}\n  #j6t4SWxNJyZalsQ6 // {help:td/game-library}\n  #DokzagqHlchXTHmB code→set_life(data→\\_life - $life);\n  #xRYStStywBAPdax9 control[lib micro\\u003abit] →in_background;\n  #DtJ9rlrZWMIkx4xF where `implicit` \\_body\\_() {\n    #UvYuL7St3J40m5LQ led[lib micro\\u003abit] →stop_animation;\n    #XqehW2sAtG2xOYXE basic[lib micro\\u003abit] →show_animation(\"1 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0\\n0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0\\n0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0\\n0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0\\n1 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0\", 40);\n  }\n}\n#xsC75ma2TcxelNNG\nvar \\_is_game_over : Boolean {\n  transient = true;\n}\n#WoKtgesh2cZNfH2O\naction example() {\n  #QZZ2q1Vwz31xKT2A // This library makes it easy to create games with the  **BBC micro:bit**. [read more...](/td/game-library)\n  #xR3atML1XGN9lD1x // {topic:td/game}\n  #PYH5iWxI1IpjTa14 // {shim:}\n  meta private;\n}\n#vskFru7NgUXuZQaD\nvar \\_init : Boolean {\n  transient = true;\n}\n#i94uG229AdaGNx9C\nvar \\_countdown_pause : Number {\n  transient = true;\n}\n#gvgfanokCXXEpdXq\nvar \\_level : Number {\n  transient = true;\n}\n#xXS4d4K3tOHj4Jz7\naction level_up() {\n  #mlrJjFz25TdU2Qh2 // Increments the level and display a message.\n  #er18r7cjQCAzM1D2 // {namespace:game}\n  #ypIUOtUf7Dz1Ieng // {weight:10}\n  #wA1EjK6AQ9iPKEOh // {help:td/game-library}\n  #yDIMepChMEyFFv40 code→init;\n  #D4nHKjh53QC7yfsA data→\\_level := data→\\_level + 1;\n  #X6J8Jattms0PGdqt basic[lib micro\\u003abit] →show_string(\"LEVEL:\", 150);\n  #bmP28eYirxu2XvYe basic[lib micro\\u003abit] →show_number(data→\\_level, 150);\n}\n#XWIbW8F1TScZL6cH\naction level() returns(#BC2jHGgo22ON4Kdh lv: Number) {\n  #xgA22Q228ASNJkyl // Gets the current level\n  #FFqz0ecwtCtHQz1L // {namespace:game}\n  #M7Srh1TOB67gbJyC // {weight:10}\n  #v4vjzUaWjGBt98Tk // {help:td/game-library}\n  #x90u5Et4JvN5DwBj code→init;\n  #YNymvto12wVZjj7j `return` data→\\_level;\n}\n#xHLzsLHCUz2swJ7b\naction test_countdown() {\n  #HAVtIrGlPwag4rAe // {shim:}\n  #kCedIlBZ3zmvWtbH code→start_countdown(10000);\n  #dQ94gDwnV0JrWJ2x code→start_countdown(10000);\n  #L8tu7FS9v4O757r0 code→start_stopwatch;\n  meta private;\n  meta test;\n}\n#xtK4SuOp3S4NKf12\naction start_stopwatch() {\n  #UZaRv27LnL4oW8iD // Starts a stopwatch timer. `current time` will return the elapsed time.\n  #Ju4jzjvapc9RBIj2 // {namespace:game}\n  #icJgELixmfxl4ba3 // {weight:10}\n  #hva2wqo5aSnLcGoN // {help:td/game-library}\n  #FKbJxgbol0zH7hgT code→init;\n  #YHJWhIU4xlM5la8E data→\\_start_time := input[lib micro\\u003abit] →running_time;\n  #BpI9FVu4sEUXkm6r data→\\_end_time := - 1;\n}\n#xbKGS6NntocOrXMR\naction check_start() returns(#XlAMLwecZHyukwDA ok: Boolean) {\n  #cR2pNxoFmQT2z3Ar // returns false if game can't start\n  #fzxbNRsp2d4270rr if data→\\_countdown_pause > 0 `or` data→\\_start_time > 0 then {\n    #b76aTH8FMfHSvLzv `return` false;\n  }\n  else {\n    #ncC4pDPrtHFuFAZB `return` true;\n  }\n  meta private;\n}\n#ft2hIFocJsyLl7tl\naction test_countdown_current_time() {\n  #xUlb4fRTV5vy3fkr // {shim:}\n  #xHQD2251jM3XG2fp code→start_countdown(10000);\n  #xcxMHQHk2BykUG5q basic[lib micro\\u003abit] →pause(2000);\n  #znGGGrzotJyKqdWr basic[lib micro\\u003abit] →show_number(code→current_time, 150);\n  meta private;\n  meta test;\n}\n#YlRO2i8CApxNgUmT\naction test_current_time() {\n  #rSxmAE8htbXr8tPx // {shim:}\n  #nccSpY6Jx5nZuWLN code→start_stopwatch;\n  #JfguRXzmxjTW32v8 basic[lib micro\\u003abit] →pause(2000);\n  #x7knzGldoCwiQPaI basic[lib micro\\u003abit] →show_number(code→current_time, 150);\n  meta private;\n  meta test;\n}\n#pdSjcArPD4cvm6e6\naction test_gameover() {\n  #V3yLiuoWmbtsJ9Vx // {shim:}\n  #IaOdIeGxJPutmQwh code→set_score(100);\n  #JdKoXbfP2JAMokMf code→game_over;\n  meta private;\n  meta test;\n}\n#HFDx8tOEHyqGnvB4\naction unplug_events() {\n  #DqyMp24hlCKZ1iIU input[lib micro\\u003abit] →on_button_pressed(\"A\");\n  #xWJ2aInU0Y3DkXlw where `implicit` \\_body\\_() {\n    #Ty4DROMeSR45jk3H skip;\n  }\n  #x4WFXrH3DNTNwBkP input[lib micro\\u003abit] →on_button_pressed(\"B\");\n  #PfVz8A4RssRinAOM where `implicit` \\_body\\_() {\n    #oF6jBmYja3JxvnuC skip;\n  }\n  #E22Y5LHsxIs0Wnu5 input[lib micro\\u003abit] →on_button_pressed(\"A+B\");\n  #kV4iKdgWcqEmvTpi where `implicit` \\_body\\_() {\n    #wV0IUBnCRTmnKjvY control[lib micro\\u003abit] →reset;\n  }\n  meta private;\n  meta sync;\n}\n#sqTPeilZldQhVOCC\nvar \\_game_id : Number {\n  transient = true;\n}\n#pd6yzHOHLSOW4g1S\naction is_running() returns(#cw0Wu3beI6dUUnNH running: Boolean) {\n  #JT3Ts6q2D3ITZ3su // Gets a value indicating if the game is still running. Returns `false` if game over.\n  #hn1FvwLqvB0pL70n // {namespace:game}\n  #WVIg0Y2jJTD8Dj20 // {weight:10}\n  #HCRfiRSgAkdGdCW0 // {help:td/game-library}\n  #D70pd8XtiL4KQjAN `return` `not` data→\\_is_game_over;\n  meta sync;\n}\n#HyuErwY6aQym2GfB\naction show_score() {\n  #kg8B9WUteEZeeAjj // Displays the score on the screen.\n  #H8sRcoDkF2w8hCPt // {namespace:game}\n  #GhugUWVAz1SpufdN // {help:td/game-library}\n  #b4aCyOUHZ2tbnTQS // {weight:60}\n  #ZHOR0vX2feQxQuYO code→init;\n  #vgr9oxsK2Bw4HRY3 basic[lib micro\\u003abit] →show_string(\" SCORE \", 100);\n  #kBGIK1yQHgc1Qva4 basic[lib micro\\u003abit] →show_number(data→\\_score, 150);\n  #oKd4MsDD4AJGSbZN basic[lib micro\\u003abit] →show_string(\" \", 150);\n}\n#jeyL4tq7ItXRn0Wc\naction test_score() {\n  #hwRjsGVuU3oaoev1 // {shim:}\n  #lWM0K14zhXLm1Jwa code→add_score(1);\n  #xbIjXaeYnn91h0Gd code→add_score(1);\n  #ItJdwS5hlCAd7FSn code→add_score(1);\n  #ZUqE4xmrbyn4GjFZ code→show_score;\n  meta private;\n  meta test;\n}\n#dwHWlvnQ2iMQzo7I\naction is_game_over() returns(#x32ZhBoC55aPFdsW over: Boolean) {\n  #j2k4LBl4jXqOt9sp // Indicates if the game is display the game over sequence.\n  #JerSvQ3nm3EA1FsL // {namespace:game}\n  #x4RgK65eS6RtgjPc // {help:/functions/game-library}\n  #IsnY41mRsPoBXboe `return` data→\\_is_game_over;\n  meta sync;\n}\n",
  "xbpfet": "meta version \"v2.2,js,ctx,refs,localcloud,unicodemodel,allasync,upperplex\";\nmeta name \"micro:bit sprites\";\nmeta rootId \"IrNJbTSBupAi6m6b0w7EHBVL\";\nmeta isLibrary \"yes\";\nmeta hasIds \"yes\";\nmeta splitScreen \"yes\";\nmeta platform \"current\";\nmeta parentIds \"\";\n#YTCiBQqlEqAR6hEl\naction example() {\n  #OKmzT6pzf1C5mDmh // This library simple sprites for the  **BBC micro:bit** screen. [read more...](/td/sprites-library)\n  #xPbBQ4T5AZXIhcZ6 // {shim:}\n  meta private;\n}\n#BVGhpbmca\ntable Led_Sprite {\n  type = \"Object\";\n  persistent = false;\n  fields {\n    #iTImxC9YFcZqpWTT \\_x : Number\n    #sdXbuHxH9qCkC7qR \\_y : Number\n    #eTU9ge4joHCJTqwK \\_dir : Number\n    #CLRbdVAs4KoUqa4G \\_brightness : Number\n    #j4ZDeRimsQwonSek \\_blink : Number\n  }\n}\n#xbp2Y1F2yQjR1gEi\naction create_sprite(#KBVVgM8SyXDGuONt x: Number, #x1FLGt14bvabwz2I y: Number) returns(#ceYntRMw503qHIJo r: * Led_Sprite) {\n  #xMO3FUwzkNbdsVIL // Creates a new LED sprite pointing to the right.\n  #fZmCBJA8WJytdrrV // {hints:x:2}\n  #s8v5SPF4SgfsrprQ // {hints:y:2}\n  #ZLBODN0J98gjeOPM // {namespace:game}\n  #VJD4bKmxGOmnA4ZM // {weight:60}\n  #rfMC44aRImQUneP7 // {action:ignoreReturn}\n  #f2n8VK6qGoYNLbc9 code→init;\n  #cV1EFfm7xnOZnGv1 $p := records→Led_Sprite→create;\n  #gwBghdrsqah3tSYk $p→\\_x := math→clamp(0, 4, $x);\n  #I7ebVJnUT5Tah5Co $p→\\_y := math→clamp(0, 4, $y);\n  #N19lcNu2xirQysAJ $p→\\_dir := 90;\n  #xf8sKvf6jZohgpgS $p→\\_brightness := 255;\n  #FPHV1E3o5428zsUn data→sprites→add($p);\n  #ynsPu0nLmLOO9sHQ code→plot;\n  #oTUYBv5veHYOjR2U `return` $p;\n}\n#n03pjtVWhETO1iAd\nvar img : ♻ micro\\u003abit → Image {\n  transient = true;\n}\n#YXLJL2PruAqFVTws\naction init() {\n  #ORPuncsI5B4zWKsC if data→img→is_invalid then {\n    #xW1383xeJNO22s2z data→img := image[lib micro\\u003abit] →create_image(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\");\n    #RhS9YdgJ5X2DrEy1 data→sprites := create→Collection_of→\\u2339Led_Sprite;\n    #SaBsOzam1nmkE90K led[lib micro\\u003abit] →set_display_mode(\"greyscale\");\n    #mLM9Xvcp2MUURJ2o basic[lib micro\\u003abit] →forever;\n    #f8294LK1k6meNU80 where `implicit` \\_body\\_() {\n      #WkUDkEISz4deLXyq basic[lib micro\\u003abit] →pause(30);\n      #C2A2hbqvfB4G49S2 code→plot;\n      #MIM8NVr4S1JzyKS4 if game[lib micro\\u003abit_game] →is_game_over then {\n        #vdr7cTGcwj9nFbuE basic[lib micro\\u003abit] →pause(600);\n      }\n    }\n  }\n  meta private;\n  meta sync;\n}\n#xIV6UQzyvfSv2Km0\nvar sprites : Collection[ * Led_Sprite] {\n  transient = true;\n}\n#mFH9LyIh4pa2Goe8\naction plot() {\n  #zMVFcsyhZHmabHaV // Plots the current sprites on the screen\n  #Ly2t4y22wIqGBVJ4 if game[lib micro\\u003abit_game] →is_game_over then {\n    #U44b0BkVL4cQWrH2 `return` ;\n  }\n  #OZV0I9V2oA2dv7zh $now := input[lib micro\\u003abit] →running_time;\n  #Q5smeV7QsSwvEXau data→img→clear;\n  #sUh5ANmEJC9YzA6C for 0 ≤ i < data→sprites→count do {\n    #cngEXkIoZe8PB6iQ $ps := data→sprites→at($i);\n    #xvfBtyPgxfnWShil if $ps→\\_brightness > 0 then {\n      #zpiTrj2PTmpmArwG $r := 0;\n      #Wo7d24Z1wBHCNlEM if $ps→\\_blink > 0 then {\n        #eOh4Cz98WEQhStbQ $r := math→mod($now / $ps→\\_blink, 2);\n      }\n      #xYX47qOm5Ljyl8vf if $r = 0 then {\n        #vsryWRdItzY5w8Gf data→img→set_pixel_brightness($ps→\\_x, $ps→\\_y, data→img→pixel_brightness($ps→\\_x, $ps→\\_y) + $ps→\\_brightness);\n      }\n    }\n  }\n  #xMy88FrS4AY8GpKp data→img→plot_image(0);\n  meta private;\n  meta sync;\n}\n#Ii223cRjT2ZfXMMv\naction move(#qvj22Zhu8Eo5aUG6 @this: * Led_Sprite, #f3DRVSobQuPZvt4O leds: Number) {\n  #xQHiOcGzhHb0Tx9t // Move a certain number of LEDs\n  #Ia0a2avS87ozapuc if $@this→\\_dir = 0 then {\n    #xguNWSh6ozJhLDZm $@this→\\_y := $@this→\\_y - $leds;\n  }\n  else { #xkZp4VKKT4vlygml if $@this→\\_dir = 45 then {\n    #BwF3Tum2fGAxOmhE $@this→\\_x := $@this→\\_x + $leds;\n    #WDUbDm4yNHaoKmvW $@this→\\_y := $@this→\\_y - $leds;\n  }\n  else { #fvsPfw4Q4C6D2L5Y if $@this→\\_dir = 90 then {\n    #OAatiV4yZX34Lif9 $@this→\\_x := $@this→\\_x + $leds;\n  }\n  else { #To0PQ7s6rn3KGnK4 if $@this→\\_dir = 135 then {\n    #hqnjllANuxMphiv2 $@this→\\_x := $@this→\\_x + $leds;\n    #xbrE4lOrDfgmt8HE $@this→\\_y := $@this→\\_y + $leds;\n  }\n  else { #UPLmWeTmHs3pWX1i if $@this→\\_dir = 180 then {\n    #qpgQOY1wHfUd2VSE $@this→\\_y := $@this→\\_y + $leds;\n  }\n  else { #Dm3TvL4C2BDNYlpJ if $@this→\\_dir = - 45 then {\n    #xLloUv2wDidasof7 $@this→\\_x := $@this→\\_x - $leds;\n    #Q4eMk8ku2tzRTWmV $@this→\\_y := $@this→\\_y - $leds;\n  }\n  else { #TkGM1qH4v7YjA3Dj if $@this→\\_dir = - 90 then {\n    #wiV8WWkDvoYq47YZ $@this→\\_x := $@this→\\_x - $leds;\n  }\n  else {\n    #N5FS3aoL5x6Q8bg3 $@this→\\_x := $@this→\\_x - $leds;\n    #xkUwKZMYcfPxvNu6 $@this→\\_y := $@this→\\_y + $leds;\n  }\n  } } } } } } \n  #hm8FZefbky33Z4HE $@this→\\_x := math→clamp(0, 4, $@this→\\_x);\n  #O4Eu78c4LTWcTZtE $@this→\\_y := math→clamp(0, 4, $@this→\\_y);\n  #x0H7hR67xz4euAeC code→plot;\n  meta sync;\n}\n#wquesHkwuYKkrRep\naction go_to(#abaqqKrsGOA41iFy @this: * Led_Sprite, #xcASpLlpX5koamEQ x: Number, #AEe12g4I9h5PTaxW y: Number) {\n  #I4EOQGLe35sjOJk6 // Go to this position on the screen\n  #PIpmUdNyvDkdBwrQ $@this→\\_x := $x;\n  #fEF0IYx9kgSeOHkb $@this→\\_y := $y;\n  #xWLn0kyHeQnWluNB $@this→\\_x := math→clamp(0, 4, $@this→\\_x);\n  #dtM7s4cG1zxXT7le $@this→\\_y := math→clamp(0, 4, $@this→\\_y);\n  #Cs4ula7JmM0HSolU code→plot;\n  meta sync;\n}\n#EnFD76PbssiLD7vv\naction if_on_edge\\u002c_bounce(#HV4x3j8JF159462w @this: * Led_Sprite) {\n  #mW2b4erDcZw45S3d // If touching the edge of the stage, then bounce away.\n  #WJvOYi3J0oQUfX7r if $@this→\\_dir = 0 `and` $@this→\\_y = 0 then {\n    #ki7G5jxaq4oECrOa $@this→\\_dir := 180;\n  }\n  else { #Cqb5nUza82plXe5W if $@this→\\_dir = 45 `and` ($@this→\\_x = 4 `or` $@this→\\_y = 0) then {\n    #xTNRwJttNNDMS4jH if $@this→\\_x = 0 `and` $@this→\\_y = 0 then {\n      #wNpbzp4QzSOBV6Uw $@this→\\_dir := - 135;\n    }\n    else { #QIHjBGVMm3O7jKbg if $@this→\\_y = 0 then {\n      #G4NfDqmzft2pZa0u $@this→\\_dir := 135;\n    }\n    else {\n      #xv4hQ8ImkIWqbf40 $@this→\\_dir := - 45;\n    }\n    } \n  }\n  else { #eKc44OZTHanPb4ou if $@this→\\_dir = 90 `and` $@this→\\_x = 4 then {\n    #mhlBDRbCxrRN2GJh $@this→\\_dir := - 90;\n  }\n  else { #y6QrCxoz5uQ2s6Xe if $@this→\\_dir = 135 `and` ($@this→\\_x = 4 `or` $@this→\\_y = 4) then {\n    #xP7I1EvwXEbwBqmq if $@this→x = 4 `and` $@this→y = 4 then {\n      #Msc2p75THd3we4FC $@this→\\_dir := - 45;\n    }\n    else { #xSXuex4eRZT5v1LQ if $@this→\\_y = 4 then {\n      #E22lLCJn4ecoqZ29 $@this→\\_dir := 45;\n    }\n    else {\n      #OoLMy4bQlVjRfZeE $@this→\\_dir := - 135;\n    }\n    } \n  }\n  else { #KO0B13gTd4WyOTav if $@this→\\_dir = 180 `and` $@this→\\_y = 4 then {\n    #HYmYAypV2ZRjwxjR $@this→\\_dir := 0;\n  }\n  else { #TC5SNjX4AmPPzgIq if $@this→\\_dir = - 45 `and` ($@this→\\_x = 0 `or` $@this→\\_y = 0) then {\n    #bte4O4gurLB2v8Ai if $@this→x = 0 `and` $@this→y = 0 then {\n      #x7iP8m2Y9zQkHyHh $@this→\\_dir := 135;\n    }\n    else { #wNngfLmvyionXaDP if $@this→\\_y = 0 then {\n      #DjbzNtzG2PEVhOVc $@this→\\_dir := - 135;\n    }\n    else {\n      #Q3IgxEngGQNS1Y5t $@this→\\_dir := 45;\n    }\n    } \n  }\n  else { #xXlWXaP45766gsVk if $@this→\\_dir = - 90 `and` $@this→\\_x = 0 then {\n    #xpKOVFoZAzm3xyS1 $@this→\\_dir := 90;\n  }\n  else { #I0kQuCXxWELaGOYh if $@this→\\_dir = - 135 `and` ($@this→\\_x = 0 `or` $@this→\\_y = 4) then {\n    #xJ7N9Y3ZVXv8g7oI if $@this→\\_x = 0 `and` $@this→\\_y = 4 then {\n      #LmufIcTbWtVXHSLJ $@this→\\_dir := 45;\n    }\n    else { #hkg4w2uDjtmf2ogC if $@this→\\_y = 4 then {\n      #l2OvXKlH3du5wfxz $@this→\\_dir := - 45;\n    }\n    else {\n      #xYQkGx2fAmR7kY90 $@this→\\_dir := 135;\n    }\n    } \n  }\n  else { } } } } } } } } \n  #Hwo8pD4s5eRV2By5 code→plot;\n  meta sync;\n}\n#Qbs2pH7Z7ul3N272\naction turn_right(#WQo2rhrkQWxkzPrA @this: * Led_Sprite, #TBC5hHn9AJYGofW7 degrees: Number) {\n  #xLjBzHVtkZc5wTsM // Turn to the right (clockwise)\n  #Dy8wBzFcytw4i4WD // {hints:degrees:45,90,135,180}\n  #STogS6X5S10pdm5j $@this→set_direction($@this→\\_dir + $degrees);\n  meta sync;\n}\n#nhl5mQt24x0S6udm\naction turn_left(#AkNxX24d83P2lJb4 @this: * Led_Sprite, #xaEEUGTEPf0CLnfJ degrees: Number) {\n  #q2Uw4nTyC4yxAhUV // Turn to the left (counter-clockwise)\n  #h2IwxNSyzoIrBCPo // {hints:degrees:45,90,135,180}\n  #aCF4f3u2PTKdbCBW $@this→turn_right( - $degrees);\n  meta sync;\n}\n#FCflZPrXxubdYEHq\naction set_direction(#W6XOHR7W7H5Uhce5 @this: * Led_Sprite, #GlUGqspXS7qUZZkh degrees: Number) {\n  #rkSAHKmBYqJ6uZYF // Set the direction of the current sprite, rounded to the nearest multiple of 45\n  #xLskSxLQcPhG5Eh8 // {hints:degrees:0,45,90,135,180,-45,-90,-135}\n  #Rkf7OLg8OLcS1BQd $@this→\\_dir := math→mod($degrees / 45, 8) * 45;\n  #nCQbePGChgTQ2hm7 if $@this→\\_dir ≤ - 180 then {\n    #xD2OY2tbKkgc4QFj $@this→\\_dir := $@this→\\_dir + 360;\n  }\n  else { #xxcX416s0eXg2Jb4 if $@this→\\_dir > 180 then {\n    #YUQrsgErLV0isSaw $@this→\\_dir := $@this→\\_dir - 360;\n  }\n  else { } } \n  #op5k2N9fbXY8HEWU code→plot;\n  meta sync;\n}\n#NSHCEK6bQ8swNBmM\naction x(#xgToVMvrrAswoUeH @this: * Led_Sprite) returns(#xXVHwibH1jpjLEIs r: Number) {\n  #O7hb0e8vT223tnC9 // Reports the ``x`` position of a sprite on the LED screen\n  #u9TO3yP69u3yQHq2 // {action:ignoreReturn}\n  #lbdc1f64posFgGUT `return` $@this→\\_x;\n  meta sync;\n}\n#JDrz7o89TGTxeK2w\naction y(#rnfi71evZY42LLnW @this: * Led_Sprite) returns(#j7qseMNIfdD5bZk2 r: Number) {\n  #OL72oZm0MjSHeGPi // Reports the ``y`` position of a sprite on the LED screen\n  #JChevy7MIzqvI44L // {action:ignoreReturn}\n  #XyGKpV2bxAm2MSb3 `return` $@this→\\_y;\n  meta sync;\n}\n#xSFJWYkhHm25gCC6\naction direction(#qmTmS7h27Sd6jvdE @this: * Led_Sprite) returns(#GMfjMqXduoLFMgVJ r: Number) {\n  #oqasR6pvP2QH5Yit // Reports the current direction of a sprite\n  #e1J4Gl2GjYDo4AhP // {action:ignoreReturn}\n  #qKryag4qEHbjmkOS `return` $@this→\\_dir;\n  meta sync;\n}\n#xd5Cnqhvdot8v0I2\naction set_x(#YRkB4B07f1TFpmc5 @this: * Led_Sprite, #IwppOWKsNf246cvq x: Number) {\n  #xtgkapSjxReCIzks // Set the ``x`` position of a sprite\n  #xBmG31Tos70NHkfZ $@this→go_to($x, $@this→\\_y);\n  meta sync;\n}\n#cjf3G44aBhLdgBM4\naction set_y(#xe00Eqd2Sye76CcK @this: * Led_Sprite, #xUIp4QMLCBopDvKT y: Number) {\n  #rt34m9v71RciQ1LM // Set the ``y`` position of a sprite\n  #xz0cSa4iDTY741jP $@this→go_to($@this→\\_x, $y);\n  meta sync;\n}\n#xCdoxKQ2PYO4sDeW\naction change_y_by(#GtmKdo2M0rB6Xoxp @this: * Led_Sprite, #xnOmlrhOk7cRHCIg y: Number) {\n  #nMbLdUu2E6HK3aod // Changes the ``y`` position by the given amount\n  #kq22RIc81QnunNP4 // {hints:y:1}\n  #xaWt7GUOc2SDslvK $@this→go_to($@this→\\_x, $@this→\\_y + $y);\n  meta sync;\n}\n#vaus553SVioo4jJr\naction change_x_by(#BNyURA3lrR445XJ2 @this: * Led_Sprite, #GC5f2Y5myMXFJMuk x: Number) {\n  #Wa4DXXQfls07wwqI // Changes the ``x`` position by the given amount\n  #ky1UesBkqQza1YpA // {hints:x:1}\n  #TE7whTqcF6AjYWvK $@this→go_to($@this→\\_x + $x, $@this→\\_y);\n  meta sync;\n}\n#NH3Z2IrvU21LuPGM\naction is_touching(#NB942NQl923gi02T @this: * Led_Sprite, #UZ597zOwyA6568TK other: * Led_Sprite) returns(#zHEcCNsDmXzhUt9V r: Boolean) {\n  #w2haKF4w9cxEBYkc // Reports true if sprite is touching specified sprite\n  #EHJ2YBpvJAzd0Uqp // {action:ignoreReturn}\n  #bAQMgnnEUZqDGLyC `return` $@this→\\_x = $other→\\_x `and` $@this→\\_y = $other→\\_y;\n  meta sync;\n}\n#xD4uhANlxBIGS7OU\naction is_touching_edge(#xvVZ9ABfZXXspLlY @this: * Led_Sprite) returns(#K8ObBSXJ5ECbUdjN r: Boolean) {\n  #IvjKKKDIP3iKSHqb // Reports true if sprite is touching an edge\n  #zOe9JEEGfZjkRXVN // {action:ignoreReturn}\n  #B25GiX6KizWzqnHH `return` $@this→\\_x = 0 `or` $@this→\\_x = 4 `or` $@this→\\_y = 0 `or` $@this→\\_y = 4;\n  meta sync;\n}\n#bkOzd2UzwbDSbLgu\naction on(#rj7tjF50krHRwt6J @this: * Led_Sprite) {\n  #ydvX567DaEZLqO7K // Turns on the sprite (on by default)\n  #lJ22kxYhvlqhft3U $@this→set_brightness(255);\n  meta sync;\n}\n#u9iUpHzn26Cdfona\naction off(#e0lGhx7xf1e7IUCX @this: * Led_Sprite) {\n  #Xb7Yx3vYM4ShEFUe // Turns off the sprite (on by default)\n  #REB5VhZtw3YUYSxh $@this→set_brightness(0);\n  meta sync;\n}\n#DJ445YFffVfKDqHs\naction set_brightness(#ylG8SOIydgxxfeSy @this: * Led_Sprite, #DQWYvEEkEzaPMwlC brightness: Number) {\n  #CYsmrKQxad2dO63G // Set the ``brightness`` of a sprite\n  #FLAXXGWNwLg24o2J // {hints:brightness:255,0,127}\n  #lGQZxBxH4pi0khw3 $@this→\\_brightness := math→clamp(0, 255, $brightness);\n  #bGzkRMdTHUH0BhYx code→plot;\n  meta sync;\n}\n#MMokZ8utTeSrEPEE\naction brightness(#x7Z3c9xE3t1SbCOb @this: * Led_Sprite) returns(#xUzQbOrOfDuvpEGp r: Number) {\n  #Sz7DkrDPcD4YpGJG // Reports the ``brightness` of a sprite on the LED screen\n  #FNuHpZoWtcvzcx0R // {action:ignoreReturn}\n  #Xb1aqKrgPqLtjVoj `return` $@this→brightness;\n  meta sync;\n}\n#CflgTntqHhWbxHlW\naction change_brightness_by(#YOnjOM5Dijox14bO @this: * Led_Sprite, #XChQ7dKtgcDBImGc value: Number) {\n  #QS0H5xTlm0sn0Unq // Changes the ``y`` position by the given amount\n  #O1QaAEjifPnQ8azU // {hints:value:25}\n  #Jk6fyOIwYdZoztd0 $@this→set_brightness($@this→\\_brightness + $value);\n  meta sync;\n}\n#fe4BUMNMHkLIbNKa\naction change_direction_by(#x32MjNr12ofz2JYc @this: * Led_Sprite, #xuoTqBS6Ikir95JL angle: Number) {\n  #VNIvix2ffUeRNdMx // Changes the ``direction`` position by the given amount by turning right\n  #zPHNWOxwhGlBgO69 // {hints:angle:45,90,-45,-90}\n  #l2PLkh6uahGZEzIi $@this→turn_right($angle);\n  meta sync;\n}\n#Xwzo4y2iATnX72lA\naction invalid_sprite() returns(#nr31Nq023HjQjvBc r: * Led_Sprite) {\n  #XWx7JR2mUvBQxhzD // Gets an invalid sprite; used to initialize locals.\n  #D04g2GnOmaLZtnRb // {weight:0}\n  #xja2b4gPwHB2dcd6 // {namespace:game}\n  #cxvKf4e0N6UEtGPL // {action:ignoreReturn}\n  #Naa3i2uT6RXc9lKZ `return` records→Led_Sprite→invalid;\n  meta sync;\n}\n#xUwWUO2jFGIlKOtq\naction delete(#TqK6aquLm37xVsNH sprite: * Led_Sprite) {\n  #bH7rJ8stE4vJr6ZV // Deletes the sprite from the game engine. All further operation of the sprite will not have any effect.\n  #KaYmbOrkjZ4CS4df data→sprites→remove($sprite);\n  meta sync;\n}\n#hi6X8Z2yYBVyLkWz\naction test_pong() {\n  #i8JqKk4Qc1tXPvFb // {shim:}\n  #s2X9VygZOY29nARC $paddle := code→create_sprite(0, 2);\n  #NBrpqVUuuENIGkHh $paddle→set_blink(100);\n  #pYCFQ2QktMJs93Qx $paddle→set_brightness(8);\n  #li2Xx982HOn3o2VB $ball := code→create_sprite(4, 1);\n  #vb0CkZtaWnHnk1XU $ball→set_direction( - 45);\n  #T5sAL25TVftlfVcf input[lib micro\\u003abit] →on_button_pressed(\"A\");\n  #Xc0cWs4EfXhPU1Xi where `implicit` \\_body\\_() {\n    #OrYN2UYJXGDZbVBr $paddle→change_y_by( - 1);\n  }\n  #AXHWyd3kTYsJElLr input[lib micro\\u003abit] →on_button_pressed(\"B\");\n  #xregKwVEF7FuAUjf where `implicit` \\_body\\_() {\n    #cwZAbLXRz4aW5rkZ $paddle→change_y_by(1);\n  }\n  #xdRq7JGUl6BOhWsK basic[lib micro\\u003abit] →forever;\n  #EqqnOIfFy9hTWQkt where `implicit` \\_body\\_() {\n    #O31nNQcgm3V9q3at basic[lib micro\\u003abit] →pause(500);\n    #xNa4DdNTY3Rp2wZM $ball→move(1);\n    #OszsjBEfq4VxjnS4 if $ball→x = 0 then {\n      #tv2doKCLd8JeZj3b if $paddle→y ≠ $ball→y then {\n        #vfKYjiha0E346q6D control[lib micro\\u003abit] →reset;\n      }\n    }\n    #RQqLvxZWJGUf2vau $ball→if_on_edge\\u002c_bounce;\n    #NexnUUAILkC5kxqt if $ball→x = 0 then {\n      #xc1sfBAq2ujFBfj2 $ball→change_x_by(1);\n    }\n  }\n  meta private;\n  meta test;\n}\n#UxwYpEnnSWg0DNxW\naction set_blink(#aKrr34Wgo3kkbwZp sprite: * Led_Sprite, #hqkyJK2pO17MsVDC ms: Number) {\n  #IwFtTdIGBNUXLH5Y // Sets the blink duration interval in millisecond.\n  #x9O466bk8ufa2Yio // {hints:ms:100,50,200}\n  #xg2e74XGOsfxy48l $sprite→\\_blink := math→clamp(0, 10000, $ms);\n  meta sync;\n}\n#vjw2ol9RXAfcugGH\naction change_blink_by(#tiHtDdJLNoz1vvYz @this: * Led_Sprite, #xYGs397pRbQfSJYL ms: Number) {\n  #x7mcAB7o2E4JTjLx // Changes the ``blink`` duration by the given amount of millisecons\n  #xRtxfoag4GzP4P5w // {hints:ms:10}\n  #H16162bYai4of4DQ $@this→set_blink($@this→\\_blink + $ms);\n  meta sync;\n}\n#zIjNoKzrTHYAVS9A\naction blink(#xfOf8pD0DexU1uz2 @this: * Led_Sprite) returns(#xTF5bE4QTqBPBl8X r: Number) {\n  #fasvxj1L7NBocnta // Reports the ``blink`` duration of a sprite\n  #PlrHp3HKOnu50Qzg // {action:ignoreReturn}\n  #m4hy2L2dtnFC00Pk `return` $@this→\\_blink;\n  meta sync;\n}\n#x0npij8XjopQavcK meta import micro\\u003abit_game {\n  pub \"xgqnpl\"\n  usage {\n    action `sync` score() returns(score: Number)\n    action `sync` set_score(value: Number)\n    action `sync` life() returns(life: Number)\n    action `async` set_life(value: Number)\n    action `sync` add_score(points: Number)\n    action `async` add_life(lives: Number)\n    action `async` start_countdown(ms: Number)\n    action `async` game_over()\n    action `async` current_time() returns(ms: Number)\n    action `async` remove_life(life: Number)\n    action `async` level_up()\n    action `async` level() returns(lv: Number)\n    action `async` start_stopwatch()\n    action `sync` is_running() returns(running: Boolean)\n    action `async` show_score()\n    action `sync` is_game_over() returns(over: Boolean)\n  }\n  #zC5J5ehItETvjAK0 resolve micro\\u003abit = ♻ micro\\u003abit with {\n  }\n}\n#awExHfjoQJnV2nR1 meta import micro\\u003abit {\n  pub \"thflqk\"\n  usage {\n    type Image\n    action `sync` \\_libinit()\n    action `async` pause(ms: Number)\n    action `sync` clear_screen()\n    action `sync` width(@this: ♻ micro\\u003abit → Image) returns(w: Number)\n    action `async` scroll_image(@this: ♻ micro\\u003abit → Image, x_offset_per_step: Number, interval: Number)\n    action `sync` button_is_pressed(name: String) returns(pressed: Boolean)\n    action `sync` plot(x: Number, y: Number)\n    action `sync` point(x: Number, y: Number) returns(on: Boolean)\n    action `async` show_string(text: String, interval: Number)\n    action `sync` unplot(x: Number, y: Number)\n    action `sync` on_button_pressed(name: String, body: Action)\n    action `async` show_image(@this: ♻ micro\\u003abit → Image, x_offset: Number)\n    action `sync` compass_heading() returns(degrees: Number)\n    action `sync` acceleration(dimension: String) returns(millig: Number)\n    action `sync` digital_write_pin(name: String, value: Number)\n    action `sync` digital_read_pin(name: String) returns(value: Number)\n    action `sync` analog_read_pin(name: String) returns(value: Number)\n    action `sync` analog_write_pin(name: String, value: Number)\n    action `sync` create_image(leds: String) returns(img: ♻ micro\\u003abit → Image)\n    action `sync` brightness() returns(brightness: Number)\n    action `sync` set_brightness(value: Number)\n    action `async` show_animation(leds: String, interval: Number)\n    action `sync` running_time() returns(now: Number)\n    action `async` show_number(value: Number, interval: Number)\n    action `sync` set_pixel(@this: ♻ micro\\u003abit → Image, x: Number, y: Number, value: Boolean)\n    action `sync` pixel(@this: ♻ micro\\u003abit → Image, x: Number, y: Number) returns(state: Boolean)\n    action `sync` clear(img: ♻ micro\\u003abit → Image)\n    action `sync` in_background(body: Action)\n    action `async` calibrate()\n    action `sync` forever(body: Action)\n    action `sync` pin_is_pressed(name: String) returns(pressed: Boolean)\n    action `sync` on_pin_pressed(name: String, body: Action)\n    action `sync` tell_camera_to(@event: String)\n    action `sync` raise_alert_to(@event: String)\n    action `async` on_notified(@event: String, body: Action)\n    action `sync` notify_event_registration(evid: String)\n    action `sync` add_button(text: String, @action: Action)\n    action `sync` reset()\n    action `sync` warning(message: String)\n    action `sync` analog_set_period(pin: String, micros: Number)\n    action `sync` analog_set_pitch_pin(name: String)\n    action `async` analog_pitch(frequency: Number, ms: Number)\n    action `async` plot_frame(@this: ♻ micro\\u003abit → Image, index: Number)\n    action `async` show_leds(leds: String, ms: Number)\n    action `async` play_tone(frequency: Number, ms: Number)\n    action `sync` note_frequency(name: String) returns(frequency: Number)\n    action `sync` plot_leds(leds: String)\n    action `sync` plot_image(@this: ♻ micro\\u003abit → Image, x_offset: Number)\n    action `sync` temperature() returns(temp: Number)\n    action `sync` stop_animation()\n    action `async` show_frame(img: ♻ micro\\u003abit → Image, frame: Number)\n    action `sync` queue_event(body: Action, name: String)\n    action `async` ring_tone(frequency: Number)\n    action `sync` tell_remote_control_to(@event: String)\n    action `sync` map(value: Number, from_low: Number, from_high: Number, to_low: Number, to_high: Number) returns(r: Number)\n    action `sync` magnetic_force(dimension: String) returns(millig: Number)\n    action `sync` servo_write_pin(name: String, value: Number)\n    action `sync` servo_set_pulse(pin: String, micros: Number)\n    action `async` rest(ms: Number)\n    action `async` rotation(kind: String) returns(angle: Number)\n    action `sync` note(name: String) returns(frequency: Number)\n    action `sync` set_pixel_brightness(@this: ♻ micro\\u003abit → Image, x: Number, y: Number, value: Number)\n    action `sync` pixel_brightness(@this: ♻ micro\\u003abit → Image, x: Number, y: Number) returns(state: Number)\n    action `sync` set_display_mode(mode: String)\n  }\n}\n",
  "lohjia": "meta version \"v2.2,js,ctx,refs,localcloud,unicodemodel,allasync,upperplex\";\nmeta name \"micro:bit serial\";\nmeta rootId \"J14qS9W69xfJRs1Wg6l4bL8j\";\nmeta isLibrary \"yes\";\nmeta hasIds \"yes\";\nmeta platform \"current\";\nmeta parentIds \"\";\n// A #microbit library to print messages to the serial port.\n#Jb2ciAJpCpybcXGj\naction write_line(#viL9JhCNnO3GFckc text: String) {\n  #qd8bnGggS2t7YSVF // Prints a line of text to the serial\n  #Ht90vVwzb9x642mt // {namespace:serial}\n  #R4f2PuqLYHK2Gtcr code→write_string($text);\n  #giwZfV8Lt049ksV2 code→write_string(\"\\r\\n\");\n  meta sync;\n}\n#KayLKTp6ax4o8wIi meta import micro\\u003abit {\n  pub \"jnjqgc\"\n  usage {\n    type Image\n    action `sync` \\_libinit()\n    action `async` pause(ms: Number)\n    action `sync` clear_screen()\n    action `sync` width(@this: ♻ micro\\u003abit → Image) returns(w: Number)\n    action `async` scroll_image(@this: ♻ micro\\u003abit → Image, x_offset_per_step: Number, interval: Number)\n    action `sync` button_is_pressed(name: String) returns(pressed: Boolean)\n    action `sync` plot(x: Number, y: Number)\n    action `sync` point(x: Number, y: Number) returns(on: Boolean)\n    action `async` show_string(text: String, interval: Number)\n    action `sync` unplot(x: Number, y: Number)\n    action `sync` on_button_pressed(name: String, body: Action)\n    action `async` show_image(@this: ♻ micro\\u003abit → Image, x_offset: Number)\n    action `sync` compass_heading() returns(degrees: Number)\n    action `sync` acceleration(dimension: String) returns(millig: Number)\n    action `sync` digital_write_pin(name: String, value: Number)\n    action `sync` digital_read_pin(name: String) returns(value: Number)\n    action `sync` analog_read_pin(name: String) returns(value: Number)\n    action `sync` analog_write_pin(name: String, value: Number)\n    action `sync` create_image(leds: String) returns(img: ♻ micro\\u003abit → Image)\n    action `sync` brightness() returns(brightness: Number)\n    action `sync` set_brightness(value: Number)\n    action `async` show_animation(leds: String, interval: Number)\n    action `sync` running_time() returns(now: Number)\n    action `async` show_number(value: Number, interval: Number)\n    action `sync` set_pixel(@this: ♻ micro\\u003abit → Image, x: Number, y: Number, value: Boolean)\n    action `sync` pixel(@this: ♻ micro\\u003abit → Image, x: Number, y: Number) returns(state: Boolean)\n    action `sync` clear(img: ♻ micro\\u003abit → Image)\n    action `sync` in_background(body: Action)\n    action `async` calibrate()\n    action `sync` forever(body: Action)\n    action `sync` pin_is_pressed(name: String) returns(pressed: Boolean)\n    action `sync` on_pin_pressed(name: String, body: Action)\n    action `sync` remote_control(@event: String)\n    action `sync` camera(@event: String)\n    action `sync` audio_recorder(@event: String)\n    action `sync` alert(@event: String)\n    action `sync` notify_event_registration(evid: String)\n    action `sync` add_button(text: String, @action: Action)\n    action `sync` reset()\n    action `sync` warning(message: String)\n    action `sync` analog_set_period(pin: String, micros: Number)\n    action `sync` analog_set_pitch_pin(name: String)\n    action `async` analog_pitch(frequency: Number, ms: Number)\n    action `async` plot_frame(@this: ♻ micro\\u003abit → Image, index: Number)\n    action `async` show_leds(leds: String, ms: Number)\n    action `async` play_note(frequency: Number, ms: Number)\n    action `sync` note(name: String) returns(frequency: Number)\n    action `sync` plot_leds(leds: String)\n    action `sync` plot_image(@this: ♻ micro\\u003abit → Image, x_offset: Number)\n    action `sync` temperature() returns(temp: Number)\n    action `sync` stop_animation()\n    action `async` show_frame(img: ♻ micro\\u003abit → Image, frame: Number)\n  }\n}\n#AABkMop1Z4RJQfcY\naction example() {\n  #vIxCYZlAfMloWGOR // This library provides functionalities to read and write data to the serial port.\n  #obJL2omLuN5vNWGX // * print a line of text (the new line character is added automatially)\n  #xfS6oh3qhUuVm3ee code→write_line(\"hello\");\n  #USJSQxggyA9b7Xk5 // * print a piece of text\n  #DJAddA2AQVd3x44R code→write_string(\"world\");\n  #ZGvSLSTMY2eH7BGS // * print a number.\n  #CPTexj2njchbeTaq code→write_number(5);\n  #FoTvRhTUX9cuCH4G // * write a key-value pair formatted as ``key: value``.\n  #xNrXN2N2zI6RANiH code→write_value(\"temp\", 5);\n  #gnakx4J3bNeA6l5y // * read a line of text from Serial\n  #xMVREMMWm4TP690d $msg := code→read_string;\n  meta private;\n}\n#pvd0wLlxZ7vuecCJ\naction write_number(#k2kI6XM6EpaLIU35 value: Number) {\n  #UPZWaaK4FPhqLQv5 // Prints a numeric value to the serial\n  #ABpnPKKwPATyuC4K // {namespace:serial}\n  #xyMeH7KZaUtgWna4 code→write_string($value→to_string);\n  meta sync;\n}\n#hGNQralaeJZymMYt\naction read_string() returns(#mR5YbOZ9oVeKJhbt msg: String) {\n  #Of7tDy94qf27pF8n // Reads a line of text from the serial port.\n  #xjcz6ZTqNS4rrHiN // {namespace:serial}\n  #rndC9WsJA7TzRqJw // {shim:uBit.serial.readString}\n  #xUvA7hlR41fO4O3S $msg := \"\";\n  meta sync;\n}\n#RihJksfYn4XsFVvo\naction write_string(#xCSsMIN55sl47uJy text: String) {\n  #gQl2sBm102NFdm2r // Sends a piece of text through Serial connection.\n  #xaRZMDD1PnoAssMk // {namespace:serial}\n  #E2GfoM3vov7PqeyA // {shim:uBit.serial.sendString}\n  #MZsKH7uN4oOrAkYD if data→logger→is_invalid then {\n    #xI2Zu2L2Lb9tvgAS data→logger := app→create_logger(\"simulator\");\n    #E2SUJPexCTkCqWoA data→buffer := \"\";\n  }\n  #dxqLroF89D9FBaiI data→buffer := data→buffer ∥ $text;\n  #z7tR5L7oMAlwH4gu $i := data→buffer→index_of(\"\\n\", 0);\n  #LS2Xmww1aZuQammy while $i > - 1 do {\n    #x4eGXbX2v6z0SE5y data→logger→info(data→buffer→substring(0, $i - 1));\n    #esc5CnL0W2BjsgA5 data→buffer := data→buffer→substring($i + 1, data→buffer→count - $i);\n    #EWO0d4UsugWoDRjW $i := data→buffer→index_of(\"\\n\", 0);\n  }\n  meta sync;\n}\n#ofbblREfGQlVQeKu\naction write_image(#gyH7VhnFqZTOycIl img: ♻ micro\\u003abit → Image) {\n  #xO6AG2n8p2M0iRM9 // Sends an image through Serial connection in CSV format.\n  #i9igu656RRwxytVx // {namespace:serial}\n  #sx5zVhpQfuMHxxmC // {shim:uBit.serial.sendImage}\n  #dfiCwNN06R38ZYRQ code→write_string(\"write image\");\n  meta sync;\n}\n#x4YEGlXH9CPn24qF\naction write_screen() {\n  #W6GWMYLuhTKpZfVd // Sends the current pixel values, byte-per-pixel, over serial.\n  #MaKPhWXTpJB2NNWZ // {namespace:serial}\n  #ejsGWhn5BXXX8fl4 // {shim:uBit.serial.sendDisplayState}\n  #AA2MkYF4heyXTuSP code→write_string(\"write screen\");\n  meta sync;\n}\n#x6Hp3T5XixrKOXp4\naction read_screen() {\n  #xkl7dNT5Lc785ZVZ // Reads the screen from serial.\n  #ApoeWPHDMVNc7MjB // {namespace:serial}\n  #tZxNxHtIuaSuvjo0 // {shim:uBit.serial.readDisplayState}\n  #eUUa4Y2jh2Gby4Ls app→log(\"serial: read screen\");\n  meta sync;\n}\n#xBHnPm4TuXZ1XJba\naction read_image() returns(#i9cIYIjnk4B1camX img: ♻ micro\\u003abit → Image) {\n  #HKBSShuS3IHZZKK3 // Reads a 5x5 image from the serial port.\n  #xvg6N07oMKfwiZHk // {namespace:serial}\n  #xKaSva7IbKCilyF8 // {hints:columns:5,10,15}\n  #t3L7RQAYTB4ch4Fj // {shim:uBit.serial.readImage}\n  #xbuEE8By6wuVCMZn $img := image[lib micro\\u003abit] →create_image(\"\");\n  meta sync;\n}\n#zPbJPfnPazeARtdv\naction write_value(#OgjzGItCA4ZJ4BzL name: String, #Vles4eqMyGBPIrfR value: Number) {\n  #VS9lEdypH2IAyWO6 // Writes a ``name: value`` pair line to the serial.\n  #x9jpo8ecP95VZ6PJ // {namespace:serial}\n  #tIIbV2VmG3JI2Q1Z // {weight:80}\n  #gj2gRu3mQINbNkri code→write_string($name);\n  #eYR5noToKqFF6E94 code→write_string(\": \");\n  #Zf7NNdlvoPDrwtMy code→write_number($value);\n  #byMfp2eAi2r7tJ1O code→write_line(\"\");\n  meta sync;\n}\n#kyNCj4TkYFS3fVSb\nvar buffer : String {\n  // {shim:}\n  transient = true;\n}\n#ObzPYQYVl4tjVK9D\nvar logger : App_Logger {\n  // {shim:}\n  transient = true;\n}\n#WnPrTNC3u44ZZOn6\naction test() {\n  #AeRsf2ESRnySmzle // {shim:}\n  #AMj8TxEWtoGWsERs code→write_string(\"abc\");\n  #TK2ZMRUQ2TOXpOa2 code→write_line(\"line\");\n  #pMkSlVs4iOUkZXf1 code→write_line(\"line 2\");\n  #x6rU5ty6bc2OoaN7 for 0 ≤ i < 100 do {\n    #bGiqKsnmXiwKPH2z code→write_value(\"x\", $i * $i);\n  }\n  meta private;\n  meta test;\n}\n",
  "jztbbx": "meta version \"v2.2,js,ctx,refs,localcloud,unicodemodel,allasync,upperplex\";\nmeta name \"micro:bit senses\";\nmeta rootId \"zm342lGQufsImTJsY2Mjd6OL\";\nmeta isLibrary \"yes\";\nmeta hasIds \"yes\";\nmeta platform \"current\";\nmeta parentIds \"\";\n// A #microbit library that exposes orientation and movement events.\n#xwOq4wuI8tUXxrHj\naction on_screen_up(#Zm23L35zAoZ5xaUM body: Action) {\n  #MpPu5BNli80ud2U6 // Attaches code to run when the screen is facing up.\n  #xhao1j41emG2VOxP // {namespace:input}\n  #WdKqPeQdt8TOCgKu // {help:functions/on-screen-up}\n  #E4B0WT3YTg0B26mq simulator[lib micro\\u003abit] →notify_event_registration(\"on screen up\");\n  #yb4F8TjWZB4lGJFg data→screen_up := $body;\n  #Y83at3q2DuxfruwD code→init;\n  meta sync;\n}\n#PrS2fWPpYL7FC6Wo meta import micro\\u003abit {\n  pub \"vzzjsk\"\n  usage {\n    type Image\n    action `sync` \\_libinit()\n    action `async` pause(ms: Number)\n    action `sync` clear_screen()\n    action `sync` width(@this: ♻ micro\\u003abit → Image) returns(w: Number)\n    action `async` scroll_image(@this: ♻ micro\\u003abit → Image, x_offset_per_step: Number, interval: Number)\n    action `sync` button_is_pressed(name: String) returns(pressed: Boolean)\n    action `sync` plot(x: Number, y: Number)\n    action `sync` point(x: Number, y: Number) returns(on: Boolean)\n    action `async` show_string(text: String, interval: Number)\n    action `sync` unplot(x: Number, y: Number)\n    action `sync` on_button_pressed(name: String, body: Action)\n    action `async` show_image(@this: ♻ micro\\u003abit → Image, x_offset: Number)\n    action `sync` compass_heading() returns(degrees: Number)\n    action `sync` acceleration(dimension: String) returns(millig: Number)\n    action `sync` digital_write_pin(name: String, value: Number)\n    action `sync` digital_read_pin(name: String) returns(value: Number)\n    action `sync` analog_read_pin(name: String) returns(value: Number)\n    action `sync` analog_write_pin(name: String, value: Number)\n    action `sync` create_image(leds: String) returns(img: ♻ micro\\u003abit → Image)\n    action `sync` brightness() returns(brightness: Number)\n    action `sync` set_brightness(value: Number)\n    action `async` show_animation(leds: String, interval: Number)\n    action `sync` running_time() returns(now: Number)\n    action `async` show_number(value: Number, interval: Number)\n    action `sync` set_pixel(@this: ♻ micro\\u003abit → Image, x: Number, y: Number, value: Boolean)\n    action `sync` pixel(@this: ♻ micro\\u003abit → Image, x: Number, y: Number) returns(state: Boolean)\n    action `sync` clear(img: ♻ micro\\u003abit → Image)\n    action `sync` in_background(body: Action)\n    action `async` calibrate()\n    action `sync` forever(body: Action)\n    action `sync` pin_is_pressed(name: String) returns(pressed: Boolean)\n    action `sync` on_pin_pressed(name: String, body: Action)\n    action `sync` remote_control(@event: String)\n    action `sync` camera(@event: String)\n    action `sync` audio_recorder(@event: String)\n    action `sync` alert(@event: String)\n    action `sync` plot_image(leds: String)\n    action `sync` notify_event_registration(evid: String)\n    action `sync` add_button(text: String, @action: Action)\n    action `sync` reset()\n    action `sync` warning(message: String)\n    action `sync` analog_set_period(pin: String, micros: Number)\n    action `sync` analog_set_pitch_pin(name: String)\n    action `async` analog_pitch(frequency: Number, ms: Number)\n    action `async` plot_frame(@this: ♻ micro\\u003abit → Image, index: Number)\n    action `async` show_leds(leds: String, ms: Number)\n    action `async` play_note(frequency: Number, ms: Number)\n    action `sync` note(name: String) returns(frequency: Number)\n  }\n}\n#cW5Eaba6g2xa58TR\naction on_screen_down(#KMHPPFLh79ILxEsC body: Action) {\n  #AMcAx2XgzUwf2TMM // Attaches code to run when the screen is facing down.\n  #jQPXP4X2PHIs9Muo // {namespace:input}\n  #ZdcCAkOLyBzyIBOy // {help:functions/on-screen-down}\n  #xdc4HMUwupE74u9V simulator[lib micro\\u003abit] →notify_event_registration(\"on screen down\");\n  #xTg7g7WPbHijTQqB data→screen_down := $body;\n  #Yc1eBaxVszGtkaPn code→init;\n  meta sync;\n}\n#t6BUCc8WlaifMQw2\nvar screen_state : Number {\n  transient = true;\n}\n#Yasq36DXnLkbHctP\naction detect() {\n  #SGGUvEQILsE9YGty // Detects if the orientation has changed and raises events if available.\n  #xB6p3z7B2SjlkiiU $accx := @\\u267b→micro\\u003abit→acceleration(\"x\");\n  #mS3ZTk4J0zBlNh4V $accy := @\\u267b→micro\\u003abit→acceleration(\"y\");\n  #tFPDfT34L7ESBdo0 $accz := @\\u267b→micro\\u003abit→acceleration(\"z\");\n  #iX3VlP2YLy1uy2XF // screen state: 0 = unknown, 1 = down, 2 = up, 3 = logo up, 4 = logo down\n  #E4BWU7aQLnOxMhWf code→detect_screen($accx, $accy, $accz);\n  #xrAqAGomTzw8jL2g code→detect_shake($accx, $accy, $accz);\n  meta private;\n}\n#bMJX2o4cp6UbgrWH\nvar screen_up : Action {\n  transient = true;\n}\n#aJTalpc0eYQrv7QQ\nvar screen_down : Action {\n  transient = true;\n}\n#eVHP6bRFyulckN6X\naction example() {\n  #aW2IRmUTax7OLDG2 // A library that exposes orientation and movement events. [read more...](/td/contents).\n  meta private;\n}\n#lhwojBx1CnMGhLPB\naction init() {\n  #xHJIJAFfGrSx2zlD if `not` data→\\_init then {\n    #hA5Iq3c70pT8TcD5 data→\\_init := true;\n    #xyqvAivXibKxY0RO control[lib micro\\u003abit] →in_background;\n    #MoqZci0II5zqP364 where `implicit` \\_body\\_() {\n      #xbWJI6pgYPHpwWiw while true do {\n        #xwonR7KDZ1XgHpL9 code→detect;\n        #UAhoHSTIEevYn5rp basic[lib micro\\u003abit] →pause(80);\n      }\n    }\n  }\n  meta private;\n  meta sync;\n}\n#xdoNy11ziwtWZlCo\naction on_shake(#iQzuA2ozltGMgcTU body: Action) {\n  #JTf89RIRRrxO9SnG // Attaches code to run when the device is shaken.\n  #x4x2vPoD9qOIvh7q // {namespace:input}\n  #KmZcvSqByA57L44B // {help:functions/on-shake}\n  #KExN3jsE0DMuPqLE simulator[lib micro\\u003abit] →notify_event_registration(\"on shake\");\n  #YUaLdMsVvnyHMnXG simulator[lib micro\\u003abit] →add_button(\"shake\", $body);\n  #kZT3dnZQyxuZq166 data→last_shake := input[lib micro\\u003abit] →running_time;\n  #xbZpVSJVwAeD6GRE data→shake := $body;\n  #x7QP0YR4O6RXtmXl code→init;\n  meta sync;\n}\n#chN4AnXG7yhK2AXu\nvar shake : Action {\n  transient = true;\n}\n#l5nnEGrJBtPBD6uu\nvar last_shake : Number {\n  transient = true;\n}\n#q3bSEBO2AnZaW4dr\naction on_logo_up(#V7xeUvewokw5LxJn body: Action) {\n  #xDMX0HWkSWDtE0Tq // Attaches code to run when the logo is oriented upwards and the board is vertical.\n  #zUK2prvTnaAoT7md // {namespace:input}\n  #Gyr2W2ZXOCkfIMXd // {help:functions/on-logo-up}\n  #EdHSaeQmax51CBmq simulator[lib micro\\u003abit] →notify_event_registration(\"on logo up\");\n  #MaBgsJCEaDfkBf64 data→logo_up := $body;\n  #fwMBTN84PCeAj72Q code→init;\n  meta sync;\n}\n#S2o2JJdwYJhisAXp\nvar logo_up : Action {\n  transient = true;\n}\n#xUVten7m0vVmyA4R\nvar \\_init : Boolean {\n  transient = true;\n}\n#joy4eey9DDzC8HR2\naction detect_shake(#tHRDEldGJ4ue8ool accx: Number, #JLClk08tfyKwJmGH accy: Number, #CLOKXkFToen6qwJ9 accz: Number) {\n  #xtI6yHh4BtZCqR3Q if `not` data→shake→is_invalid then {\n    #HtnSKlCS2Xu9pWz1 $now := @\\u267b→micro\\u003abit→running_time;\n    #BthNMTUVySeX0Nyo $ming := 180 * 180;\n    #T4iDX31OZHOlEJd8 $debunk := 1500;\n    #xSGwMi25c0coQQts if $now - data→last_shake > $debunk then {\n      #fnMxF6aP4yeF6GUy $\\u007c\\u007ca\\u007c\\u007c\\u005e2 := $accx / 10 * $accx / 10 + $accy / 10 * $accy / 10 + $accz / 10 * $accz / 10;\n      #x2pNcYJa9kVrZzQ2 if $\\u007c\\u007ca\\u007c\\u007c\\u005e2 > $ming then {\n        #IIwfoyiSwpLzFvvP data→last_shake := $now;\n        #xPHE9AGXfXGi4lrD data→shake→run;\n      }\n    }\n  }\n  meta private;\n}\n#GVBYI3VMRbqoNfnB\naction detect_screen(#HjxZTbKfdDrNgiSW accx: Number, #ryLNBYcAXIyw99pb accy: Number, #Wk0emOygMMselU76 accz: Number) {\n  #OnPPZzfv2DrkD51t $is_flat := math→abs($accx) + math→abs($accy) < 500;\n  #KTztF0grpXNSfDmp $is_vertical := math→abs($accx) + math→abs($accz) < 500;\n  #x4JdPKoQnVxk29jj if $accz > 500 `and` $is_flat then {\n    #UkMmR3drUtXAuLxj if data→screen_state ≠ 1 then {\n      #Cj9au3agUL3VTXpO data→screen_state := 1;\n      #dBOsHPiFM8ZsQIT7 code→run(data→screen_down);\n    }\n  }\n  else { #ONuoM34BWCyrmusn if $accz < - 500 `and` $is_flat then {\n    #P8bC9epU8M9PMthm if data→screen_state ≠ 2 then {\n      #LAkfBQP2OPSE9wG4 data→screen_state := 2;\n      #YFtNJxzp3xOetkxg code→run(data→screen_up);\n    }\n  }\n  else { #NQ8roiFE5R3evNyA if $accy > 500 `and` $is_vertical then {\n    #wKAufKYGbc4Bf4f2 if data→screen_state ≠ 3 then {\n      #PTYU9inhX4ypWy4k data→screen_state := 3;\n      #zHl0rsD21pWm0B2V code→run(data→logo_up);\n    }\n  }\n  else { #xqOU4XCzSA95y1lP if $accy < - 500 `and` $is_vertical then {\n    #HQn4YeL20sul4fRk if data→screen_state ≠ 4 then {\n      #dzddbU1SCv7f9Iip data→screen_state := 4;\n      #Tdpys1iOeS6bIp4E code→run(data→logo_down);\n    }\n  }\n  else {\n    #W8JvPbZlWjgyyW8c // // other state, reset state engine\n    #ow9eps4LUTwKFv2O data→screen_state := 0;\n  }\n  } } } \n  meta private;\n}\n#q6oYfrMSlJuMnKCb\naction on_logo_down(#JBP7dSSZZ5CW05l5 body: Action) {\n  #xzt2NAugK2mmviuz // Attaches code to run when the logo is oriented downwards and the board is vertical.\n  #AafRbGbssZIrx4wW // {namespace:input}\n  #x7OLuFYYKkdCQ2fL // {help:functions/on-logo-down}\n  #Y0VL8QH6mDTxdO2h simulator[lib micro\\u003abit] →notify_event_registration(\"on logo down\");\n  #xU60Xk2Bqg5VlOWx data→logo_down := $body;\n  #f27pU1IPNnF4rxZK code→init;\n  meta sync;\n}\n#x4S5FO3oacwG7q6C\nvar logo_down : Action {\n  transient = true;\n}\n#xKtZXebPhpGkz5MM\naction run(#AiTi5d6ioX2KIbLl f: Action) {\n  #ghdujUmazcH7hXMr if `not` $f→is_invalid then {\n    #fZONblMHRCsaFKLv $f→run;\n  }\n  meta private;\n}\n",
  "tgpxru": "meta version \"v2.2,js,ctx,refs,localcloud,unicodemodel,allasync,upperplex\";\nmeta name \"micro:bit screen\";\nmeta rootId \"V5599nbmoYZQw1w33khHVtMh\";\nmeta isLibrary \"yes\";\nmeta hasIds \"yes\";\nmeta splitScreen \"yes\";\nmeta platform \"current\";\nmeta parentIds \"\";\n// Specialized functions to control the screen #microbit\n#mExzaWj10ZHeHz4P meta import micro\\u003abit {\n  pub \"tuzezw\"\n  usage {\n    type Image\n    action `sync` \\_libinit()\n    action `async` pause(ms: Number)\n    action `sync` clear_screen()\n    action `sync` width(@this: ♻ micro\\u003abit → Image) returns(w: Number)\n    action `async` scroll_image(@this: ♻ micro\\u003abit → Image, x_offset_per_step: Number, interval: Number)\n    action `sync` button_is_pressed(name: String) returns(pressed: Boolean)\n    action `sync` plot(x: Number, y: Number)\n    action `sync` point(x: Number, y: Number) returns(on: Boolean)\n    action `async` show_string(text: String, interval: Number)\n    action `sync` unplot(x: Number, y: Number)\n    action `sync` on_button_pressed(name: String, body: Action)\n    action `async` show_image(@this: ♻ micro\\u003abit → Image, x_offset: Number)\n    action `sync` compass_heading() returns(degrees: Number)\n    action `sync` acceleration(dimension: String) returns(millig: Number)\n    action `sync` digital_write_pin(name: String, value: Number)\n    action `sync` digital_read_pin(name: String) returns(value: Number)\n    action `sync` analog_read_pin(name: String) returns(value: Number)\n    action `sync` analog_write_pin(name: String, value: Number)\n    action `sync` create_image(leds: String) returns(img: ♻ micro\\u003abit → Image)\n    action `sync` brightness() returns(brightness: Number)\n    action `sync` set_brightness(value: Number)\n    action `async` show_animation(leds: String, interval: Number)\n    action `sync` running_time() returns(now: Number)\n    action `async` show_number(value: Number, interval: Number)\n    action `sync` set_pixel(@this: ♻ micro\\u003abit → Image, x: Number, y: Number, value: Boolean)\n    action `sync` pixel(@this: ♻ micro\\u003abit → Image, x: Number, y: Number) returns(state: Boolean)\n    action `sync` clear(img: ♻ micro\\u003abit → Image)\n    action `sync` in_background(body: Action)\n    action `async` calibrate()\n    action `sync` forever(body: Action)\n    action `sync` pin_is_pressed(name: String) returns(pressed: Boolean)\n    action `sync` on_pin_pressed(name: String, body: Action)\n    action `sync` tell_camera_to(@event: String)\n    action `sync` raise_alert_to(@event: String)\n    action `async` on_notified(@event: String, body: Action)\n    action `sync` notify_event_registration(evid: String)\n    action `sync` add_button(text: String, @action: Action)\n    action `sync` reset()\n    action `sync` warning(message: String)\n    action `sync` analog_set_period(pin: String, micros: Number)\n    action `sync` analog_set_pitch_pin(name: String)\n    action `async` analog_pitch(frequency: Number, ms: Number)\n    action `async` plot_frame(@this: ♻ micro\\u003abit → Image, index: Number)\n    action `async` show_leds(leds: String, ms: Number)\n    action `async` play_tone(frequency: Number, ms: Number)\n    action `sync` note_frequency(name: String) returns(frequency: Number)\n    action `sync` plot_leds(leds: String)\n    action `sync` plot_image(@this: ♻ micro\\u003abit → Image, x_offset: Number)\n    action `sync` temperature() returns(temp: Number)\n    action `sync` stop_animation()\n    action `async` show_frame(img: ♻ micro\\u003abit → Image, frame: Number)\n    action `sync` queue_event(body: Action, name: String)\n    action `async` ring_tone(frequency: Number)\n    action `sync` tell_remote_control_to(@event: String)\n    action `sync` map(value: Number, from_low: Number, from_high: Number, to_low: Number, to_high: Number) returns(r: Number)\n    action `sync` magnetic_force(dimension: String) returns(millig: Number)\n    action `sync` servo_write_pin(name: String, value: Number)\n    action `sync` servo_set_pulse(pin: String, micros: Number)\n    action `async` rest(ms: Number)\n    action `async` rotation(kind: String) returns(angle: Number)\n    action `sync` note(name: String) returns(frequency: Number)\n    action `sync` set_pixel_brightness(@this: ♻ micro\\u003abit → Image, x: Number, y: Number, value: Number)\n    action `sync` pixel_brightness(@this: ♻ micro\\u003abit → Image, x: Number, y: Number) returns(state: Number)\n    action `sync` set_display_mode(mode: String)\n    action `async` play_note(frequency: Number, ms: Number)\n    action `sync` light_level() returns(light: Number)\n  }\n}\n#ljbL9TDyViQp60st\naction toggle(#VUPjYYFrhOWw74RY x: Number, #nnwwBs7Gvq4QOFhz y: Number) {\n  #xv1X4QIgYlNaMo2l // Toggles a particular pixel\n  #QLttuQ85laW9BGaZ // {namespace:led}\n  #x2e61yB2AlBJwsM5 // {help:functions/toggle}\n  #FgmFzMhIDa7kfWlW if @\\u267b→micro\\u003abit→point($x, $y) then {\n    #JI1NCFlqtrqCyEod @\\u267b→micro\\u003abit→unplot($x, $y);\n  }\n  else {\n    #fr9fcMhf84RFYCe9 @\\u267b→micro\\u003abit→plot($x, $y);\n  }\n  meta sync;\n}\n#x3aHYXZCFqQM4N5z\naction plot_all() {\n  #Kf7bsANqYZRuDX8A // Turns all LEDS on\n  #xfEAxWsrYpI8LsrE // {namespace:led}\n  #xeNqHFR4dPLWb9Gl // {help:functions/plot-all}\n  #XTQai3Nb2nzgE04T for 0 ≤ i < 5 do {\n    #sZ4AYvycaWDrPWQR for 0 ≤ j < 5 do {\n      #zK0BvwMjXrxYI5u5 led[lib micro\\u003abit] →plot($i, $j);\n    }\n  }\n  meta sync;\n}\n#vsHySw7q1f2qmubh\naction example() {\n  #xQ2zrKasHUhouu4h // Some useful helpers to handle the LED screen. [read more...](/td/contents)\n  meta private;\n}\n#jwEvxEXkWvhLQCaf\naction toggle_all() {\n  #VYZ0MOonSM7SZ4SO // Inverts the current LED display\n  #g0PQAlQ9DWRcDJT2 // {namespace:led}\n  #XteinmSV9nf35axp // {help:functions/toggle-all}\n  #LOVe1FvXIuQSpOdt for 0 ≤ i < 5 do {\n    #AYxwUImNsW2NTTew for 0 ≤ j < 5 do {\n      #xy1D6qKToA7LgBRZ code→toggle($i, $j);\n    }\n  }\n  meta sync;\n}\n#gFU1OsaYQ427Dy3x\naction fade_in(#NkDJQP4M8hf8ByOK ms: Number) {\n  #sbtvSbGxGQsyil0Z // Fades in the screen display.\n  #YZm7yA5dpchXMk25 // {namespace:led}\n  #pWluOjC4UFxfEwYh // {hints:ms:700,2000}\n  #xCnB7Oisl6i2Ej4M // {help:functions/fade-in}\n  #wjhIzkepLWuKwtcO if $ms < 20 then {\n    #xobsfoi3mQdcjO4f @\\u267b→micro\\u003abit→set_brightness(255);\n    #dyWd0Vf8y8oZY3rB `return` ;\n  }\n  #YqgDyN4nF1eYtrSV $dt := 50;\n  #a920O1mg2GuXQTdD $brightness := @\\u267b→micro\\u003abit→brightness;\n  #Q3yIM4g0fv6TytSC $start := @\\u267b→micro\\u003abit→running_time;\n  #Ru1viKxwftkHaSoQ $elapsed := 0;\n  #CLECm1gEDweUCejD while $elapsed < $ms do {\n    #bFUPUsryN4Z6mxac @\\u267b→micro\\u003abit→set_brightness($brightness + (255 - $brightness) * $elapsed / $ms);\n    #xm08jhWovN4w1CmZ @\\u267b→micro\\u003abit→pause($dt);\n    #evfXW0XSgZavco0w $elapsed := @\\u267b→micro\\u003abit→running_time - $start;\n  }\n  #xKQmhSBAvZrHDYSB @\\u267b→micro\\u003abit→set_brightness(255);\n}\n#x7QNRVcyyxuTqIfa\naction fade_out(#xx2JQS02XjfYMxJH ms: Number) {\n  #WHFGHq4tuyIIqh45 // Fades out the screen brightness.\n  #VQyMxftJmAQHvQRZ // {namespace:led}\n  #nzAVXXGFATNIDOmL // {hints:ms:700,2000}\n  #OcEhk39lQe4D6COp // {help:functions/fade-out}\n  #sK5afunPQhe58NjZ if $ms < 20 then {\n    #x1qzvgufpPMfMBeo @\\u267b→micro\\u003abit→set_brightness(0);\n    #OioXNl3u7319hz8B `return` ;\n  }\n  #x71hff5Cad3PEqM5 $brightness := @\\u267b→micro\\u003abit→brightness;\n  #OjIQYJFPlSls9mPg $dt := 50;\n  #pwHkHlg81w7LJQdF $start := @\\u267b→micro\\u003abit→running_time;\n  #Zkzghv82gIfqZg8A $elapsed := 0;\n  #JjDiXM24mWUDhxDI while $elapsed < $ms do {\n    #yQM8M8NLZgZujKEu @\\u267b→micro\\u003abit→set_brightness($brightness - $brightness * $elapsed / $ms);\n    #cmBIrPftfbuXykXz @\\u267b→micro\\u003abit→pause($dt);\n    #xU5b9vdOhBdVPfZX $elapsed := @\\u267b→micro\\u003abit→running_time - $start;\n  }\n  #Ff2KRjXjWXdADj8r @\\u267b→micro\\u003abit→set_brightness(0);\n}\n#ruZ2GUlDTR5PTZhd\naction test_fade() {\n  #mHo56GPjrBIBbrXn // {shim:}\n  #xuX2QaesZ3fv68zC @\\u267b→micro\\u003abit→plot(2, 2);\n  #UGqmIER3apEDwBvY while true do {\n    #kkkohXu3WnU1V4lc code→fade_out(700);\n    #UD2rxEyf4vHJh1nV code→fade_in(700);\n  }\n  meta private;\n  meta test;\n}\n#JzsKhABDnEUitS2i\naction screenshot() returns(#xqf63n34DRJFpmqH img: ♻ micro\\u003abit → Image) {\n  #F9xzUugwJ3pSz2Jl // Takes a screenshot of the LED screen and returns an image.\n  #y2Nlin4tWBVdqYY1 // {namespace:led}\n  #Hzg49aPDJ5V4z35P // {shim:uBit.display.screenShot}\n  #XTef15xe4sxw76s2 // {help:functions/screenshot}\n  #ku7MF9fWJoUuVkyq $img := image[lib micro\\u003abit] →create_image(\"\");\n  #oUq2AzKEBn6NX5zt for 0 ≤ i < 5 do {\n    #xv5N8Sypi9Neisg7 for 0 ≤ j < 5 do {\n      #xb55AcpSLBkazRcr if led[lib micro\\u003abit] →point($i, $j) then {\n        #xBwclcbBPNTlPuR4 $img→set_pixel($i, $j, true);\n      }\n    }\n  }\n  meta sync;\n}\n#ovd9A8N30ut1go7D\naction plot_bar_graph(#hpG4t1C3SqiqVFVZ value: Number, #ZCK5n2unSOxU42XY high: Number) {\n  #zOTs2HbFZSsGIcZt // Displays a vertical bar graph based on the ``value`` and ``high`` value.\n  #xlNlnrVrytCbk5TQ // {hints:high:1023}\n  #qS76fFIpRiOAJ9r7 // {namespace:led}\n  #PfHFzO6Dk5aRnuIz // {help:/functions/plot-bar-graph}\n  #xIIhHcSXRfTjjsGE // {weight:20}\n  #xMI934nNAoZ2D22k $v := pins[lib micro\\u003abit] →map(math→abs($value), 0, $high, 0, 5);\n  #xVN6w2AP5InoeHt3 if $v ≤ 0 then {\n    #JQAjkd892SfAZVaM basic[lib micro\\u003abit] →plot_leds(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 1 0 0\");\n  }\n  else { #Min3hDu7yaW5CsLL if $v = 1 then {\n    #Kipc7xzzcvftlk7v basic[lib micro\\u003abit] →plot_leds(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n1 1 1 1 1\");\n  }\n  else { #xz3ssI2E8u04Qu26 if $v = 2 then {\n    #xFr4ltnLkVIMInA4 basic[lib micro\\u003abit] →plot_leds(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n1 1 1 1 1\\n1 1 1 1 1\");\n  }\n  else { #q8IuhLmS4sGFPO55 if $v = 3 then {\n    #x7wL822ySG1ZdJOi basic[lib micro\\u003abit] →plot_leds(\"0 0 0 0 0\\n0 0 0 0 0\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\");\n  }\n  else { #Gseh3zz4Rb8tB8JN if $v = 4 then {\n    #OGxguFRTl11Db823 basic[lib micro\\u003abit] →plot_leds(\"0 0 0 0 0\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\");\n  }\n  else {\n    #mlCNyfGnvQhrFhHW basic[lib micro\\u003abit] →plot_leds(\"1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\");\n  }\n  } } } } \n  meta sync;\n}\n#YzC6hAtAqg8JGJmu\naction test_bargraph() {\n  #ontCmUQv3BUJaI49 // {shim:}\n  #wvK4U1Vp0BRBgQTq while true do {\n    #x2dlLTWbHX2S134E $millig := input[lib micro\\u003abit] →acceleration(\"x\");\n    #xJUYwGoxp4Xoqezo code→plot_bar_graph($millig, 1023);\n    #YfuOoWp0VBU2DzXK basic[lib micro\\u003abit] →pause(100);\n  }\n  meta private;\n  meta test;\n}\n",
  "pzngyn": "meta version \"v2.2,js,ctx,refs,localcloud,unicodemodel,allasync,upperplex\";\nmeta name \"micro:bit music\";\nmeta rootId \"zcZxuG7jlicmbnRC8t33m4Dy\";\nmeta isLibrary \"yes\";\nmeta hasIds \"yes\";\nmeta platform \"current\";\nmeta parentIds \"\";\n// The music namespace #music\n#zYqnzT4hhd1sS9v5\naction tempo() returns(#CCovj83aLPTgGAt8 bpm: Number) {\n  #ueqedJC4g7ssLd5h // Returns the tempo in beats per minute. Tempo is the speed (bpm = beats per minute) at which notes play. The larger the tempo value, the faster the notes will play.\n  #NCyRjHyFCpsvUpgi // {namespace:music}\n  #Wwx0VF4pDf4tWbsx // {help:/functions/tempo}\n  #n5fWBFaxGoZn6a59 code→init;\n  #vvGXAa6I2U4YBHIg `return` data→beats_per_minute;\n  meta sync;\n}\n#r0rxopDDamerRRAb meta import micro\\u003abit {\n  pub \"nvzoiu\"\n  usage {\n    type Image\n    action `sync` \\_libinit()\n    action `async` pause(ms: Number)\n    action `sync` clear_screen()\n    action `sync` width(@this: ♻ micro\\u003abit → Image) returns(w: Number)\n    action `async` scroll_image(@this: ♻ micro\\u003abit → Image, x_offset_per_step: Number, interval: Number)\n    action `sync` button_is_pressed(name: String) returns(pressed: Boolean)\n    action `sync` plot(x: Number, y: Number)\n    action `sync` point(x: Number, y: Number) returns(on: Boolean)\n    action `async` show_string(text: String, interval: Number)\n    action `sync` unplot(x: Number, y: Number)\n    action `sync` on_button_pressed(name: String, body: Action)\n    action `async` show_image(@this: ♻ micro\\u003abit → Image, x_offset: Number)\n    action `sync` compass_heading() returns(degrees: Number)\n    action `sync` acceleration(dimension: String) returns(millig: Number)\n    action `sync` digital_write_pin(name: String, value: Number)\n    action `sync` digital_read_pin(name: String) returns(value: Number)\n    action `sync` analog_read_pin(name: String) returns(value: Number)\n    action `sync` analog_write_pin(name: String, value: Number)\n    action `sync` create_image(leds: String) returns(img: ♻ micro\\u003abit → Image)\n    action `sync` brightness() returns(brightness: Number)\n    action `sync` set_brightness(value: Number)\n    action `async` show_animation(leds: String, interval: Number)\n    action `sync` running_time() returns(now: Number)\n    action `async` show_number(value: Number, interval: Number)\n    action `sync` set_pixel(@this: ♻ micro\\u003abit → Image, x: Number, y: Number, value: Boolean)\n    action `sync` pixel(@this: ♻ micro\\u003abit → Image, x: Number, y: Number) returns(state: Boolean)\n    action `sync` clear(img: ♻ micro\\u003abit → Image)\n    action `sync` in_background(body: Action)\n    action `async` calibrate()\n    action `sync` forever(body: Action)\n    action `sync` pin_is_pressed(name: String) returns(pressed: Boolean)\n    action `sync` on_pin_pressed(name: String, body: Action)\n    action `sync` tell_camera_to(@event: String)\n    action `sync` raise_alert_to(@event: String)\n    action `async` on_notified(@event: String, body: Action)\n    action `sync` notify_event_registration(evid: String)\n    action `sync` add_button(text: String, @action: Action)\n    action `sync` reset()\n    action `sync` warning(message: String)\n    action `sync` analog_set_period(pin: String, micros: Number)\n    action `sync` analog_set_pitch_pin(name: String)\n    action `async` analog_pitch(frequency: Number, ms: Number)\n    action `async` plot_frame(@this: ♻ micro\\u003abit → Image, index: Number)\n    action `async` show_leds(leds: String, ms: Number)\n    action `async` play_tone(frequency: Number, ms: Number)\n    action `sync` note_frequency(name: String) returns(frequency: Number)\n    action `sync` plot_leds(leds: String)\n    action `sync` plot_image(@this: ♻ micro\\u003abit → Image, x_offset: Number)\n    action `sync` temperature() returns(temp: Number)\n    action `sync` stop_animation()\n    action `async` show_frame(img: ♻ micro\\u003abit → Image, frame: Number)\n    action `sync` queue_event(body: Action, name: String)\n    action `async` ring_tone(frequency: Number)\n    action `sync` tell_remote_control_to(@event: String)\n    action `sync` map(value: Number, from_low: Number, from_high: Number, to_low: Number, to_high: Number) returns(r: Number)\n    action `sync` magnetic_force(dimension: String) returns(millig: Number)\n    action `sync` servo_write_pin(name: String, value: Number)\n    action `sync` servo_set_pulse(pin: String, micros: Number)\n    action `async` rest(ms: Number)\n    action `async` rotation(kind: String) returns(angle: Number)\n  }\n}\n#kbBPLS46tSc5UOmQ\nvar beats_per_minute : Number {\n  transient = true;\n}\n#O6C1DkeyUnBA2l2C\naction change_tempo_by(#lsfxpXD2FhXQxNGk bpm: Number) {\n  #aqr1yNGtOahiiS2R // Change the tempo by the specified amount\n  #gMMNZPis7E1V40q2 // {hints:bpm:20}\n  #fb1CjjSTrsgDAAe6 // {namespace:music}\n  #eIVK0pUebdvQ1PGh // {help:/functions/tempo}\n  #UniNu8bLkhBkzmrU code→init;\n  #TF63Rbt1L4Asccr7 code→set_tempo(data→beats_per_minute + $bpm);\n}\n#SpEP5yVzmHkAcJGN\naction set_tempo(#RCUKT2icKMepsL3y bpm: Number) {\n  #n3ai84JWePfIRLXL // Sets the tempo to the specified amount\n  #k9gfHliR4ZsJDHFl // {hints:bpm:20}\n  #bI6a1Z3412AeIhCW // {namespace:music}\n  #z94g44g2YR0CR5Vw // {help:/functions/tempo}\n  #xktYXztr5YSoG1yX code→init;\n  #hQgb0VsrX4z2v6Fn if $bpm > 0 then {\n    #xf5KgzllgkClaTp8 data→beats_per_minute := math→max(1, $bpm);\n  }\n}\n#G7S48gzm3ze1gc4v\naction beat() returns(#hoFA5AiMYyzd23g3 ms: Number) {\n  #xH2OnLBAgNzAOUQ3 // Returns the duration of a beat in milli-seconds\n  #Sv6x7jD1FTiy8ocP // {namespace:music}\n  #PAeXs8UzPlBGhlLC // {help:/functions/beat}\n  #l0rdN6YLCsWTq7Bc // {weight:20}\n  #xNDIQQ29ooZVioJS code→init;\n  #zTcTGCwspFfZ6VaA `return` 60000 / data→beats_per_minute;\n  meta sync;\n}\n#HVvqA47Svm2C8JMG\naction init() {\n  #Kd2J2Q8MiYpFm2Dm if data→beats_per_minute ≤ 0 then {\n    #wnFL1JNUeq88d3d9 data→beats_per_minute := 120;\n  }\n  meta private;\n  meta sync;\n}\n",
  "tjwpnx": "meta version \"v2.2,js,ctx,refs,localcloud,unicodemodel,allasync,upperplex\";\nmeta name \"micro:bit profile\";\nmeta rootId \"jNYxMIKZwmM1Tt2iLWl9Hvzs\";\nmeta hasIds \"yes\";\nmeta splitScreen \"yes\";\nmeta platform \"current\";\nmeta parentIds \"\";\n// The list of #microbit supported APIs.\n#Lfh62trBUHiPyt65\naction main() {\n  #EHiM59bhD8SdJNdc // namespace order\n  #lYPvYSUJurXkntc3 basic[lib micro\\u003abit];\n  #y6kj0BBUYlWuwy6W led[lib micro\\u003abit];\n  #xPTTNHFnhdSz2dhl input[lib micro\\u003abit];\n  #D2z4dybkpmvwZyDo math;\n  #xVSeqKOnHOk6JFR2 music[lib micro\\u003abit];\n  #w9qtFNmNqcWH4xF9 game[lib micro\\u003abit_game];\n  #SNTTZp3SXz6JkWWX pins[lib micro\\u003abit];\n  #bD2m5z3BbloyYsFN devices[lib micro\\u003abit];\n  #FbxqDG6K9icP69Mq control[lib micro\\u003abit];\n  #jpHdDKNpGylh7PAD image[lib micro\\u003abit];\n  #xSn8t2IaNKG1wYPa bits;\n  #iBKCrFATYjJq1exg create;\n  #v2bLbE0rFvUVnt41 serial[lib micro\\u003abit_serial];\n  #SMxCdKRKLGsg2glO events[lib micro\\u003abit];\n  #ia5OhbXZnpECRsED // booleans\n  #IPjPGMDLDgCFYFQv $b := true;\n  #q2bFfxkeThFXBFk0 $b := false;\n  #xYMADcXfW3PqDTYO $b := $b `and` `not` $b `or` $b;\n  #y1h3f5k4zS2ow98i // numbers\n  #xuOJjbFpvOVe734G $x := 0;\n  #vRUKtRasZ3LLaLDi $x := $x + 1 - 1 * 1 / 1;\n  #qw2442wniqeMcATr $s2 := $x→to_character;\n  #GNVgb4Rv3z5MGD9M // convert to string\n  #AVZpO4XznZddsl4x $xs := $x→to_string;\n  #Ml4FF82JwXfw4oXh skip;\n  #iMtrXvO0vVbnrSif // math ops\n  #xN6L0k61CSKHhTpv $b2 := $x > $x `and` $x ≥ $x `and` $x < $x `and` $x ≤ $x `and` $x = $x `and` $x ≠ $x;\n  #xLpMe46s4AjhANFf // math functions\n  #ArcdgH4N2HCRJjQO $x := math→min(0, 0);\n  #xrAT2doldLWgGTnF $x := math→max(0, 0);\n  #F4V5YLK9ABuOOLG4 $x := math→abs(0);\n  #hdoPGaOZxi28TjVi $x := math→pow(0, 0);\n  #pjD21RoeFLPeOdEh $x := math→random(2);\n  #rMg0HgI1Y6mkhv2j $x := math→clamp(0, 2, 0);\n  #xlsQ3acfdGfr6ggj $x := math→mod(0, 0);\n  #q2P2GRUN1jiY15yW $x := math→sign(0);\n  #xS4hZqehw24D7Sog // bit operators\n  #RJOMUzeBx8e5vo2b bits→or_uint32(0, 0);\n  #oswTMG9LvJf67wT4 bits→and_uint32(0, 0);\n  #r4thhhgbQDaxi5NI bits→xor_uint32(0, 0);\n  #xRhlQ45wNJee42FE bits→shift_left_uint32(0, 0);\n  #xW2Iwc06EUjqWuXg bits→shift_right_uint32(0, 0);\n  #xR78521qrK4Itxq1 bits→rotate_right_uint32(0, 0);\n  #xmjdteXTzTUSF2JG bits→rotate_left_uint32(0, 0);\n  #wKD5XdCaANiSDZS7 // objects\n  #UQtoYBY1CERVcw9K $thing := records→Thing→create;\n  #LeDrah2RsZKT1pB7 $s4 := $thing→f;\n  #yatKuQljTswa4YV1 $thing→f := $s4;\n  #PeQnpqn1X99KPYqa $thing→is_invalid;\n  #gAKBi40RzKRzwv22 $thing→equals($thing);\n  #JEnNA1g0abp21gJ8 records→Thing→invalid;\n  #dwjKGUdJ0JXzBEr2 // collections\n  #x2fBIBqppWPrRtwg $coll := create→Collection_of→Number;\n  #V1jUmLAnDR9hfTzZ $coll→add(0);\n  #xpdMBA8WUOeoGVhf $coll→count;\n  #xUi2uGW4ugoFPgaw $coll→at(0);\n  #x3WYxOTBUpSyFXSF $coll→remove_at(0);\n  #y3yaErW59Cfbjc5a $coll→set_at(0, 0);\n  #UF5AYoLREb5jnAMW $coll→index_of(0, 0);\n  #IJSRaF7fXjhBwNMN $coll→remove(0);\n  #rdrL8PN4Uw9v26OU // strings\n  #mRe27YLotG80DdYr $s := \"test\";\n  #xRlJY4QhO4Fq4hJ8 $x2 := $s→to_character_code;\n  #SUvyxQSIw3TY3vW2 $s := $s→concat($s);\n  #xqD7p2y1I1qY6XLV $s := $s ∥ $s;\n  #WimJjEuFBoOizCqp $s := $s→substring(0, 0);\n  #fm7Y4HNaSi7jG2v3 $b := $s→equals(\"other\");\n  #xuAIL5NdAZ1KtF5N $sc := $s→count;\n  #gTeb4Xd82bliP9Gm $s3 := $s→at(0);\n  #LOpKfIPlDMsVUP2W $x3 := $s→to_number;\n  #sFNR99MXq2qcNn6A // actions: see run actions: see run actions: see run\n  #GItB3zzQlGKLva8E // language\n  #xWOrqmm28D1CwUqw if false then {\n    #umPuRv6PUVDM7goa skip;\n  }\n  else { #xIklxic0fgwN21vq if false then {\n    #XvFU71wc3Jdh9ooK `return` ;\n  }\n  else { } } \n  #QUxDFwGdBho6So46 while true do {\n    #xqbiIUoiP2fqU19Z skip;\n  }\n  #xTXiWXDOypaCgzx2 for 0 ≤ i < 10 do {\n    #V7R2z1u1veJzGB88 `break` ;\n  }\n  #xZ1ELRun4mad1PW7 // function calls\n  #x3bFUlCOYCfYKcWI if $x < 0 then {\n    #ZjV6o09yGjKJeC5l code→main;\n  }\n  #k4PTDaIFHqcXFso3 data→x := 0;\n  #FBCl2AsiYBT2BkKd // microbit apis\n  #lY4IxiRSVHUv1prz data→img := @\\u267b→micro\\u003abit→create_image(\"\");\n}\n#Wc1pO4N99lJnJtZj\nvar x : Number {\n  transient = true;\n}\n#NdBhY6y4JCp6AVvX\naction do_stuff(#xoRhpqBWrHKQ1wbj p: Number) returns(#uPnKPMlUDYKjtTpH r: Number) {\n  #R3v0NLKiT3NZzVqb `return` 1;\n}\n#Ebw62Hb2wL0dFNZw\naction run(#X6GWR42GD1IO8W95 p: Action) {\n  #tvk7682eRC1Qgml0 $b := $p→is_invalid;\n  #xJH443yIol2Lq8Ex $p→run;\n}\n#x0V58dtFBOlyU9Fk\nvar @action : Action {\n  transient = true;\n}\n#QGy8p7ggwOnDXD4z\nvar img : ♻ micro\\u003abit → Image {\n  transient = true;\n}\n#xvqxk1q4qCZk22MO meta import micro\\u003abit_screen {\n  pub \"tgpxru\"\n  usage {\n    action `sync` toggle(x: Number, y: Number)\n    action `sync` plot_all()\n    action `sync` toggle_all()\n    action `async` fade_in(ms: Number)\n    action `async` fade_out(ms: Number)\n    action `sync` screenshot() returns(img: ♻ micro\\u003abit → Image)\n    action `sync` plot_bar_graph(value: Number, high: Number)\n  }\n  #OE9022wXGJBOumFg resolve micro\\u003abit = ♻ micro\\u003abit with {\n  }\n}\n#P952wWx2TsBNbUPl meta import micro\\u003abit_senses {\n  pub \"jztbbx\"\n  usage {\n    action `sync` on_screen_up(body: Action)\n    action `sync` on_screen_down(body: Action)\n    action `sync` on_shake(body: Action)\n    action `sync` on_logo_up(body: Action)\n    action `sync` on_logo_down(body: Action)\n  }\n  #xtFHv49Gg2zXwu3M resolve micro\\u003abit = ♻ micro\\u003abit with {\n  }\n}\n#nxBsrWkksKmQnONy meta import micro\\u003abit_game {\n  pub \"rwbwnc\"\n  usage {\n    action `sync` score() returns(score: Number)\n    action `sync` set_score(value: Number)\n    action `sync` life() returns(life: Number)\n    action `async` set_life(value: Number)\n    action `sync` add_score(points: Number)\n    action `async` add_life(lives: Number)\n    action `async` start_countdown(ms: Number)\n    action `async` game_over()\n    action `async` current_time() returns(ms: Number)\n    action `async` remove_life(life: Number)\n    action `async` level_up()\n    action `async` level() returns(lv: Number)\n    action `async` start_stopwatch()\n    action `sync` is_running() returns(running: Boolean)\n    action `async` show_score()\n    action `sync` is_game_over() returns(over: Boolean)\n  }\n  #iFGAT33WIPN92bpo resolve micro\\u003abit = ♻ micro\\u003abit with {\n  }\n}\n#BVGhpbmca\ntable Thing {\n  type = \"Object\";\n  persistent = false;\n  fields {\n    #G6G2a0flquLAXiyj f : String\n  }\n}\n#DGIsFkv2N6nOcw2l meta import micro\\u003abit_serial {\n  pub \"lohjia\"\n  usage {\n    action `sync` write_line(text: String)\n    action `sync` write_number(value: Number)\n    action `sync` read_string() returns(msg: String)\n    action `sync` write_string(text: String)\n    action `sync` write_image(img: ♻ micro\\u003abit → Image)\n    action `sync` write_screen()\n    action `sync` read_screen()\n    action `sync` read_image() returns(img: ♻ micro\\u003abit → Image)\n    action `sync` write_value(name: String, value: Number)\n  }\n  #pGGACFQC2GSgng2H resolve micro\\u003abit = ♻ micro\\u003abit with {\n  }\n}\n#BD280UyphFhv6ijW meta import micro\\u003abit {\n  pub \"xgzgcy\"\n  usage {\n    type Image\n    action `sync` \\_libinit()\n    action `async` pause(ms: Number)\n    action `sync` clear_screen()\n    action `sync` width(@this: ♻ micro\\u003abit → Image) returns(w: Number)\n    action `async` scroll_image(@this: ♻ micro\\u003abit → Image, x_offset_per_step: Number, interval: Number)\n    action `sync` button_is_pressed(name: String) returns(pressed: Boolean)\n    action `sync` plot(x: Number, y: Number)\n    action `sync` point(x: Number, y: Number) returns(on: Boolean)\n    action `async` show_string(text: String, interval: Number)\n    action `sync` unplot(x: Number, y: Number)\n    action `sync` on_button_pressed(name: String, body: Action)\n    action `async` show_image(@this: ♻ micro\\u003abit → Image, x_offset: Number)\n    action `sync` compass_heading() returns(degrees: Number)\n    action `sync` acceleration(dimension: String) returns(millig: Number)\n    action `sync` digital_write_pin(name: String, value: Number)\n    action `sync` digital_read_pin(name: String) returns(value: Number)\n    action `sync` analog_read_pin(name: String) returns(value: Number)\n    action `sync` analog_write_pin(name: String, value: Number)\n    action `sync` create_image(leds: String) returns(img: ♻ micro\\u003abit → Image)\n    action `sync` brightness() returns(brightness: Number)\n    action `sync` set_brightness(value: Number)\n    action `async` show_animation(leds: String, interval: Number)\n    action `sync` running_time() returns(now: Number)\n    action `async` show_number(value: Number, interval: Number)\n    action `sync` set_pixel(@this: ♻ micro\\u003abit → Image, x: Number, y: Number, value: Boolean)\n    action `sync` pixel(@this: ♻ micro\\u003abit → Image, x: Number, y: Number) returns(state: Boolean)\n    action `sync` clear(img: ♻ micro\\u003abit → Image)\n    action `sync` in_background(body: Action)\n    action `async` calibrate()\n    action `sync` forever(body: Action)\n    action `sync` pin_is_pressed(name: String) returns(pressed: Boolean)\n    action `sync` on_pin_pressed(name: String, body: Action)\n    action `sync` tell_camera_to(@event: String)\n    action `sync` raise_alert_to(@event: String)\n    action `sync` on_notified(@event: String, body: Action)\n    action `sync` notify_event_registration(evid: String)\n    action `sync` add_button(text: String, @action: Action)\n    action `sync` reset()\n    action `sync` warning(message: String)\n    action `sync` analog_set_period(pin: String, micros: Number)\n    action `sync` analog_set_pitch_pin(name: String)\n    action `async` analog_pitch(frequency: Number, ms: Number)\n    action `async` plot_frame(@this: ♻ micro\\u003abit → Image, index: Number)\n    action `async` show_leds(leds: String, ms: Number)\n    action `async` play_tone(frequency: Number, ms: Number)\n    action `sync` note_frequency(name: String) returns(frequency: Number)\n    action `sync` plot_leds(leds: String)\n    action `sync` plot_image(@this: ♻ micro\\u003abit → Image, x_offset: Number)\n    action `sync` temperature() returns(temp: Number)\n    action `sync` stop_animation()\n    action `async` show_frame(img: ♻ micro\\u003abit → Image, frame: Number)\n    action `sync` queue_event(body: Action, name: String)\n    action `async` ring_tone(frequency: Number)\n    action `sync` tell_remote_control_to(@event: String)\n    action `sync` map(value: Number, from_low: Number, from_high: Number, to_low: Number, to_high: Number) returns(r: Number)\n    action `sync` magnetic_force(dimension: String) returns(millig: Number)\n    action `sync` servo_write_pin(name: String, value: Number)\n    action `sync` servo_set_pulse(pin: String, micros: Number)\n    action `async` rest(ms: Number)\n    action `async` rotation(kind: String) returns(angle: Number)\n    action `sync` note(name: String) returns(frequency: Number)\n    action `sync` set_pixel_brightness(@this: ♻ micro\\u003abit → Image, x: Number, y: Number, value: Number)\n    action `sync` pixel_brightness(@this: ♻ micro\\u003abit → Image, x: Number, y: Number) returns(state: Number)\n    action `sync` set_display_mode(mode: String)\n    action `async` play_note(frequency: Number, ms: Number)\n    action `sync` light_level() returns(light: Number)\n    action `sync` is_ble_required() returns(r: Boolean)\n    action `sync` signal_strength() returns(strength: Number)\n    action `sync` on_signal_strength_changed(body: Action)\n  }\n}\n",
  "xczaux": "<xml xmlns=\"http://www.w3.org/1999/xhtml\"></xml>\n",
  "dceiba": "<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"device_forever\" id=\"1\" x=\"22\" y=\"16\">\n    <statement name=\"HANDLER\">\n      <block type=\"device_plot\" id=\"2\" inline=\"true\">\n        <value name=\"x\">\n          <block type=\"math_number\" id=\"3\">\n            <field name=\"NUM\">0</field>\n          </block>\n        </value>\n        <value name=\"y\">\n          <block type=\"math_number\" id=\"4\">\n            <field name=\"NUM\">0</field>\n          </block>\n        </value>\n        <next>\n          <block type=\"device_pause\" id=\"5\" inline=\"true\">\n            <value name=\"pause\">\n              <block type=\"math_number\" id=\"6\">\n                <field name=\"NUM\">200</field>\n              </block>\n            </value>\n            <next>\n              <block type=\"device_clear_display\" id=\"7\">\n                <next>\n                  <block type=\"device_pause\" id=\"8\" inline=\"true\">\n                    <value name=\"pause\">\n                      <block type=\"math_number\" id=\"9\">\n                        <field name=\"NUM\">100</field>\n                      </block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n</xml>\n",
  "jcyhqq": "meta version \"v2.2,js,ctx,refs,localcloud,unicodemodel,allasync,upperplex\";\nmeta name \"flashing heart tutorial\";\nmeta rootId \"xJRCBH3YIz4bMjLLSt5QrX5U\";\nmeta hasIds \"yes\";\nmeta platform \"current\";\nmeta parentIds \"\";\n// control images with variables. #microbit #docs #tutorials #stepByStep\n#xkPpDa5IUqmg0Bd4\naction \\u00230_main() {\n  #xMZvXjdlMZuY7Gh2 // {box:avatar:avatar}\n  #TXbKj0n88SBT3ZHf // Let's begin by creating a **forever** loop so that the heart can continuously flash.\n  #CBojua4OheEvSsyS // {stcode}\n  #ZV0rfKH4IuiF3zOj // {/box}\n  #iZkyEfHTeHpYToEd basic[lib micro\\u003abit] →forever;\n  #hb1ScsYK7CtQY9OP where `implicit` \\_body\\_() {\n    #EzH5zRoLqL44TUmF // {box:avatar:avatar}\n    #jyAdrhhmtT4QzZZo // Now let's plot and display a heart image on the BBC micro:bit.\n    #xTUlIt18NLalsjIr // {stcode}\n    #K4vgzySzJftYLZpC // {/box}\n    #y4ytMLcGIthzjN1o basic[lib micro\\u003abit] →show_leds(\"0 1 0 1 0\\n1 1 1 1 1\\n1 1 1 1 1\\n0 1 1 1 0\\n0 0 1 0 0\", 400);\n    #at2Say7Gx8U2BYGv // {stcmd:run}\n    #MlJGHtZzGZjhJihV // {box:avatar:avatar}\n    #xP8t2A5p1B2evsLe // We need to pause for a little bit before clearing the screen or else the heart disappears immediately.\n    #yKM2h4ak62gaL9pC // {stcode}\n    #ZmWcEfydvWI4hGyG // {/box}\n    #zXZvzZp0XgYYaFrD basic[lib micro\\u003abit] →pause(500);\n    #XUfrbYD8sr3fKWw1 // {box:avatar:avatar}\n    #qco45OxAC5HxnC4v // Now we can clear the screen.\n    #h2ebe2tRVqF4neZS // {stcode}\n    #bObnG5tr7OOOOatS // {/box}\n    #x5Ki4UC3eCnl7l2C basic[lib micro\\u003abit] →clear_screen;\n    #IDViNSdGTOnRj9j7 // {box:avatar:avatar}\n    #z3WVR7UxQH8jY1TK // Again, we need to pause, this time before showing the image again.\n    #LN2StgzgB42hq3kR // {stcode}\n    #TCEAlSxTntoHyJEP // {/box}\n    #bg0wqIA3xh2krx02 basic[lib micro\\u003abit] →pause(500);\n  }\n  #sL2YLOSW5pT00Ai6 // {stcmd:compile}\n}\n#T6l6bj8oRmkmUB2v meta import micro\\u003abit {\n  pub \"xhvlgz\"\n  usage {\n    type Image\n    action `sync` \\_libinit()\n    action `async` pause(ms: Number)\n    action `sync` clear_screen()\n    action `sync` width(@this: ♻ micro\\u003abit → Image) returns(w: Number)\n    action `async` scroll_image(@this: ♻ micro\\u003abit → Image, x_offset_per_step: Number, interval: Number)\n    action `sync` button_is_pressed(name: String) returns(pressed: Boolean)\n    action `sync` plot(x: Number, y: Number)\n    action `sync` point(x: Number, y: Number) returns(on: Boolean)\n    action `async` show_string(text: String, interval: Number)\n    action `sync` unplot(x: Number, y: Number)\n    action `sync` on_button_pressed(name: String, body: Action)\n    action `async` show_image(@this: ♻ micro\\u003abit → Image, x_offset: Number)\n    action `sync` compass_heading() returns(degrees: Number)\n    action `sync` acceleration(dimension: String) returns(millig: Number)\n    action `sync` digital_write_pin(name: String, value: Number)\n    action `sync` digital_read_pin(name: String) returns(value: Number)\n    action `sync` analog_read_pin(name: String) returns(value: Number)\n    action `sync` analog_write_pin(name: String, value: Number)\n    action `sync` create_image(leds: String) returns(img: ♻ micro\\u003abit → Image)\n    action `sync` brightness() returns(brightness: Number)\n    action `sync` set_brightness(value: Number)\n    action `async` show_animation(leds: String, interval: Number)\n    action `sync` running_time() returns(now: Number)\n    action `async` show_number(value: Number, interval: Number)\n    action `sync` set_pixel(@this: ♻ micro\\u003abit → Image, x: Number, y: Number, value: Boolean)\n    action `sync` pixel(@this: ♻ micro\\u003abit → Image, x: Number, y: Number) returns(state: Boolean)\n    action `sync` clear(img: ♻ micro\\u003abit → Image)\n    action `sync` in_background(body: Action)\n    action `async` calibrate()\n    action `sync` forever(body: Action)\n    action `sync` pin_is_pressed(name: String) returns(pressed: Boolean)\n    action `sync` on_pin_pressed(name: String, body: Action)\n    action `sync` remote_control(@event: String)\n    action `sync` camera(@event: String)\n    action `sync` audio_recorder(@event: String)\n    action `sync` alert(@event: String)\n    action `sync` notify_event_registration(evid: String)\n    action `sync` add_button(text: String, @action: Action)\n    action `sync` reset()\n    action `sync` warning(message: String)\n    action `sync` analog_set_period(pin: String, micros: Number)\n    action `sync` analog_set_pitch_pin(name: String)\n    action `async` analog_pitch(frequency: Number, ms: Number)\n    action `async` plot_frame(@this: ♻ micro\\u003abit → Image, index: Number)\n    action `async` show_leds(leds: String, ms: Number)\n    action `async` play_note(frequency: Number, ms: Number)\n    action `sync` note(name: String) returns(frequency: Number)\n    action `sync` plot_leds(leds: String)\n    action `sync` plot_image(@this: ♻ micro\\u003abit → Image, x_offset: Number)\n    action `sync` temperature() returns(temp: Number)\n    action `sync` stop_animation()\n    action `async` show_frame(img: ♻ micro\\u003abit → Image, frame: Number)\n  }\n}\n#La2qRKrLbx4LxKmX\nvar heart : ♻ micro\\u003abit → Image {\n  transient = true;\n}\n#x4334a31V1ZL6vj2\naction main() {\n  #BmrvZRXOS4UrAj3l // {topic:td/lessons/flashing-heart/tutorial}\n  #xNXZYjYB26M2UR9a // {template:empty}\n  #xCHA3gKFfilgUMTF // {templatename:ADJ script}\n  #DPm4qTiKKiAoe50f // {widgets:}\n  #wUr6BCeteY5gewoV // {box:avatar:boothing}\n  #xVT2NZpWJlOxhD2j // {videoptr:td/videos/flashing-heart-0}\n  #xP342IFDvLzjwRal // Welcome! This tutorial will teach how to control images with variables. Let's get started!\n  #xgIGusXyGCBXRcP4 // {/box}\n}\n#xEYX48iEHbsTFSwp\nvar imageEditor : Picture {\n  is\\_resource = true;\n  url = \"https://microbit0.blob.core.windows.net/pub/twiswpxf\";\n  transient = true;\n}\n#xofTBUKer21CfPXD\nvar boothing : Picture {\n  is\\_resource = true;\n  url = \"https://microbit0.blob.core.windows.net/pub/vflboela\";\n  transient = true;\n}\n#Aftcl64H2g55Hyhu\nvar avatar : Picture {\n  is\\_resource = true;\n  url = \"https://microbit0.blob.core.windows.net/pub/lqakekjj\";\n  transient = true;\n}\n",
  "xyelfe": "# Add your Python code here. E.g.\nfrom microbit import *\n\n\nwhile True:\n    display.scroll('Hello, World!')\n    display.show(Image.HEART)\n    sleep(2000)\n"
 }
}
